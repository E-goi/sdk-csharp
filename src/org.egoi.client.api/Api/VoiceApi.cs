/* 
 * APIv3 (Beta)
 *
 *  # Introduction Just a quick peek!!! This is our new version of API. Remember, it is not stable yet!!! But we invite you play with it and give us your feedback ;) # Getting Started  E-goi can be integrated with many environments and programming languages via our REST API. We've created a developer focused portal to give your organization a clear and quick overview of how to integrate with E-goi. The developer portal focuses on scenarios for integration and flow of events. We recommend familiarizing yourself with all of the content in the developer portal, before start using our rest API.   The E-goi  APIv3 is served over HTTPS. To ensure data privacy, unencrypted HTTP is not supported.  Request data is passed to the API by POSTing JSON objects to the API endpoints with the appropriate parameters.   BaseURL = api.egoiapp.com  # RESTful Services This API supports 5 HTTP methods:  * <b>GET</b>: The HTTP GET method is used to **read** (or retrieve) a representation of a resource. * <b>POST</b>: The POST verb is most-often utilized to **create** new resources. * <b>PATCH</b>: PATCH is used for **modify** capabilities. The PATCH request only needs to contain the changes to the resource, not the complete resource * <b>PUT</b>: PUT is most-often utilized for **update** capabilities, PUT-ing to a known resource URI with the request body containing the newly-updated representation of the original resource. * <b>DELETE</b>: DELETE is pretty easy to understand. It is used to **delete** a resource identified by a URI.  # Authentication   We use a custom authentication method, you will need a apikey that you can find in your account settings. Below you will see a curl example to get your account information:  #!/bin/bash  curl -X GET 'https://api.egoiapp.com/my-account' \\  -H 'accept: application/json' \\  -H 'Apikey: <YOUR_APY_KEY>'  Here you can see a curl Post example with authentication:  #!/bin/bash  curl -X POST 'http://api.egoiapp.com/tags' \\  -H 'accept: application/json' \\  -H 'Apikey: <YOUR_APY_KEY>' \\  -H 'Content-Type: application/json' \\  -d '{`name`:`Your custom tag`,`color`:`#FFFFFF`}'  # SDK Get started quickly with E-goi with our integration tools. Our SDK is a modern open source library that makes it easy to integrate your application with E-goi services.  * <a href='https://github.com/E-goi/sdk-java'>Java</a>  * <a href='https://github.com/E-goi/sdk-php'>PHP</a>  * <a href='https://github.com/E-goi/sdk-python'>Python</a>  * <a href='https://github.com/E-goi/sdk-ruby'>Ruby</a>  * <a href='https://github.com/E-goi/sdk-javascript'>Javascript</a>  * <a href='https://github.com/E-goi/sdk-csharp'>C#</a>  # Stream Limits Stream limits are security mesures we have to make sure our API have a fair use policy, for this reason, any request that creates or modifies data (**POST**, **PATCH** and **PUT**) is limited to a maximum of **20MB** of content length. If you arrive to this limit in one of your request, you'll receive a HTTP code **413 (Request Entity Too Large)** and the request will be ignored. To avoid this error in importation's requests, it's advised the request's division in batches that have each one less than 20MB. <security-definitions/>
 *
 * OpenAPI spec version: 3.0.0-beta
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using org.egoi.client.api.Client;
using org.egoi.client.api.Model;

namespace org.egoi.client.api.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IVoiceApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Send voice message
        /// </summary>
        /// <remarks>
        /// Deploys and sends an voice message
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignHash">ID of the Campaign</param>
        /// <param name="campaignVoiceSendRequest">Parameters for the &#39;send voice&#39; action</param>
        /// <returns>AcceptedResponse</returns>
        AcceptedResponse ActionSendVoice (string campaignHash, CampaignVoiceSendRequest campaignVoiceSendRequest);

        /// <summary>
        /// Send voice message
        /// </summary>
        /// <remarks>
        /// Deploys and sends an voice message
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignHash">ID of the Campaign</param>
        /// <param name="campaignVoiceSendRequest">Parameters for the &#39;send voice&#39; action</param>
        /// <returns>ApiResponse of AcceptedResponse</returns>
        ApiResponse<AcceptedResponse> ActionSendVoiceWithHttpInfo (string campaignHash, CampaignVoiceSendRequest campaignVoiceSendRequest);
        /// <summary>
        /// Create new voice campaign
        /// </summary>
        /// <remarks>
        /// Create a new voice campaign
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="voiceCampaign">Parameters for the Voice Campaign</param>
        /// <returns>CampaignHash</returns>
        CampaignHash CreateVoiceCampaign (VoiceCampaign voiceCampaign);

        /// <summary>
        /// Create new voice campaign
        /// </summary>
        /// <remarks>
        /// Create a new voice campaign
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="voiceCampaign">Parameters for the Voice Campaign</param>
        /// <returns>ApiResponse of CampaignHash</returns>
        ApiResponse<CampaignHash> CreateVoiceCampaignWithHttpInfo (VoiceCampaign voiceCampaign);
        /// <summary>
        /// Update a specific voice campaign
        /// </summary>
        /// <remarks>
        /// Update a voice campaign
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignHash">ID of the Campaign</param>
        /// <param name="voicePatchCampaign">Parameters for the Voice Campaign</param>
        /// <returns>CampaignHash</returns>
        CampaignHash PatchVoiceCampaign (string campaignHash, VoicePatchCampaign voicePatchCampaign);

        /// <summary>
        /// Update a specific voice campaign
        /// </summary>
        /// <remarks>
        /// Update a voice campaign
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignHash">ID of the Campaign</param>
        /// <param name="voicePatchCampaign">Parameters for the Voice Campaign</param>
        /// <returns>ApiResponse of CampaignHash</returns>
        ApiResponse<CampaignHash> PatchVoiceCampaignWithHttpInfo (string campaignHash, VoicePatchCampaign voicePatchCampaign);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Send voice message
        /// </summary>
        /// <remarks>
        /// Deploys and sends an voice message
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignHash">ID of the Campaign</param>
        /// <param name="campaignVoiceSendRequest">Parameters for the &#39;send voice&#39; action</param>
        /// <returns>Task of AcceptedResponse</returns>
        System.Threading.Tasks.Task<AcceptedResponse> ActionSendVoiceAsync (string campaignHash, CampaignVoiceSendRequest campaignVoiceSendRequest);

        /// <summary>
        /// Send voice message
        /// </summary>
        /// <remarks>
        /// Deploys and sends an voice message
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignHash">ID of the Campaign</param>
        /// <param name="campaignVoiceSendRequest">Parameters for the &#39;send voice&#39; action</param>
        /// <returns>Task of ApiResponse (AcceptedResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AcceptedResponse>> ActionSendVoiceAsyncWithHttpInfo (string campaignHash, CampaignVoiceSendRequest campaignVoiceSendRequest);
        /// <summary>
        /// Create new voice campaign
        /// </summary>
        /// <remarks>
        /// Create a new voice campaign
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="voiceCampaign">Parameters for the Voice Campaign</param>
        /// <returns>Task of CampaignHash</returns>
        System.Threading.Tasks.Task<CampaignHash> CreateVoiceCampaignAsync (VoiceCampaign voiceCampaign);

        /// <summary>
        /// Create new voice campaign
        /// </summary>
        /// <remarks>
        /// Create a new voice campaign
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="voiceCampaign">Parameters for the Voice Campaign</param>
        /// <returns>Task of ApiResponse (CampaignHash)</returns>
        System.Threading.Tasks.Task<ApiResponse<CampaignHash>> CreateVoiceCampaignAsyncWithHttpInfo (VoiceCampaign voiceCampaign);
        /// <summary>
        /// Update a specific voice campaign
        /// </summary>
        /// <remarks>
        /// Update a voice campaign
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignHash">ID of the Campaign</param>
        /// <param name="voicePatchCampaign">Parameters for the Voice Campaign</param>
        /// <returns>Task of CampaignHash</returns>
        System.Threading.Tasks.Task<CampaignHash> PatchVoiceCampaignAsync (string campaignHash, VoicePatchCampaign voicePatchCampaign);

        /// <summary>
        /// Update a specific voice campaign
        /// </summary>
        /// <remarks>
        /// Update a voice campaign
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignHash">ID of the Campaign</param>
        /// <param name="voicePatchCampaign">Parameters for the Voice Campaign</param>
        /// <returns>Task of ApiResponse (CampaignHash)</returns>
        System.Threading.Tasks.Task<ApiResponse<CampaignHash>> PatchVoiceCampaignAsyncWithHttpInfo (string campaignHash, VoicePatchCampaign voicePatchCampaign);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class VoiceApi : IVoiceApi
    {
        private org.egoi.client.api.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="VoiceApi"/> class.
        /// </summary>
        /// <returns></returns>
        public VoiceApi(String basePath)
        {
            this.Configuration = new org.egoi.client.api.Client.Configuration { BasePath = basePath };

            ExceptionFactory = org.egoi.client.api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="VoiceApi"/> class
        /// </summary>
        /// <returns></returns>
        public VoiceApi()
        {
            this.Configuration = org.egoi.client.api.Client.Configuration.Default;

            ExceptionFactory = org.egoi.client.api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="VoiceApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public VoiceApi(org.egoi.client.api.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = org.egoi.client.api.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = org.egoi.client.api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public org.egoi.client.api.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public org.egoi.client.api.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Send voice message Deploys and sends an voice message
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignHash">ID of the Campaign</param>
        /// <param name="campaignVoiceSendRequest">Parameters for the &#39;send voice&#39; action</param>
        /// <returns>AcceptedResponse</returns>
        public AcceptedResponse ActionSendVoice (string campaignHash, CampaignVoiceSendRequest campaignVoiceSendRequest)
        {
             ApiResponse<AcceptedResponse> localVarResponse = ActionSendVoiceWithHttpInfo(campaignHash, campaignVoiceSendRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Send voice message Deploys and sends an voice message
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignHash">ID of the Campaign</param>
        /// <param name="campaignVoiceSendRequest">Parameters for the &#39;send voice&#39; action</param>
        /// <returns>ApiResponse of AcceptedResponse</returns>
        public ApiResponse< AcceptedResponse > ActionSendVoiceWithHttpInfo (string campaignHash, CampaignVoiceSendRequest campaignVoiceSendRequest)
        {
            // verify the required parameter 'campaignHash' is set
            if (campaignHash == null)
                throw new ApiException(400, "Missing required parameter 'campaignHash' when calling VoiceApi->ActionSendVoice");
            // verify the required parameter 'campaignVoiceSendRequest' is set
            if (campaignVoiceSendRequest == null)
                throw new ApiException(400, "Missing required parameter 'campaignVoiceSendRequest' when calling VoiceApi->ActionSendVoice");

            var localVarPath = "/campaigns/voice/{campaign_hash}/actions/send";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (campaignHash != null) localVarPathParams.Add("campaign_hash", this.Configuration.ApiClient.ParameterToString(campaignHash)); // path parameter
            if (campaignVoiceSendRequest != null && campaignVoiceSendRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(campaignVoiceSendRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = campaignVoiceSendRequest; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ActionSendVoice", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AcceptedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AcceptedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AcceptedResponse)));
        }

        /// <summary>
        /// Send voice message Deploys and sends an voice message
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignHash">ID of the Campaign</param>
        /// <param name="campaignVoiceSendRequest">Parameters for the &#39;send voice&#39; action</param>
        /// <returns>Task of AcceptedResponse</returns>
        public async System.Threading.Tasks.Task<AcceptedResponse> ActionSendVoiceAsync (string campaignHash, CampaignVoiceSendRequest campaignVoiceSendRequest)
        {
             ApiResponse<AcceptedResponse> localVarResponse = await ActionSendVoiceAsyncWithHttpInfo(campaignHash, campaignVoiceSendRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Send voice message Deploys and sends an voice message
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignHash">ID of the Campaign</param>
        /// <param name="campaignVoiceSendRequest">Parameters for the &#39;send voice&#39; action</param>
        /// <returns>Task of ApiResponse (AcceptedResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AcceptedResponse>> ActionSendVoiceAsyncWithHttpInfo (string campaignHash, CampaignVoiceSendRequest campaignVoiceSendRequest)
        {
            // verify the required parameter 'campaignHash' is set
            if (campaignHash == null)
                throw new ApiException(400, "Missing required parameter 'campaignHash' when calling VoiceApi->ActionSendVoice");
            // verify the required parameter 'campaignVoiceSendRequest' is set
            if (campaignVoiceSendRequest == null)
                throw new ApiException(400, "Missing required parameter 'campaignVoiceSendRequest' when calling VoiceApi->ActionSendVoice");

            var localVarPath = "/campaigns/voice/{campaign_hash}/actions/send";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (campaignHash != null) localVarPathParams.Add("campaign_hash", this.Configuration.ApiClient.ParameterToString(campaignHash)); // path parameter
            if (campaignVoiceSendRequest != null && campaignVoiceSendRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(campaignVoiceSendRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = campaignVoiceSendRequest; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ActionSendVoice", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AcceptedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AcceptedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AcceptedResponse)));
        }

        /// <summary>
        /// Create new voice campaign Create a new voice campaign
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="voiceCampaign">Parameters for the Voice Campaign</param>
        /// <returns>CampaignHash</returns>
        public CampaignHash CreateVoiceCampaign (VoiceCampaign voiceCampaign)
        {
             ApiResponse<CampaignHash> localVarResponse = CreateVoiceCampaignWithHttpInfo(voiceCampaign);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create new voice campaign Create a new voice campaign
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="voiceCampaign">Parameters for the Voice Campaign</param>
        /// <returns>ApiResponse of CampaignHash</returns>
        public ApiResponse< CampaignHash > CreateVoiceCampaignWithHttpInfo (VoiceCampaign voiceCampaign)
        {
            // verify the required parameter 'voiceCampaign' is set
            if (voiceCampaign == null)
                throw new ApiException(400, "Missing required parameter 'voiceCampaign' when calling VoiceApi->CreateVoiceCampaign");

            var localVarPath = "/campaigns/voice";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (voiceCampaign != null && voiceCampaign.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(voiceCampaign); // http body (model) parameter
            }
            else
            {
                localVarPostBody = voiceCampaign; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateVoiceCampaign", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CampaignHash>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CampaignHash) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CampaignHash)));
        }

        /// <summary>
        /// Create new voice campaign Create a new voice campaign
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="voiceCampaign">Parameters for the Voice Campaign</param>
        /// <returns>Task of CampaignHash</returns>
        public async System.Threading.Tasks.Task<CampaignHash> CreateVoiceCampaignAsync (VoiceCampaign voiceCampaign)
        {
             ApiResponse<CampaignHash> localVarResponse = await CreateVoiceCampaignAsyncWithHttpInfo(voiceCampaign);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create new voice campaign Create a new voice campaign
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="voiceCampaign">Parameters for the Voice Campaign</param>
        /// <returns>Task of ApiResponse (CampaignHash)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CampaignHash>> CreateVoiceCampaignAsyncWithHttpInfo (VoiceCampaign voiceCampaign)
        {
            // verify the required parameter 'voiceCampaign' is set
            if (voiceCampaign == null)
                throw new ApiException(400, "Missing required parameter 'voiceCampaign' when calling VoiceApi->CreateVoiceCampaign");

            var localVarPath = "/campaigns/voice";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (voiceCampaign != null && voiceCampaign.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(voiceCampaign); // http body (model) parameter
            }
            else
            {
                localVarPostBody = voiceCampaign; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateVoiceCampaign", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CampaignHash>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CampaignHash) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CampaignHash)));
        }

        /// <summary>
        /// Update a specific voice campaign Update a voice campaign
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignHash">ID of the Campaign</param>
        /// <param name="voicePatchCampaign">Parameters for the Voice Campaign</param>
        /// <returns>CampaignHash</returns>
        public CampaignHash PatchVoiceCampaign (string campaignHash, VoicePatchCampaign voicePatchCampaign)
        {
             ApiResponse<CampaignHash> localVarResponse = PatchVoiceCampaignWithHttpInfo(campaignHash, voicePatchCampaign);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a specific voice campaign Update a voice campaign
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignHash">ID of the Campaign</param>
        /// <param name="voicePatchCampaign">Parameters for the Voice Campaign</param>
        /// <returns>ApiResponse of CampaignHash</returns>
        public ApiResponse< CampaignHash > PatchVoiceCampaignWithHttpInfo (string campaignHash, VoicePatchCampaign voicePatchCampaign)
        {
            // verify the required parameter 'campaignHash' is set
            if (campaignHash == null)
                throw new ApiException(400, "Missing required parameter 'campaignHash' when calling VoiceApi->PatchVoiceCampaign");
            // verify the required parameter 'voicePatchCampaign' is set
            if (voicePatchCampaign == null)
                throw new ApiException(400, "Missing required parameter 'voicePatchCampaign' when calling VoiceApi->PatchVoiceCampaign");

            var localVarPath = "/campaigns/voice/{campaign_hash}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (campaignHash != null) localVarPathParams.Add("campaign_hash", this.Configuration.ApiClient.ParameterToString(campaignHash)); // path parameter
            if (voicePatchCampaign != null && voicePatchCampaign.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(voicePatchCampaign); // http body (model) parameter
            }
            else
            {
                localVarPostBody = voicePatchCampaign; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PatchVoiceCampaign", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CampaignHash>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CampaignHash) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CampaignHash)));
        }

        /// <summary>
        /// Update a specific voice campaign Update a voice campaign
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignHash">ID of the Campaign</param>
        /// <param name="voicePatchCampaign">Parameters for the Voice Campaign</param>
        /// <returns>Task of CampaignHash</returns>
        public async System.Threading.Tasks.Task<CampaignHash> PatchVoiceCampaignAsync (string campaignHash, VoicePatchCampaign voicePatchCampaign)
        {
             ApiResponse<CampaignHash> localVarResponse = await PatchVoiceCampaignAsyncWithHttpInfo(campaignHash, voicePatchCampaign);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a specific voice campaign Update a voice campaign
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignHash">ID of the Campaign</param>
        /// <param name="voicePatchCampaign">Parameters for the Voice Campaign</param>
        /// <returns>Task of ApiResponse (CampaignHash)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CampaignHash>> PatchVoiceCampaignAsyncWithHttpInfo (string campaignHash, VoicePatchCampaign voicePatchCampaign)
        {
            // verify the required parameter 'campaignHash' is set
            if (campaignHash == null)
                throw new ApiException(400, "Missing required parameter 'campaignHash' when calling VoiceApi->PatchVoiceCampaign");
            // verify the required parameter 'voicePatchCampaign' is set
            if (voicePatchCampaign == null)
                throw new ApiException(400, "Missing required parameter 'voicePatchCampaign' when calling VoiceApi->PatchVoiceCampaign");

            var localVarPath = "/campaigns/voice/{campaign_hash}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (campaignHash != null) localVarPathParams.Add("campaign_hash", this.Configuration.ApiClient.ParameterToString(campaignHash)); // path parameter
            if (voicePatchCampaign != null && voicePatchCampaign.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(voicePatchCampaign); // http body (model) parameter
            }
            else
            {
                localVarPostBody = voicePatchCampaign; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PatchVoiceCampaign", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CampaignHash>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CampaignHash) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CampaignHash)));
        }

    }
}
