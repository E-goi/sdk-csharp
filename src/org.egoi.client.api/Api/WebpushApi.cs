/* 
 * APIv3 (New)
 *
 *  # Introduction This is our new version of API. We invite you to start using it and give us your feedback # Getting Started  E-goi can be integrated with many environments and programming languages via our REST API. We've created a developer focused portal to give your organization a clear and quick overview of how to integrate with E-goi. The developer portal focuses on scenarios for integration and flow of events. We recommend familiarizing yourself with all of the content in the developer portal, before start using our rest API.   The E-goi  APIv3 is served over HTTPS. To ensure data privacy, unencrypted HTTP is not supported.  Request data is passed to the API by POSTing JSON objects to the API endpoints with the appropriate parameters.   BaseURL = api.egoiapp.com  # RESTful Services This API supports 5 HTTP methods:  * <b>GET</b>: The HTTP GET method is used to **read** (or retrieve) a representation of a resource. * <b>POST</b>: The POST verb is most-often utilized to **create** new resources. * <b>PATCH</b>: PATCH is used for **modify** capabilities. The PATCH request only needs to contain the changes to the resource, not the complete resource * <b>PUT</b>: PUT is most-often utilized for **update** capabilities, PUT-ing to a known resource URI with the request body containing the newly-updated representation of the original resource. * <b>DELETE</b>: DELETE is pretty easy to understand. It is used to **delete** a resource identified by a URI.  # Authentication   We use a custom authentication method, you will need a apikey that you can find in your account settings. Below you will see a curl example to get your account information:  #!/bin/bash  curl -X GET 'https://api.egoiapp.com/my-account' \\  -H 'accept: application/json' \\  -H 'Apikey: <YOUR_APY_KEY>'  Here you can see a curl Post example with authentication:  #!/bin/bash  curl -X POST 'http://api.egoiapp.com/tags' \\  -H 'accept: application/json' \\  -H 'Apikey: <YOUR_APY_KEY>' \\  -H 'Content-Type: application/json' \\  -d '{`name`:`Your custom tag`,`color`:`#FFFFFF`}'  # SDK Get started quickly with E-goi with our integration tools. Our SDK is a modern open source library that makes it easy to integrate your application with E-goi services.  * <a href='https://github.com/E-goi/sdk-java'>Java</a>  * <a href='https://github.com/E-goi/sdk-php'>PHP</a>  * <a href='https://github.com/E-goi/sdk-python'>Python</a>  * <a href='https://github.com/E-goi/sdk-ruby'>Ruby</a>  * <a href='https://github.com/E-goi/sdk-javascript'>Javascript</a>  * <a href='https://github.com/E-goi/sdk-csharp'>C#</a>  # Stream Limits Stream limits are security mesures we have to make sure our API have a fair use policy, for this reason, any request that creates or modifies data (**POST**, **PATCH** and **PUT**) is limited to a maximum of **20MB** of content length. If you arrive to this limit in one of your request, you'll receive a HTTP code **413 (Request Entity Too Large)** and the request will be ignored. To avoid this error in importation's requests, it's advised the request's division in batches that have each one less than 20MB.  # Timeouts Timeouts set a maximum waiting time on a request's response. Our API, sets a default timeout for each request and when breached, you'll receive an HTTP **408 (Request Timeout)** error code. You should take into consideration that response times can vary widely based on the complexity of the request, amount of data being analyzed, and the load on the system and workspace at the time of the query. When dealing with such errors, you should first attempt to reduce the complexity and amount of data under analysis, and only then, if problems are still occurring ask for support.  For all these reasons, the default timeout for each request is **10 Seconds** and any request that creates or modifies data (**POST**, **PATCH** and **PUT**) will have a timeout of **60 Seconds**. Specific timeouts may exist for specific requests, these can be found in the request's documentation.  <security-definitions/>
 *
 * OpenAPI spec version: 3.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using org.egoi.client.api.Client;
using org.egoi.client.api.Model;

namespace org.egoi.client.api.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWebpushApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Enable a rss webpush campaign
        /// </summary>
        /// <remarks>
        /// Enable rss webpush message
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignHash">ID of the Campaign</param>
        /// <returns>AcceptedResponse</returns>
        AcceptedResponse ActionEnableWebPushRss (string campaignHash);

        /// <summary>
        /// Enable a rss webpush campaign
        /// </summary>
        /// <remarks>
        /// Enable rss webpush message
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignHash">ID of the Campaign</param>
        /// <returns>ApiResponse of AcceptedResponse</returns>
        ApiResponse<AcceptedResponse> ActionEnableWebPushRssWithHttpInfo (string campaignHash);
        /// <summary>
        /// Send webpush message
        /// </summary>
        /// <remarks>
        /// Deploys and sends a webpush message
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignHash">ID of the Campaign</param>
        /// <param name="campaignWebPushSendRequest">Parameters for the &#39;send web-push&#39; action</param>
        /// <returns>AcceptedResponse</returns>
        AcceptedResponse ActionSendWebPush (string campaignHash, CampaignWebPushSendRequest campaignWebPushSendRequest);

        /// <summary>
        /// Send webpush message
        /// </summary>
        /// <remarks>
        /// Deploys and sends a webpush message
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignHash">ID of the Campaign</param>
        /// <param name="campaignWebPushSendRequest">Parameters for the &#39;send web-push&#39; action</param>
        /// <returns>ApiResponse of AcceptedResponse</returns>
        ApiResponse<AcceptedResponse> ActionSendWebPushWithHttpInfo (string campaignHash, CampaignWebPushSendRequest campaignWebPushSendRequest);
        /// <summary>
        /// Create new webpush campaign
        /// </summary>
        /// <remarks>
        /// Create a new webpush campaign
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webPushCampaign">Parameters for the webpush campaign</param>
        /// <returns>CampaignHash</returns>
        CampaignHash CreateWebPushCampaign (WebPushCampaign webPushCampaign);

        /// <summary>
        /// Create new webpush campaign
        /// </summary>
        /// <remarks>
        /// Create a new webpush campaign
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webPushCampaign">Parameters for the webpush campaign</param>
        /// <returns>ApiResponse of CampaignHash</returns>
        ApiResponse<CampaignHash> CreateWebPushCampaignWithHttpInfo (WebPushCampaign webPushCampaign);
        /// <summary>
        /// Create new webpush rss campaign
        /// </summary>
        /// <remarks>
        /// Create a new webpush rss campaign
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webPushRssCampaign">Parameters for the WebPush Campaign</param>
        /// <returns>HashcodeCampaign</returns>
        HashcodeCampaign CreateWebPushRssCampaign (WebPushRssCampaign webPushRssCampaign);

        /// <summary>
        /// Create new webpush rss campaign
        /// </summary>
        /// <remarks>
        /// Create a new webpush rss campaign
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webPushRssCampaign">Parameters for the WebPush Campaign</param>
        /// <returns>ApiResponse of HashcodeCampaign</returns>
        ApiResponse<HashcodeCampaign> CreateWebPushRssCampaignWithHttpInfo (WebPushRssCampaign webPushRssCampaign);
        /// <summary>
        /// Creates a webpush site
        /// </summary>
        /// <remarks>
        /// Create a new webpush site
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webPushSite">Parameters for the webpush site</param>
        /// <returns>WebPushSite</returns>
        WebPushSite CreateWebpushSite (WebPushSite webPushSite);

        /// <summary>
        /// Creates a webpush site
        /// </summary>
        /// <remarks>
        /// Create a new webpush site
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webPushSite">Parameters for the webpush site</param>
        /// <returns>ApiResponse of WebPushSite</returns>
        ApiResponse<WebPushSite> CreateWebpushSiteWithHttpInfo (WebPushSite webPushSite);
        /// <summary>
        /// Get all webpush sites
        /// </summary>
        /// <remarks>
        /// Returns all wepush&#39;s sites
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Element offset (starting at zero for the first element) (optional)</param>
        /// <param name="limit">Number of items to return (optional, default to 10)</param>
        /// <param name="order">Type of order (optional, default to desc)</param>
        /// <param name="orderBy">Reference attribute to order sites (optional, default to list_id)</param>
        /// <param name="listId">Select sites referenced to a list (optional)</param>
        /// <returns>TagCollection1</returns>
        TagCollection1 GetAllWebPushSites (int? offset = null, int? limit = null, string order = null, string orderBy = null, int? listId = null);

        /// <summary>
        /// Get all webpush sites
        /// </summary>
        /// <remarks>
        /// Returns all wepush&#39;s sites
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Element offset (starting at zero for the first element) (optional)</param>
        /// <param name="limit">Number of items to return (optional, default to 10)</param>
        /// <param name="order">Type of order (optional, default to desc)</param>
        /// <param name="orderBy">Reference attribute to order sites (optional, default to list_id)</param>
        /// <param name="listId">Select sites referenced to a list (optional)</param>
        /// <returns>ApiResponse of TagCollection1</returns>
        ApiResponse<TagCollection1> GetAllWebPushSitesWithHttpInfo (int? offset = null, int? limit = null, string order = null, string orderBy = null, int? listId = null);
        /// <summary>
        /// Update a specific webpush campaign
        /// </summary>
        /// <remarks>
        /// Update a webpush campaign
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignHash">ID of the Campaign</param>
        /// <param name="webPushPatchCampaign">Parameters for the Webpush Campaign</param>
        /// <returns>CampaignHash</returns>
        CampaignHash PatchWebPushCampaign (string campaignHash, WebPushPatchCampaign webPushPatchCampaign);

        /// <summary>
        /// Update a specific webpush campaign
        /// </summary>
        /// <remarks>
        /// Update a webpush campaign
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignHash">ID of the Campaign</param>
        /// <param name="webPushPatchCampaign">Parameters for the Webpush Campaign</param>
        /// <returns>ApiResponse of CampaignHash</returns>
        ApiResponse<CampaignHash> PatchWebPushCampaignWithHttpInfo (string campaignHash, WebPushPatchCampaign webPushPatchCampaign);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Enable a rss webpush campaign
        /// </summary>
        /// <remarks>
        /// Enable rss webpush message
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignHash">ID of the Campaign</param>
        /// <returns>Task of AcceptedResponse</returns>
        System.Threading.Tasks.Task<AcceptedResponse> ActionEnableWebPushRssAsync (string campaignHash);

        /// <summary>
        /// Enable a rss webpush campaign
        /// </summary>
        /// <remarks>
        /// Enable rss webpush message
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignHash">ID of the Campaign</param>
        /// <returns>Task of ApiResponse (AcceptedResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AcceptedResponse>> ActionEnableWebPushRssAsyncWithHttpInfo (string campaignHash);
        /// <summary>
        /// Send webpush message
        /// </summary>
        /// <remarks>
        /// Deploys and sends a webpush message
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignHash">ID of the Campaign</param>
        /// <param name="campaignWebPushSendRequest">Parameters for the &#39;send web-push&#39; action</param>
        /// <returns>Task of AcceptedResponse</returns>
        System.Threading.Tasks.Task<AcceptedResponse> ActionSendWebPushAsync (string campaignHash, CampaignWebPushSendRequest campaignWebPushSendRequest);

        /// <summary>
        /// Send webpush message
        /// </summary>
        /// <remarks>
        /// Deploys and sends a webpush message
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignHash">ID of the Campaign</param>
        /// <param name="campaignWebPushSendRequest">Parameters for the &#39;send web-push&#39; action</param>
        /// <returns>Task of ApiResponse (AcceptedResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AcceptedResponse>> ActionSendWebPushAsyncWithHttpInfo (string campaignHash, CampaignWebPushSendRequest campaignWebPushSendRequest);
        /// <summary>
        /// Create new webpush campaign
        /// </summary>
        /// <remarks>
        /// Create a new webpush campaign
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webPushCampaign">Parameters for the webpush campaign</param>
        /// <returns>Task of CampaignHash</returns>
        System.Threading.Tasks.Task<CampaignHash> CreateWebPushCampaignAsync (WebPushCampaign webPushCampaign);

        /// <summary>
        /// Create new webpush campaign
        /// </summary>
        /// <remarks>
        /// Create a new webpush campaign
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webPushCampaign">Parameters for the webpush campaign</param>
        /// <returns>Task of ApiResponse (CampaignHash)</returns>
        System.Threading.Tasks.Task<ApiResponse<CampaignHash>> CreateWebPushCampaignAsyncWithHttpInfo (WebPushCampaign webPushCampaign);
        /// <summary>
        /// Create new webpush rss campaign
        /// </summary>
        /// <remarks>
        /// Create a new webpush rss campaign
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webPushRssCampaign">Parameters for the WebPush Campaign</param>
        /// <returns>Task of HashcodeCampaign</returns>
        System.Threading.Tasks.Task<HashcodeCampaign> CreateWebPushRssCampaignAsync (WebPushRssCampaign webPushRssCampaign);

        /// <summary>
        /// Create new webpush rss campaign
        /// </summary>
        /// <remarks>
        /// Create a new webpush rss campaign
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webPushRssCampaign">Parameters for the WebPush Campaign</param>
        /// <returns>Task of ApiResponse (HashcodeCampaign)</returns>
        System.Threading.Tasks.Task<ApiResponse<HashcodeCampaign>> CreateWebPushRssCampaignAsyncWithHttpInfo (WebPushRssCampaign webPushRssCampaign);
        /// <summary>
        /// Creates a webpush site
        /// </summary>
        /// <remarks>
        /// Create a new webpush site
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webPushSite">Parameters for the webpush site</param>
        /// <returns>Task of WebPushSite</returns>
        System.Threading.Tasks.Task<WebPushSite> CreateWebpushSiteAsync (WebPushSite webPushSite);

        /// <summary>
        /// Creates a webpush site
        /// </summary>
        /// <remarks>
        /// Create a new webpush site
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webPushSite">Parameters for the webpush site</param>
        /// <returns>Task of ApiResponse (WebPushSite)</returns>
        System.Threading.Tasks.Task<ApiResponse<WebPushSite>> CreateWebpushSiteAsyncWithHttpInfo (WebPushSite webPushSite);
        /// <summary>
        /// Get all webpush sites
        /// </summary>
        /// <remarks>
        /// Returns all wepush&#39;s sites
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Element offset (starting at zero for the first element) (optional)</param>
        /// <param name="limit">Number of items to return (optional, default to 10)</param>
        /// <param name="order">Type of order (optional, default to desc)</param>
        /// <param name="orderBy">Reference attribute to order sites (optional, default to list_id)</param>
        /// <param name="listId">Select sites referenced to a list (optional)</param>
        /// <returns>Task of TagCollection1</returns>
        System.Threading.Tasks.Task<TagCollection1> GetAllWebPushSitesAsync (int? offset = null, int? limit = null, string order = null, string orderBy = null, int? listId = null);

        /// <summary>
        /// Get all webpush sites
        /// </summary>
        /// <remarks>
        /// Returns all wepush&#39;s sites
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Element offset (starting at zero for the first element) (optional)</param>
        /// <param name="limit">Number of items to return (optional, default to 10)</param>
        /// <param name="order">Type of order (optional, default to desc)</param>
        /// <param name="orderBy">Reference attribute to order sites (optional, default to list_id)</param>
        /// <param name="listId">Select sites referenced to a list (optional)</param>
        /// <returns>Task of ApiResponse (TagCollection1)</returns>
        System.Threading.Tasks.Task<ApiResponse<TagCollection1>> GetAllWebPushSitesAsyncWithHttpInfo (int? offset = null, int? limit = null, string order = null, string orderBy = null, int? listId = null);
        /// <summary>
        /// Update a specific webpush campaign
        /// </summary>
        /// <remarks>
        /// Update a webpush campaign
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignHash">ID of the Campaign</param>
        /// <param name="webPushPatchCampaign">Parameters for the Webpush Campaign</param>
        /// <returns>Task of CampaignHash</returns>
        System.Threading.Tasks.Task<CampaignHash> PatchWebPushCampaignAsync (string campaignHash, WebPushPatchCampaign webPushPatchCampaign);

        /// <summary>
        /// Update a specific webpush campaign
        /// </summary>
        /// <remarks>
        /// Update a webpush campaign
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignHash">ID of the Campaign</param>
        /// <param name="webPushPatchCampaign">Parameters for the Webpush Campaign</param>
        /// <returns>Task of ApiResponse (CampaignHash)</returns>
        System.Threading.Tasks.Task<ApiResponse<CampaignHash>> PatchWebPushCampaignAsyncWithHttpInfo (string campaignHash, WebPushPatchCampaign webPushPatchCampaign);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class WebpushApi : IWebpushApi
    {
        private org.egoi.client.api.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="WebpushApi"/> class.
        /// </summary>
        /// <returns></returns>
        public WebpushApi(String basePath)
        {
            this.Configuration = new org.egoi.client.api.Client.Configuration { BasePath = basePath };

            ExceptionFactory = org.egoi.client.api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WebpushApi"/> class
        /// </summary>
        /// <returns></returns>
        public WebpushApi()
        {
            this.Configuration = org.egoi.client.api.Client.Configuration.Default;

            ExceptionFactory = org.egoi.client.api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WebpushApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public WebpushApi(org.egoi.client.api.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = org.egoi.client.api.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = org.egoi.client.api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public org.egoi.client.api.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public org.egoi.client.api.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Enable a rss webpush campaign Enable rss webpush message
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignHash">ID of the Campaign</param>
        /// <returns>AcceptedResponse</returns>
        public AcceptedResponse ActionEnableWebPushRss (string campaignHash)
        {
             ApiResponse<AcceptedResponse> localVarResponse = ActionEnableWebPushRssWithHttpInfo(campaignHash);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Enable a rss webpush campaign Enable rss webpush message
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignHash">ID of the Campaign</param>
        /// <returns>ApiResponse of AcceptedResponse</returns>
        public ApiResponse< AcceptedResponse > ActionEnableWebPushRssWithHttpInfo (string campaignHash)
        {
            // verify the required parameter 'campaignHash' is set
            if (campaignHash == null)
                throw new ApiException(400, "Missing required parameter 'campaignHash' when calling WebpushApi->ActionEnableWebPushRss");

            var localVarPath = "/campaigns/webpush/rss/{campaign_hash}/actions/enable";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (campaignHash != null) localVarPathParams.Add("campaign_hash", this.Configuration.ApiClient.ParameterToString(campaignHash)); // path parameter

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ActionEnableWebPushRss", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AcceptedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AcceptedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AcceptedResponse)));
        }

        /// <summary>
        /// Enable a rss webpush campaign Enable rss webpush message
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignHash">ID of the Campaign</param>
        /// <returns>Task of AcceptedResponse</returns>
        public async System.Threading.Tasks.Task<AcceptedResponse> ActionEnableWebPushRssAsync (string campaignHash)
        {
             ApiResponse<AcceptedResponse> localVarResponse = await ActionEnableWebPushRssAsyncWithHttpInfo(campaignHash);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Enable a rss webpush campaign Enable rss webpush message
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignHash">ID of the Campaign</param>
        /// <returns>Task of ApiResponse (AcceptedResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AcceptedResponse>> ActionEnableWebPushRssAsyncWithHttpInfo (string campaignHash)
        {
            // verify the required parameter 'campaignHash' is set
            if (campaignHash == null)
                throw new ApiException(400, "Missing required parameter 'campaignHash' when calling WebpushApi->ActionEnableWebPushRss");

            var localVarPath = "/campaigns/webpush/rss/{campaign_hash}/actions/enable";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (campaignHash != null) localVarPathParams.Add("campaign_hash", this.Configuration.ApiClient.ParameterToString(campaignHash)); // path parameter

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ActionEnableWebPushRss", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AcceptedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AcceptedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AcceptedResponse)));
        }

        /// <summary>
        /// Send webpush message Deploys and sends a webpush message
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignHash">ID of the Campaign</param>
        /// <param name="campaignWebPushSendRequest">Parameters for the &#39;send web-push&#39; action</param>
        /// <returns>AcceptedResponse</returns>
        public AcceptedResponse ActionSendWebPush (string campaignHash, CampaignWebPushSendRequest campaignWebPushSendRequest)
        {
             ApiResponse<AcceptedResponse> localVarResponse = ActionSendWebPushWithHttpInfo(campaignHash, campaignWebPushSendRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Send webpush message Deploys and sends a webpush message
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignHash">ID of the Campaign</param>
        /// <param name="campaignWebPushSendRequest">Parameters for the &#39;send web-push&#39; action</param>
        /// <returns>ApiResponse of AcceptedResponse</returns>
        public ApiResponse< AcceptedResponse > ActionSendWebPushWithHttpInfo (string campaignHash, CampaignWebPushSendRequest campaignWebPushSendRequest)
        {
            // verify the required parameter 'campaignHash' is set
            if (campaignHash == null)
                throw new ApiException(400, "Missing required parameter 'campaignHash' when calling WebpushApi->ActionSendWebPush");
            // verify the required parameter 'campaignWebPushSendRequest' is set
            if (campaignWebPushSendRequest == null)
                throw new ApiException(400, "Missing required parameter 'campaignWebPushSendRequest' when calling WebpushApi->ActionSendWebPush");

            var localVarPath = "/campaigns/web-push/{campaign_hash}/actions/send";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (campaignHash != null) localVarPathParams.Add("campaign_hash", this.Configuration.ApiClient.ParameterToString(campaignHash)); // path parameter
            if (campaignWebPushSendRequest != null && campaignWebPushSendRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(campaignWebPushSendRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = campaignWebPushSendRequest; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ActionSendWebPush", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AcceptedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AcceptedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AcceptedResponse)));
        }

        /// <summary>
        /// Send webpush message Deploys and sends a webpush message
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignHash">ID of the Campaign</param>
        /// <param name="campaignWebPushSendRequest">Parameters for the &#39;send web-push&#39; action</param>
        /// <returns>Task of AcceptedResponse</returns>
        public async System.Threading.Tasks.Task<AcceptedResponse> ActionSendWebPushAsync (string campaignHash, CampaignWebPushSendRequest campaignWebPushSendRequest)
        {
             ApiResponse<AcceptedResponse> localVarResponse = await ActionSendWebPushAsyncWithHttpInfo(campaignHash, campaignWebPushSendRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Send webpush message Deploys and sends a webpush message
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignHash">ID of the Campaign</param>
        /// <param name="campaignWebPushSendRequest">Parameters for the &#39;send web-push&#39; action</param>
        /// <returns>Task of ApiResponse (AcceptedResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AcceptedResponse>> ActionSendWebPushAsyncWithHttpInfo (string campaignHash, CampaignWebPushSendRequest campaignWebPushSendRequest)
        {
            // verify the required parameter 'campaignHash' is set
            if (campaignHash == null)
                throw new ApiException(400, "Missing required parameter 'campaignHash' when calling WebpushApi->ActionSendWebPush");
            // verify the required parameter 'campaignWebPushSendRequest' is set
            if (campaignWebPushSendRequest == null)
                throw new ApiException(400, "Missing required parameter 'campaignWebPushSendRequest' when calling WebpushApi->ActionSendWebPush");

            var localVarPath = "/campaigns/web-push/{campaign_hash}/actions/send";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (campaignHash != null) localVarPathParams.Add("campaign_hash", this.Configuration.ApiClient.ParameterToString(campaignHash)); // path parameter
            if (campaignWebPushSendRequest != null && campaignWebPushSendRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(campaignWebPushSendRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = campaignWebPushSendRequest; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ActionSendWebPush", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AcceptedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AcceptedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AcceptedResponse)));
        }

        /// <summary>
        /// Create new webpush campaign Create a new webpush campaign
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webPushCampaign">Parameters for the webpush campaign</param>
        /// <returns>CampaignHash</returns>
        public CampaignHash CreateWebPushCampaign (WebPushCampaign webPushCampaign)
        {
             ApiResponse<CampaignHash> localVarResponse = CreateWebPushCampaignWithHttpInfo(webPushCampaign);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create new webpush campaign Create a new webpush campaign
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webPushCampaign">Parameters for the webpush campaign</param>
        /// <returns>ApiResponse of CampaignHash</returns>
        public ApiResponse< CampaignHash > CreateWebPushCampaignWithHttpInfo (WebPushCampaign webPushCampaign)
        {
            // verify the required parameter 'webPushCampaign' is set
            if (webPushCampaign == null)
                throw new ApiException(400, "Missing required parameter 'webPushCampaign' when calling WebpushApi->CreateWebPushCampaign");

            var localVarPath = "/campaigns/web-push";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (webPushCampaign != null && webPushCampaign.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(webPushCampaign); // http body (model) parameter
            }
            else
            {
                localVarPostBody = webPushCampaign; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateWebPushCampaign", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CampaignHash>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CampaignHash) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CampaignHash)));
        }

        /// <summary>
        /// Create new webpush campaign Create a new webpush campaign
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webPushCampaign">Parameters for the webpush campaign</param>
        /// <returns>Task of CampaignHash</returns>
        public async System.Threading.Tasks.Task<CampaignHash> CreateWebPushCampaignAsync (WebPushCampaign webPushCampaign)
        {
             ApiResponse<CampaignHash> localVarResponse = await CreateWebPushCampaignAsyncWithHttpInfo(webPushCampaign);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create new webpush campaign Create a new webpush campaign
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webPushCampaign">Parameters for the webpush campaign</param>
        /// <returns>Task of ApiResponse (CampaignHash)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CampaignHash>> CreateWebPushCampaignAsyncWithHttpInfo (WebPushCampaign webPushCampaign)
        {
            // verify the required parameter 'webPushCampaign' is set
            if (webPushCampaign == null)
                throw new ApiException(400, "Missing required parameter 'webPushCampaign' when calling WebpushApi->CreateWebPushCampaign");

            var localVarPath = "/campaigns/web-push";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (webPushCampaign != null && webPushCampaign.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(webPushCampaign); // http body (model) parameter
            }
            else
            {
                localVarPostBody = webPushCampaign; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateWebPushCampaign", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CampaignHash>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CampaignHash) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CampaignHash)));
        }

        /// <summary>
        /// Create new webpush rss campaign Create a new webpush rss campaign
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webPushRssCampaign">Parameters for the WebPush Campaign</param>
        /// <returns>HashcodeCampaign</returns>
        public HashcodeCampaign CreateWebPushRssCampaign (WebPushRssCampaign webPushRssCampaign)
        {
             ApiResponse<HashcodeCampaign> localVarResponse = CreateWebPushRssCampaignWithHttpInfo(webPushRssCampaign);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create new webpush rss campaign Create a new webpush rss campaign
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webPushRssCampaign">Parameters for the WebPush Campaign</param>
        /// <returns>ApiResponse of HashcodeCampaign</returns>
        public ApiResponse< HashcodeCampaign > CreateWebPushRssCampaignWithHttpInfo (WebPushRssCampaign webPushRssCampaign)
        {
            // verify the required parameter 'webPushRssCampaign' is set
            if (webPushRssCampaign == null)
                throw new ApiException(400, "Missing required parameter 'webPushRssCampaign' when calling WebpushApi->CreateWebPushRssCampaign");

            var localVarPath = "/campaigns/webpush/rss";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (webPushRssCampaign != null && webPushRssCampaign.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(webPushRssCampaign); // http body (model) parameter
            }
            else
            {
                localVarPostBody = webPushRssCampaign; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateWebPushRssCampaign", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<HashcodeCampaign>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (HashcodeCampaign) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(HashcodeCampaign)));
        }

        /// <summary>
        /// Create new webpush rss campaign Create a new webpush rss campaign
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webPushRssCampaign">Parameters for the WebPush Campaign</param>
        /// <returns>Task of HashcodeCampaign</returns>
        public async System.Threading.Tasks.Task<HashcodeCampaign> CreateWebPushRssCampaignAsync (WebPushRssCampaign webPushRssCampaign)
        {
             ApiResponse<HashcodeCampaign> localVarResponse = await CreateWebPushRssCampaignAsyncWithHttpInfo(webPushRssCampaign);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create new webpush rss campaign Create a new webpush rss campaign
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webPushRssCampaign">Parameters for the WebPush Campaign</param>
        /// <returns>Task of ApiResponse (HashcodeCampaign)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<HashcodeCampaign>> CreateWebPushRssCampaignAsyncWithHttpInfo (WebPushRssCampaign webPushRssCampaign)
        {
            // verify the required parameter 'webPushRssCampaign' is set
            if (webPushRssCampaign == null)
                throw new ApiException(400, "Missing required parameter 'webPushRssCampaign' when calling WebpushApi->CreateWebPushRssCampaign");

            var localVarPath = "/campaigns/webpush/rss";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (webPushRssCampaign != null && webPushRssCampaign.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(webPushRssCampaign); // http body (model) parameter
            }
            else
            {
                localVarPostBody = webPushRssCampaign; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateWebPushRssCampaign", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<HashcodeCampaign>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (HashcodeCampaign) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(HashcodeCampaign)));
        }

        /// <summary>
        /// Creates a webpush site Create a new webpush site
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webPushSite">Parameters for the webpush site</param>
        /// <returns>WebPushSite</returns>
        public WebPushSite CreateWebpushSite (WebPushSite webPushSite)
        {
             ApiResponse<WebPushSite> localVarResponse = CreateWebpushSiteWithHttpInfo(webPushSite);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a webpush site Create a new webpush site
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webPushSite">Parameters for the webpush site</param>
        /// <returns>ApiResponse of WebPushSite</returns>
        public ApiResponse< WebPushSite > CreateWebpushSiteWithHttpInfo (WebPushSite webPushSite)
        {
            // verify the required parameter 'webPushSite' is set
            if (webPushSite == null)
                throw new ApiException(400, "Missing required parameter 'webPushSite' when calling WebpushApi->CreateWebpushSite");

            var localVarPath = "/webpush/sites";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (webPushSite != null && webPushSite.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(webPushSite); // http body (model) parameter
            }
            else
            {
                localVarPostBody = webPushSite; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateWebpushSite", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WebPushSite>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WebPushSite) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WebPushSite)));
        }

        /// <summary>
        /// Creates a webpush site Create a new webpush site
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webPushSite">Parameters for the webpush site</param>
        /// <returns>Task of WebPushSite</returns>
        public async System.Threading.Tasks.Task<WebPushSite> CreateWebpushSiteAsync (WebPushSite webPushSite)
        {
             ApiResponse<WebPushSite> localVarResponse = await CreateWebpushSiteAsyncWithHttpInfo(webPushSite);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a webpush site Create a new webpush site
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webPushSite">Parameters for the webpush site</param>
        /// <returns>Task of ApiResponse (WebPushSite)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WebPushSite>> CreateWebpushSiteAsyncWithHttpInfo (WebPushSite webPushSite)
        {
            // verify the required parameter 'webPushSite' is set
            if (webPushSite == null)
                throw new ApiException(400, "Missing required parameter 'webPushSite' when calling WebpushApi->CreateWebpushSite");

            var localVarPath = "/webpush/sites";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (webPushSite != null && webPushSite.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(webPushSite); // http body (model) parameter
            }
            else
            {
                localVarPostBody = webPushSite; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateWebpushSite", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WebPushSite>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WebPushSite) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WebPushSite)));
        }

        /// <summary>
        /// Get all webpush sites Returns all wepush&#39;s sites
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Element offset (starting at zero for the first element) (optional)</param>
        /// <param name="limit">Number of items to return (optional, default to 10)</param>
        /// <param name="order">Type of order (optional, default to desc)</param>
        /// <param name="orderBy">Reference attribute to order sites (optional, default to list_id)</param>
        /// <param name="listId">Select sites referenced to a list (optional)</param>
        /// <returns>TagCollection1</returns>
        public TagCollection1 GetAllWebPushSites (int? offset = null, int? limit = null, string order = null, string orderBy = null, int? listId = null)
        {
             ApiResponse<TagCollection1> localVarResponse = GetAllWebPushSitesWithHttpInfo(offset, limit, order, orderBy, listId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all webpush sites Returns all wepush&#39;s sites
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Element offset (starting at zero for the first element) (optional)</param>
        /// <param name="limit">Number of items to return (optional, default to 10)</param>
        /// <param name="order">Type of order (optional, default to desc)</param>
        /// <param name="orderBy">Reference attribute to order sites (optional, default to list_id)</param>
        /// <param name="listId">Select sites referenced to a list (optional)</param>
        /// <returns>ApiResponse of TagCollection1</returns>
        public ApiResponse< TagCollection1 > GetAllWebPushSitesWithHttpInfo (int? offset = null, int? limit = null, string order = null, string orderBy = null, int? listId = null)
        {

            var localVarPath = "/webpush/sites";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (order != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order", order)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            if (listId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "list_id", listId)); // query parameter

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllWebPushSites", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TagCollection1>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TagCollection1) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TagCollection1)));
        }

        /// <summary>
        /// Get all webpush sites Returns all wepush&#39;s sites
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Element offset (starting at zero for the first element) (optional)</param>
        /// <param name="limit">Number of items to return (optional, default to 10)</param>
        /// <param name="order">Type of order (optional, default to desc)</param>
        /// <param name="orderBy">Reference attribute to order sites (optional, default to list_id)</param>
        /// <param name="listId">Select sites referenced to a list (optional)</param>
        /// <returns>Task of TagCollection1</returns>
        public async System.Threading.Tasks.Task<TagCollection1> GetAllWebPushSitesAsync (int? offset = null, int? limit = null, string order = null, string orderBy = null, int? listId = null)
        {
             ApiResponse<TagCollection1> localVarResponse = await GetAllWebPushSitesAsyncWithHttpInfo(offset, limit, order, orderBy, listId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all webpush sites Returns all wepush&#39;s sites
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Element offset (starting at zero for the first element) (optional)</param>
        /// <param name="limit">Number of items to return (optional, default to 10)</param>
        /// <param name="order">Type of order (optional, default to desc)</param>
        /// <param name="orderBy">Reference attribute to order sites (optional, default to list_id)</param>
        /// <param name="listId">Select sites referenced to a list (optional)</param>
        /// <returns>Task of ApiResponse (TagCollection1)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TagCollection1>> GetAllWebPushSitesAsyncWithHttpInfo (int? offset = null, int? limit = null, string order = null, string orderBy = null, int? listId = null)
        {

            var localVarPath = "/webpush/sites";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (order != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order", order)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            if (listId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "list_id", listId)); // query parameter

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllWebPushSites", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TagCollection1>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TagCollection1) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TagCollection1)));
        }

        /// <summary>
        /// Update a specific webpush campaign Update a webpush campaign
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignHash">ID of the Campaign</param>
        /// <param name="webPushPatchCampaign">Parameters for the Webpush Campaign</param>
        /// <returns>CampaignHash</returns>
        public CampaignHash PatchWebPushCampaign (string campaignHash, WebPushPatchCampaign webPushPatchCampaign)
        {
             ApiResponse<CampaignHash> localVarResponse = PatchWebPushCampaignWithHttpInfo(campaignHash, webPushPatchCampaign);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a specific webpush campaign Update a webpush campaign
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignHash">ID of the Campaign</param>
        /// <param name="webPushPatchCampaign">Parameters for the Webpush Campaign</param>
        /// <returns>ApiResponse of CampaignHash</returns>
        public ApiResponse< CampaignHash > PatchWebPushCampaignWithHttpInfo (string campaignHash, WebPushPatchCampaign webPushPatchCampaign)
        {
            // verify the required parameter 'campaignHash' is set
            if (campaignHash == null)
                throw new ApiException(400, "Missing required parameter 'campaignHash' when calling WebpushApi->PatchWebPushCampaign");
            // verify the required parameter 'webPushPatchCampaign' is set
            if (webPushPatchCampaign == null)
                throw new ApiException(400, "Missing required parameter 'webPushPatchCampaign' when calling WebpushApi->PatchWebPushCampaign");

            var localVarPath = "/campaigns/web-push/{campaign_hash}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (campaignHash != null) localVarPathParams.Add("campaign_hash", this.Configuration.ApiClient.ParameterToString(campaignHash)); // path parameter
            if (webPushPatchCampaign != null && webPushPatchCampaign.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(webPushPatchCampaign); // http body (model) parameter
            }
            else
            {
                localVarPostBody = webPushPatchCampaign; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PatchWebPushCampaign", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CampaignHash>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CampaignHash) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CampaignHash)));
        }

        /// <summary>
        /// Update a specific webpush campaign Update a webpush campaign
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignHash">ID of the Campaign</param>
        /// <param name="webPushPatchCampaign">Parameters for the Webpush Campaign</param>
        /// <returns>Task of CampaignHash</returns>
        public async System.Threading.Tasks.Task<CampaignHash> PatchWebPushCampaignAsync (string campaignHash, WebPushPatchCampaign webPushPatchCampaign)
        {
             ApiResponse<CampaignHash> localVarResponse = await PatchWebPushCampaignAsyncWithHttpInfo(campaignHash, webPushPatchCampaign);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a specific webpush campaign Update a webpush campaign
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignHash">ID of the Campaign</param>
        /// <param name="webPushPatchCampaign">Parameters for the Webpush Campaign</param>
        /// <returns>Task of ApiResponse (CampaignHash)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CampaignHash>> PatchWebPushCampaignAsyncWithHttpInfo (string campaignHash, WebPushPatchCampaign webPushPatchCampaign)
        {
            // verify the required parameter 'campaignHash' is set
            if (campaignHash == null)
                throw new ApiException(400, "Missing required parameter 'campaignHash' when calling WebpushApi->PatchWebPushCampaign");
            // verify the required parameter 'webPushPatchCampaign' is set
            if (webPushPatchCampaign == null)
                throw new ApiException(400, "Missing required parameter 'webPushPatchCampaign' when calling WebpushApi->PatchWebPushCampaign");

            var localVarPath = "/campaigns/web-push/{campaign_hash}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (campaignHash != null) localVarPathParams.Add("campaign_hash", this.Configuration.ApiClient.ParameterToString(campaignHash)); // path parameter
            if (webPushPatchCampaign != null && webPushPatchCampaign.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(webPushPatchCampaign); // http body (model) parameter
            }
            else
            {
                localVarPostBody = webPushPatchCampaign; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PatchWebPushCampaign", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CampaignHash>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CampaignHash) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CampaignHash)));
        }

    }
}
