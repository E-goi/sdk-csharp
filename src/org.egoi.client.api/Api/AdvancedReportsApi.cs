/* 
 * APIv3 (Beta)
 *
 *  # Introduction Just a quick peek!!! This is our new version of API. Remember, it is not stable yet!!! But we invite you play with it and give us your feedback ;) # Getting Started  E-goi can be integrated with many environments and programming languages via our REST API. We've created a developer focused portal to give your organization a clear and quick overview of how to integrate with E-goi. The developer portal focuses on scenarios for integration and flow of events. We recommend familiarizing yourself with all of the content in the developer portal, before start using our rest API.   The E-goi  APIv3 is served over HTTPS. To ensure data privacy, unencrypted HTTP is not supported.  Request data is passed to the API by POSTing JSON objects to the API endpoints with the appropriate parameters.   BaseURL = api.egoiapp.com  # RESTful Services This API supports 5 HTTP methods:  * <b>GET</b>: The HTTP GET method is used to **read** (or retrieve) a representation of a resource. * <b>POST</b>: The POST verb is most-often utilized to **create** new resources. * <b>PATCH</b>: PATCH is used for **modify** capabilities. The PATCH request only needs to contain the changes to the resource, not the complete resource * <b>PUT</b>: PUT is most-often utilized for **update** capabilities, PUT-ing to a known resource URI with the request body containing the newly-updated representation of the original resource. * <b>DELETE</b>: DELETE is pretty easy to understand. It is used to **delete** a resource identified by a URI.  # Authentication   We use a custom authentication method, you will need a apikey that you can find in your account settings. Below you will see a curl example to get your account information:  #!/bin/bash  curl -X GET 'https://api.egoiapp.com/my-account' \\  -H 'accept: application/json' \\  -H 'Apikey: <YOUR_APY_KEY>'  Here you can see a curl Post example with authentication:  #!/bin/bash  curl -X POST 'http://api.egoiapp.com/tags' \\  -H 'accept: application/json' \\  -H 'Apikey: <YOUR_APY_KEY>' \\  -H 'Content-Type: application/json' \\  -d '{`name`:`Your custom tag`,`color`:`#FFFFFF`}'  # SDK Get started quickly with E-goi with our integration tools. Our SDK is a modern open source library that makes it easy to integrate your application with E-goi services.  * <a href='https://github.com/E-goi/sdk-java'>Java</a>  * <a href='https://github.com/E-goi/sdk-php'>PHP</a>  * <a href='https://github.com/E-goi/sdk-python'>Python</a>  * <a href='https://github.com/E-goi/sdk-ruby'>Ruby</a>  * <a href='https://github.com/E-goi/sdk-javascript'>Javascript</a>  * <a href='https://github.com/E-goi/sdk-csharp'>C#</a>  # Stream Limits Stream limits are security mesures we have to make sure our API have a fair use policy, for this reason, any request that creates or modifies data (**POST**, **PATCH** and **PUT**) is limited to a maximum of **20MB** of content length. If you arrive to this limit in one of your request, you'll receive a HTTP code **413 (Request Entity Too Large)** and the request will be ignored. To avoid this error in importation's requests, it's advised the request's division in batches that have each one less than 20MB. <security-definitions/>
 *
 * OpenAPI spec version: 3.0.0-beta
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using org.egoi.client.api.Client;
using org.egoi.client.api.Model;

namespace org.egoi.client.api.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAdvancedReportsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Generate email bounces report
        /// </summary>
        /// <remarks>
        /// Generates a new email bounces report
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="generateEmailBouncesReport">Parameters for the email bounces report</param>
        /// <returns>AcceptedResponse</returns>
        AcceptedResponse GenerateEmailBouncesReport (GenerateEmailBouncesReport generateEmailBouncesReport);

        /// <summary>
        /// Generate email bounces report
        /// </summary>
        /// <remarks>
        /// Generates a new email bounces report
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="generateEmailBouncesReport">Parameters for the email bounces report</param>
        /// <returns>ApiResponse of AcceptedResponse</returns>
        ApiResponse<AcceptedResponse> GenerateEmailBouncesReportWithHttpInfo (GenerateEmailBouncesReport generateEmailBouncesReport);
        /// <summary>
        /// Generate email clicks by contact report
        /// </summary>
        /// <remarks>
        /// Generates a new email clicks by contact report
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="generateEmailClicksByContactReport">Parameters for the email clicks by contact report</param>
        /// <returns>AcceptedResponse</returns>
        AcceptedResponse GenerateEmailClicksByContactReport (GenerateEmailClicksByContactReport generateEmailClicksByContactReport);

        /// <summary>
        /// Generate email clicks by contact report
        /// </summary>
        /// <remarks>
        /// Generates a new email clicks by contact report
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="generateEmailClicksByContactReport">Parameters for the email clicks by contact report</param>
        /// <returns>ApiResponse of AcceptedResponse</returns>
        ApiResponse<AcceptedResponse> GenerateEmailClicksByContactReportWithHttpInfo (GenerateEmailClicksByContactReport generateEmailClicksByContactReport);
        /// <summary>
        /// Generate email clicks by URL report
        /// </summary>
        /// <remarks>
        /// Generates a new email clicks by URL report
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="generateEmailClicksByUrlReport">Parameters for the email clicks by URL report</param>
        /// <returns>AcceptedResponse</returns>
        AcceptedResponse GenerateEmailClicksByUrlReport (GenerateEmailClicksByUrlReport generateEmailClicksByUrlReport);

        /// <summary>
        /// Generate email clicks by URL report
        /// </summary>
        /// <remarks>
        /// Generates a new email clicks by URL report
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="generateEmailClicksByUrlReport">Parameters for the email clicks by URL report</param>
        /// <returns>ApiResponse of AcceptedResponse</returns>
        ApiResponse<AcceptedResponse> GenerateEmailClicksByUrlReportWithHttpInfo (GenerateEmailClicksByUrlReport generateEmailClicksByUrlReport);
        /// <summary>
        /// Generate email events report
        /// </summary>
        /// <remarks>
        /// Generates a new email events report
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="generateEmailEventsReport">Parameters for the email events report</param>
        /// <returns>AcceptedResponse</returns>
        AcceptedResponse GenerateEmailEventsReport (GenerateEmailEventsReport generateEmailEventsReport);

        /// <summary>
        /// Generate email events report
        /// </summary>
        /// <remarks>
        /// Generates a new email events report
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="generateEmailEventsReport">Parameters for the email events report</param>
        /// <returns>ApiResponse of AcceptedResponse</returns>
        ApiResponse<AcceptedResponse> GenerateEmailEventsReportWithHttpInfo (GenerateEmailEventsReport generateEmailEventsReport);
        /// <summary>
        /// Generate SMS bounces report
        /// </summary>
        /// <remarks>
        /// Generates a new SMS bounces report
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="generateSmsBouncesReport">Parameters for the SMS bounces report</param>
        /// <returns>AcceptedResponse</returns>
        AcceptedResponse GenerateEmailSmsReport (GenerateSmsBouncesReport generateSmsBouncesReport);

        /// <summary>
        /// Generate SMS bounces report
        /// </summary>
        /// <remarks>
        /// Generates a new SMS bounces report
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="generateSmsBouncesReport">Parameters for the SMS bounces report</param>
        /// <returns>ApiResponse of AcceptedResponse</returns>
        ApiResponse<AcceptedResponse> GenerateEmailSmsReportWithHttpInfo (GenerateSmsBouncesReport generateSmsBouncesReport);
        /// <summary>
        /// Generate email unsubscriptions report
        /// </summary>
        /// <remarks>
        /// Generates a new email unsubscriptions report
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="generateEmailUnsubscriptionsReport">Parameters for the email unsubscriptions report</param>
        /// <returns>AcceptedResponse</returns>
        AcceptedResponse GenerateEmailUnsubscriptionsReport (GenerateEmailUnsubscriptionsReport generateEmailUnsubscriptionsReport);

        /// <summary>
        /// Generate email unsubscriptions report
        /// </summary>
        /// <remarks>
        /// Generates a new email unsubscriptions report
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="generateEmailUnsubscriptionsReport">Parameters for the email unsubscriptions report</param>
        /// <returns>ApiResponse of AcceptedResponse</returns>
        ApiResponse<AcceptedResponse> GenerateEmailUnsubscriptionsReportWithHttpInfo (GenerateEmailUnsubscriptionsReport generateEmailUnsubscriptionsReport);
        /// <summary>
        /// Generate form answers report
        /// </summary>
        /// <remarks>
        /// Generates a new form answers report
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="generateFormAnswersReport">Parameters for the form answers report</param>
        /// <returns>AcceptedResponse</returns>
        AcceptedResponse GenerateFormAnswersReport (GenerateFormAnswersReport generateFormAnswersReport);

        /// <summary>
        /// Generate form answers report
        /// </summary>
        /// <remarks>
        /// Generates a new form answers report
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="generateFormAnswersReport">Parameters for the form answers report</param>
        /// <returns>ApiResponse of AcceptedResponse</returns>
        ApiResponse<AcceptedResponse> GenerateFormAnswersReportWithHttpInfo (GenerateFormAnswersReport generateFormAnswersReport);
        /// <summary>
        /// Generate sends report
        /// </summary>
        /// <remarks>
        /// Generates a new sends report
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="generateSendsReport">Parameters for the sends report</param>
        /// <returns>AcceptedResponse</returns>
        AcceptedResponse GenerateSendsReport (GenerateSendsReport generateSendsReport);

        /// <summary>
        /// Generate sends report
        /// </summary>
        /// <remarks>
        /// Generates a new sends report
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="generateSendsReport">Parameters for the sends report</param>
        /// <returns>ApiResponse of AcceptedResponse</returns>
        ApiResponse<AcceptedResponse> GenerateSendsReportWithHttpInfo (GenerateSendsReport generateSendsReport);
        /// <summary>
        /// Generate SMS events report
        /// </summary>
        /// <remarks>
        /// Generates a new SMS events report
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="generateSmsEventsReport">Parameters for the SMS events report</param>
        /// <returns>AcceptedResponse</returns>
        AcceptedResponse GenerateSmsEventsReport (GenerateSmsEventsReport generateSmsEventsReport);

        /// <summary>
        /// Generate SMS events report
        /// </summary>
        /// <remarks>
        /// Generates a new SMS events report
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="generateSmsEventsReport">Parameters for the SMS events report</param>
        /// <returns>ApiResponse of AcceptedResponse</returns>
        ApiResponse<AcceptedResponse> GenerateSmsEventsReportWithHttpInfo (GenerateSmsEventsReport generateSmsEventsReport);
        /// <summary>
        /// Generate subscriptions report
        /// </summary>
        /// <remarks>
        /// Generates a new subscriptions report
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="generateSubscriptionsReport">Parameters for the subscriptions report</param>
        /// <returns>AcceptedResponse</returns>
        AcceptedResponse GenerateSubscriptionsReport (GenerateSubscriptionsReport generateSubscriptionsReport);

        /// <summary>
        /// Generate subscriptions report
        /// </summary>
        /// <remarks>
        /// Generates a new subscriptions report
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="generateSubscriptionsReport">Parameters for the subscriptions report</param>
        /// <returns>ApiResponse of AcceptedResponse</returns>
        ApiResponse<AcceptedResponse> GenerateSubscriptionsReportWithHttpInfo (GenerateSubscriptionsReport generateSubscriptionsReport);
        /// <summary>
        /// Generate unsubscriptions report
        /// </summary>
        /// <remarks>
        /// Generates a new unsubscriptions report
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="generateUnsubscriptionsReport">Parameters for the unsubscriptions report</param>
        /// <returns>AcceptedResponse</returns>
        AcceptedResponse GenerateUnsubscriptionsReport (GenerateUnsubscriptionsReport generateUnsubscriptionsReport);

        /// <summary>
        /// Generate unsubscriptions report
        /// </summary>
        /// <remarks>
        /// Generates a new unsubscriptions report
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="generateUnsubscriptionsReport">Parameters for the unsubscriptions report</param>
        /// <returns>ApiResponse of AcceptedResponse</returns>
        ApiResponse<AcceptedResponse> GenerateUnsubscriptionsReportWithHttpInfo (GenerateUnsubscriptionsReport generateUnsubscriptionsReport);
        /// <summary>
        /// Get all advanced reports
        /// </summary>
        /// <remarks>
        /// Returns all advanced reports
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Advanced report status (optional)</param>
        /// <param name="title">Advanced report title (optional)</param>
        /// <param name="createdMin">Created initial date (optional)</param>
        /// <param name="createdMax">Created finish (optional)</param>
        /// <param name="offset">Element offset (starting at zero for the first element) (optional)</param>
        /// <param name="limit">Number of items to return (optional, default to 10)</param>
        /// <param name="order">Type of order (optional, default to desc)</param>
        /// <param name="orderBy">Reference attribute to order the advanced reports (optional, default to advanced_report_id)</param>
        /// <returns>AdvancedReportsCollection</returns>
        AdvancedReportsCollection GetAllAdvancedReports (string status = null, string title = null, DateTime? createdMin = null, DateTime? createdMax = null, int? offset = null, int? limit = null, string order = null, string orderBy = null);

        /// <summary>
        /// Get all advanced reports
        /// </summary>
        /// <remarks>
        /// Returns all advanced reports
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Advanced report status (optional)</param>
        /// <param name="title">Advanced report title (optional)</param>
        /// <param name="createdMin">Created initial date (optional)</param>
        /// <param name="createdMax">Created finish (optional)</param>
        /// <param name="offset">Element offset (starting at zero for the first element) (optional)</param>
        /// <param name="limit">Number of items to return (optional, default to 10)</param>
        /// <param name="order">Type of order (optional, default to desc)</param>
        /// <param name="orderBy">Reference attribute to order the advanced reports (optional, default to advanced_report_id)</param>
        /// <returns>ApiResponse of AdvancedReportsCollection</returns>
        ApiResponse<AdvancedReportsCollection> GetAllAdvancedReportsWithHttpInfo (string status = null, string title = null, DateTime? createdMin = null, DateTime? createdMax = null, int? offset = null, int? limit = null, string order = null, string orderBy = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Generate email bounces report
        /// </summary>
        /// <remarks>
        /// Generates a new email bounces report
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="generateEmailBouncesReport">Parameters for the email bounces report</param>
        /// <returns>Task of AcceptedResponse</returns>
        System.Threading.Tasks.Task<AcceptedResponse> GenerateEmailBouncesReportAsync (GenerateEmailBouncesReport generateEmailBouncesReport);

        /// <summary>
        /// Generate email bounces report
        /// </summary>
        /// <remarks>
        /// Generates a new email bounces report
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="generateEmailBouncesReport">Parameters for the email bounces report</param>
        /// <returns>Task of ApiResponse (AcceptedResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AcceptedResponse>> GenerateEmailBouncesReportAsyncWithHttpInfo (GenerateEmailBouncesReport generateEmailBouncesReport);
        /// <summary>
        /// Generate email clicks by contact report
        /// </summary>
        /// <remarks>
        /// Generates a new email clicks by contact report
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="generateEmailClicksByContactReport">Parameters for the email clicks by contact report</param>
        /// <returns>Task of AcceptedResponse</returns>
        System.Threading.Tasks.Task<AcceptedResponse> GenerateEmailClicksByContactReportAsync (GenerateEmailClicksByContactReport generateEmailClicksByContactReport);

        /// <summary>
        /// Generate email clicks by contact report
        /// </summary>
        /// <remarks>
        /// Generates a new email clicks by contact report
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="generateEmailClicksByContactReport">Parameters for the email clicks by contact report</param>
        /// <returns>Task of ApiResponse (AcceptedResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AcceptedResponse>> GenerateEmailClicksByContactReportAsyncWithHttpInfo (GenerateEmailClicksByContactReport generateEmailClicksByContactReport);
        /// <summary>
        /// Generate email clicks by URL report
        /// </summary>
        /// <remarks>
        /// Generates a new email clicks by URL report
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="generateEmailClicksByUrlReport">Parameters for the email clicks by URL report</param>
        /// <returns>Task of AcceptedResponse</returns>
        System.Threading.Tasks.Task<AcceptedResponse> GenerateEmailClicksByUrlReportAsync (GenerateEmailClicksByUrlReport generateEmailClicksByUrlReport);

        /// <summary>
        /// Generate email clicks by URL report
        /// </summary>
        /// <remarks>
        /// Generates a new email clicks by URL report
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="generateEmailClicksByUrlReport">Parameters for the email clicks by URL report</param>
        /// <returns>Task of ApiResponse (AcceptedResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AcceptedResponse>> GenerateEmailClicksByUrlReportAsyncWithHttpInfo (GenerateEmailClicksByUrlReport generateEmailClicksByUrlReport);
        /// <summary>
        /// Generate email events report
        /// </summary>
        /// <remarks>
        /// Generates a new email events report
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="generateEmailEventsReport">Parameters for the email events report</param>
        /// <returns>Task of AcceptedResponse</returns>
        System.Threading.Tasks.Task<AcceptedResponse> GenerateEmailEventsReportAsync (GenerateEmailEventsReport generateEmailEventsReport);

        /// <summary>
        /// Generate email events report
        /// </summary>
        /// <remarks>
        /// Generates a new email events report
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="generateEmailEventsReport">Parameters for the email events report</param>
        /// <returns>Task of ApiResponse (AcceptedResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AcceptedResponse>> GenerateEmailEventsReportAsyncWithHttpInfo (GenerateEmailEventsReport generateEmailEventsReport);
        /// <summary>
        /// Generate SMS bounces report
        /// </summary>
        /// <remarks>
        /// Generates a new SMS bounces report
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="generateSmsBouncesReport">Parameters for the SMS bounces report</param>
        /// <returns>Task of AcceptedResponse</returns>
        System.Threading.Tasks.Task<AcceptedResponse> GenerateEmailSmsReportAsync (GenerateSmsBouncesReport generateSmsBouncesReport);

        /// <summary>
        /// Generate SMS bounces report
        /// </summary>
        /// <remarks>
        /// Generates a new SMS bounces report
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="generateSmsBouncesReport">Parameters for the SMS bounces report</param>
        /// <returns>Task of ApiResponse (AcceptedResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AcceptedResponse>> GenerateEmailSmsReportAsyncWithHttpInfo (GenerateSmsBouncesReport generateSmsBouncesReport);
        /// <summary>
        /// Generate email unsubscriptions report
        /// </summary>
        /// <remarks>
        /// Generates a new email unsubscriptions report
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="generateEmailUnsubscriptionsReport">Parameters for the email unsubscriptions report</param>
        /// <returns>Task of AcceptedResponse</returns>
        System.Threading.Tasks.Task<AcceptedResponse> GenerateEmailUnsubscriptionsReportAsync (GenerateEmailUnsubscriptionsReport generateEmailUnsubscriptionsReport);

        /// <summary>
        /// Generate email unsubscriptions report
        /// </summary>
        /// <remarks>
        /// Generates a new email unsubscriptions report
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="generateEmailUnsubscriptionsReport">Parameters for the email unsubscriptions report</param>
        /// <returns>Task of ApiResponse (AcceptedResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AcceptedResponse>> GenerateEmailUnsubscriptionsReportAsyncWithHttpInfo (GenerateEmailUnsubscriptionsReport generateEmailUnsubscriptionsReport);
        /// <summary>
        /// Generate form answers report
        /// </summary>
        /// <remarks>
        /// Generates a new form answers report
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="generateFormAnswersReport">Parameters for the form answers report</param>
        /// <returns>Task of AcceptedResponse</returns>
        System.Threading.Tasks.Task<AcceptedResponse> GenerateFormAnswersReportAsync (GenerateFormAnswersReport generateFormAnswersReport);

        /// <summary>
        /// Generate form answers report
        /// </summary>
        /// <remarks>
        /// Generates a new form answers report
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="generateFormAnswersReport">Parameters for the form answers report</param>
        /// <returns>Task of ApiResponse (AcceptedResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AcceptedResponse>> GenerateFormAnswersReportAsyncWithHttpInfo (GenerateFormAnswersReport generateFormAnswersReport);
        /// <summary>
        /// Generate sends report
        /// </summary>
        /// <remarks>
        /// Generates a new sends report
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="generateSendsReport">Parameters for the sends report</param>
        /// <returns>Task of AcceptedResponse</returns>
        System.Threading.Tasks.Task<AcceptedResponse> GenerateSendsReportAsync (GenerateSendsReport generateSendsReport);

        /// <summary>
        /// Generate sends report
        /// </summary>
        /// <remarks>
        /// Generates a new sends report
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="generateSendsReport">Parameters for the sends report</param>
        /// <returns>Task of ApiResponse (AcceptedResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AcceptedResponse>> GenerateSendsReportAsyncWithHttpInfo (GenerateSendsReport generateSendsReport);
        /// <summary>
        /// Generate SMS events report
        /// </summary>
        /// <remarks>
        /// Generates a new SMS events report
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="generateSmsEventsReport">Parameters for the SMS events report</param>
        /// <returns>Task of AcceptedResponse</returns>
        System.Threading.Tasks.Task<AcceptedResponse> GenerateSmsEventsReportAsync (GenerateSmsEventsReport generateSmsEventsReport);

        /// <summary>
        /// Generate SMS events report
        /// </summary>
        /// <remarks>
        /// Generates a new SMS events report
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="generateSmsEventsReport">Parameters for the SMS events report</param>
        /// <returns>Task of ApiResponse (AcceptedResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AcceptedResponse>> GenerateSmsEventsReportAsyncWithHttpInfo (GenerateSmsEventsReport generateSmsEventsReport);
        /// <summary>
        /// Generate subscriptions report
        /// </summary>
        /// <remarks>
        /// Generates a new subscriptions report
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="generateSubscriptionsReport">Parameters for the subscriptions report</param>
        /// <returns>Task of AcceptedResponse</returns>
        System.Threading.Tasks.Task<AcceptedResponse> GenerateSubscriptionsReportAsync (GenerateSubscriptionsReport generateSubscriptionsReport);

        /// <summary>
        /// Generate subscriptions report
        /// </summary>
        /// <remarks>
        /// Generates a new subscriptions report
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="generateSubscriptionsReport">Parameters for the subscriptions report</param>
        /// <returns>Task of ApiResponse (AcceptedResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AcceptedResponse>> GenerateSubscriptionsReportAsyncWithHttpInfo (GenerateSubscriptionsReport generateSubscriptionsReport);
        /// <summary>
        /// Generate unsubscriptions report
        /// </summary>
        /// <remarks>
        /// Generates a new unsubscriptions report
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="generateUnsubscriptionsReport">Parameters for the unsubscriptions report</param>
        /// <returns>Task of AcceptedResponse</returns>
        System.Threading.Tasks.Task<AcceptedResponse> GenerateUnsubscriptionsReportAsync (GenerateUnsubscriptionsReport generateUnsubscriptionsReport);

        /// <summary>
        /// Generate unsubscriptions report
        /// </summary>
        /// <remarks>
        /// Generates a new unsubscriptions report
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="generateUnsubscriptionsReport">Parameters for the unsubscriptions report</param>
        /// <returns>Task of ApiResponse (AcceptedResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AcceptedResponse>> GenerateUnsubscriptionsReportAsyncWithHttpInfo (GenerateUnsubscriptionsReport generateUnsubscriptionsReport);
        /// <summary>
        /// Get all advanced reports
        /// </summary>
        /// <remarks>
        /// Returns all advanced reports
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Advanced report status (optional)</param>
        /// <param name="title">Advanced report title (optional)</param>
        /// <param name="createdMin">Created initial date (optional)</param>
        /// <param name="createdMax">Created finish (optional)</param>
        /// <param name="offset">Element offset (starting at zero for the first element) (optional)</param>
        /// <param name="limit">Number of items to return (optional, default to 10)</param>
        /// <param name="order">Type of order (optional, default to desc)</param>
        /// <param name="orderBy">Reference attribute to order the advanced reports (optional, default to advanced_report_id)</param>
        /// <returns>Task of AdvancedReportsCollection</returns>
        System.Threading.Tasks.Task<AdvancedReportsCollection> GetAllAdvancedReportsAsync (string status = null, string title = null, DateTime? createdMin = null, DateTime? createdMax = null, int? offset = null, int? limit = null, string order = null, string orderBy = null);

        /// <summary>
        /// Get all advanced reports
        /// </summary>
        /// <remarks>
        /// Returns all advanced reports
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Advanced report status (optional)</param>
        /// <param name="title">Advanced report title (optional)</param>
        /// <param name="createdMin">Created initial date (optional)</param>
        /// <param name="createdMax">Created finish (optional)</param>
        /// <param name="offset">Element offset (starting at zero for the first element) (optional)</param>
        /// <param name="limit">Number of items to return (optional, default to 10)</param>
        /// <param name="order">Type of order (optional, default to desc)</param>
        /// <param name="orderBy">Reference attribute to order the advanced reports (optional, default to advanced_report_id)</param>
        /// <returns>Task of ApiResponse (AdvancedReportsCollection)</returns>
        System.Threading.Tasks.Task<ApiResponse<AdvancedReportsCollection>> GetAllAdvancedReportsAsyncWithHttpInfo (string status = null, string title = null, DateTime? createdMin = null, DateTime? createdMax = null, int? offset = null, int? limit = null, string order = null, string orderBy = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AdvancedReportsApi : IAdvancedReportsApi
    {
        private org.egoi.client.api.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AdvancedReportsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AdvancedReportsApi(String basePath)
        {
            this.Configuration = new org.egoi.client.api.Client.Configuration { BasePath = basePath };

            ExceptionFactory = org.egoi.client.api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AdvancedReportsApi"/> class
        /// </summary>
        /// <returns></returns>
        public AdvancedReportsApi()
        {
            this.Configuration = org.egoi.client.api.Client.Configuration.Default;

            ExceptionFactory = org.egoi.client.api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AdvancedReportsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AdvancedReportsApi(org.egoi.client.api.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = org.egoi.client.api.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = org.egoi.client.api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public org.egoi.client.api.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public org.egoi.client.api.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Generate email bounces report Generates a new email bounces report
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="generateEmailBouncesReport">Parameters for the email bounces report</param>
        /// <returns>AcceptedResponse</returns>
        public AcceptedResponse GenerateEmailBouncesReport (GenerateEmailBouncesReport generateEmailBouncesReport)
        {
             ApiResponse<AcceptedResponse> localVarResponse = GenerateEmailBouncesReportWithHttpInfo(generateEmailBouncesReport);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Generate email bounces report Generates a new email bounces report
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="generateEmailBouncesReport">Parameters for the email bounces report</param>
        /// <returns>ApiResponse of AcceptedResponse</returns>
        public ApiResponse< AcceptedResponse > GenerateEmailBouncesReportWithHttpInfo (GenerateEmailBouncesReport generateEmailBouncesReport)
        {
            // verify the required parameter 'generateEmailBouncesReport' is set
            if (generateEmailBouncesReport == null)
                throw new ApiException(400, "Missing required parameter 'generateEmailBouncesReport' when calling AdvancedReportsApi->GenerateEmailBouncesReport");

            var localVarPath = "/reports/advanced/email-bounces";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (generateEmailBouncesReport != null && generateEmailBouncesReport.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(generateEmailBouncesReport); // http body (model) parameter
            }
            else
            {
                localVarPostBody = generateEmailBouncesReport; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GenerateEmailBouncesReport", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AcceptedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AcceptedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AcceptedResponse)));
        }

        /// <summary>
        /// Generate email bounces report Generates a new email bounces report
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="generateEmailBouncesReport">Parameters for the email bounces report</param>
        /// <returns>Task of AcceptedResponse</returns>
        public async System.Threading.Tasks.Task<AcceptedResponse> GenerateEmailBouncesReportAsync (GenerateEmailBouncesReport generateEmailBouncesReport)
        {
             ApiResponse<AcceptedResponse> localVarResponse = await GenerateEmailBouncesReportAsyncWithHttpInfo(generateEmailBouncesReport);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Generate email bounces report Generates a new email bounces report
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="generateEmailBouncesReport">Parameters for the email bounces report</param>
        /// <returns>Task of ApiResponse (AcceptedResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AcceptedResponse>> GenerateEmailBouncesReportAsyncWithHttpInfo (GenerateEmailBouncesReport generateEmailBouncesReport)
        {
            // verify the required parameter 'generateEmailBouncesReport' is set
            if (generateEmailBouncesReport == null)
                throw new ApiException(400, "Missing required parameter 'generateEmailBouncesReport' when calling AdvancedReportsApi->GenerateEmailBouncesReport");

            var localVarPath = "/reports/advanced/email-bounces";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (generateEmailBouncesReport != null && generateEmailBouncesReport.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(generateEmailBouncesReport); // http body (model) parameter
            }
            else
            {
                localVarPostBody = generateEmailBouncesReport; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GenerateEmailBouncesReport", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AcceptedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AcceptedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AcceptedResponse)));
        }

        /// <summary>
        /// Generate email clicks by contact report Generates a new email clicks by contact report
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="generateEmailClicksByContactReport">Parameters for the email clicks by contact report</param>
        /// <returns>AcceptedResponse</returns>
        public AcceptedResponse GenerateEmailClicksByContactReport (GenerateEmailClicksByContactReport generateEmailClicksByContactReport)
        {
             ApiResponse<AcceptedResponse> localVarResponse = GenerateEmailClicksByContactReportWithHttpInfo(generateEmailClicksByContactReport);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Generate email clicks by contact report Generates a new email clicks by contact report
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="generateEmailClicksByContactReport">Parameters for the email clicks by contact report</param>
        /// <returns>ApiResponse of AcceptedResponse</returns>
        public ApiResponse< AcceptedResponse > GenerateEmailClicksByContactReportWithHttpInfo (GenerateEmailClicksByContactReport generateEmailClicksByContactReport)
        {
            // verify the required parameter 'generateEmailClicksByContactReport' is set
            if (generateEmailClicksByContactReport == null)
                throw new ApiException(400, "Missing required parameter 'generateEmailClicksByContactReport' when calling AdvancedReportsApi->GenerateEmailClicksByContactReport");

            var localVarPath = "/reports/advanced/email-clicks-by-contact";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (generateEmailClicksByContactReport != null && generateEmailClicksByContactReport.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(generateEmailClicksByContactReport); // http body (model) parameter
            }
            else
            {
                localVarPostBody = generateEmailClicksByContactReport; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GenerateEmailClicksByContactReport", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AcceptedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AcceptedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AcceptedResponse)));
        }

        /// <summary>
        /// Generate email clicks by contact report Generates a new email clicks by contact report
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="generateEmailClicksByContactReport">Parameters for the email clicks by contact report</param>
        /// <returns>Task of AcceptedResponse</returns>
        public async System.Threading.Tasks.Task<AcceptedResponse> GenerateEmailClicksByContactReportAsync (GenerateEmailClicksByContactReport generateEmailClicksByContactReport)
        {
             ApiResponse<AcceptedResponse> localVarResponse = await GenerateEmailClicksByContactReportAsyncWithHttpInfo(generateEmailClicksByContactReport);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Generate email clicks by contact report Generates a new email clicks by contact report
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="generateEmailClicksByContactReport">Parameters for the email clicks by contact report</param>
        /// <returns>Task of ApiResponse (AcceptedResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AcceptedResponse>> GenerateEmailClicksByContactReportAsyncWithHttpInfo (GenerateEmailClicksByContactReport generateEmailClicksByContactReport)
        {
            // verify the required parameter 'generateEmailClicksByContactReport' is set
            if (generateEmailClicksByContactReport == null)
                throw new ApiException(400, "Missing required parameter 'generateEmailClicksByContactReport' when calling AdvancedReportsApi->GenerateEmailClicksByContactReport");

            var localVarPath = "/reports/advanced/email-clicks-by-contact";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (generateEmailClicksByContactReport != null && generateEmailClicksByContactReport.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(generateEmailClicksByContactReport); // http body (model) parameter
            }
            else
            {
                localVarPostBody = generateEmailClicksByContactReport; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GenerateEmailClicksByContactReport", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AcceptedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AcceptedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AcceptedResponse)));
        }

        /// <summary>
        /// Generate email clicks by URL report Generates a new email clicks by URL report
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="generateEmailClicksByUrlReport">Parameters for the email clicks by URL report</param>
        /// <returns>AcceptedResponse</returns>
        public AcceptedResponse GenerateEmailClicksByUrlReport (GenerateEmailClicksByUrlReport generateEmailClicksByUrlReport)
        {
             ApiResponse<AcceptedResponse> localVarResponse = GenerateEmailClicksByUrlReportWithHttpInfo(generateEmailClicksByUrlReport);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Generate email clicks by URL report Generates a new email clicks by URL report
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="generateEmailClicksByUrlReport">Parameters for the email clicks by URL report</param>
        /// <returns>ApiResponse of AcceptedResponse</returns>
        public ApiResponse< AcceptedResponse > GenerateEmailClicksByUrlReportWithHttpInfo (GenerateEmailClicksByUrlReport generateEmailClicksByUrlReport)
        {
            // verify the required parameter 'generateEmailClicksByUrlReport' is set
            if (generateEmailClicksByUrlReport == null)
                throw new ApiException(400, "Missing required parameter 'generateEmailClicksByUrlReport' when calling AdvancedReportsApi->GenerateEmailClicksByUrlReport");

            var localVarPath = "/reports/advanced/email-clicks-by-url";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (generateEmailClicksByUrlReport != null && generateEmailClicksByUrlReport.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(generateEmailClicksByUrlReport); // http body (model) parameter
            }
            else
            {
                localVarPostBody = generateEmailClicksByUrlReport; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GenerateEmailClicksByUrlReport", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AcceptedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AcceptedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AcceptedResponse)));
        }

        /// <summary>
        /// Generate email clicks by URL report Generates a new email clicks by URL report
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="generateEmailClicksByUrlReport">Parameters for the email clicks by URL report</param>
        /// <returns>Task of AcceptedResponse</returns>
        public async System.Threading.Tasks.Task<AcceptedResponse> GenerateEmailClicksByUrlReportAsync (GenerateEmailClicksByUrlReport generateEmailClicksByUrlReport)
        {
             ApiResponse<AcceptedResponse> localVarResponse = await GenerateEmailClicksByUrlReportAsyncWithHttpInfo(generateEmailClicksByUrlReport);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Generate email clicks by URL report Generates a new email clicks by URL report
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="generateEmailClicksByUrlReport">Parameters for the email clicks by URL report</param>
        /// <returns>Task of ApiResponse (AcceptedResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AcceptedResponse>> GenerateEmailClicksByUrlReportAsyncWithHttpInfo (GenerateEmailClicksByUrlReport generateEmailClicksByUrlReport)
        {
            // verify the required parameter 'generateEmailClicksByUrlReport' is set
            if (generateEmailClicksByUrlReport == null)
                throw new ApiException(400, "Missing required parameter 'generateEmailClicksByUrlReport' when calling AdvancedReportsApi->GenerateEmailClicksByUrlReport");

            var localVarPath = "/reports/advanced/email-clicks-by-url";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (generateEmailClicksByUrlReport != null && generateEmailClicksByUrlReport.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(generateEmailClicksByUrlReport); // http body (model) parameter
            }
            else
            {
                localVarPostBody = generateEmailClicksByUrlReport; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GenerateEmailClicksByUrlReport", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AcceptedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AcceptedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AcceptedResponse)));
        }

        /// <summary>
        /// Generate email events report Generates a new email events report
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="generateEmailEventsReport">Parameters for the email events report</param>
        /// <returns>AcceptedResponse</returns>
        public AcceptedResponse GenerateEmailEventsReport (GenerateEmailEventsReport generateEmailEventsReport)
        {
             ApiResponse<AcceptedResponse> localVarResponse = GenerateEmailEventsReportWithHttpInfo(generateEmailEventsReport);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Generate email events report Generates a new email events report
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="generateEmailEventsReport">Parameters for the email events report</param>
        /// <returns>ApiResponse of AcceptedResponse</returns>
        public ApiResponse< AcceptedResponse > GenerateEmailEventsReportWithHttpInfo (GenerateEmailEventsReport generateEmailEventsReport)
        {
            // verify the required parameter 'generateEmailEventsReport' is set
            if (generateEmailEventsReport == null)
                throw new ApiException(400, "Missing required parameter 'generateEmailEventsReport' when calling AdvancedReportsApi->GenerateEmailEventsReport");

            var localVarPath = "/reports/advanced/email-events";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (generateEmailEventsReport != null && generateEmailEventsReport.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(generateEmailEventsReport); // http body (model) parameter
            }
            else
            {
                localVarPostBody = generateEmailEventsReport; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GenerateEmailEventsReport", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AcceptedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AcceptedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AcceptedResponse)));
        }

        /// <summary>
        /// Generate email events report Generates a new email events report
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="generateEmailEventsReport">Parameters for the email events report</param>
        /// <returns>Task of AcceptedResponse</returns>
        public async System.Threading.Tasks.Task<AcceptedResponse> GenerateEmailEventsReportAsync (GenerateEmailEventsReport generateEmailEventsReport)
        {
             ApiResponse<AcceptedResponse> localVarResponse = await GenerateEmailEventsReportAsyncWithHttpInfo(generateEmailEventsReport);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Generate email events report Generates a new email events report
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="generateEmailEventsReport">Parameters for the email events report</param>
        /// <returns>Task of ApiResponse (AcceptedResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AcceptedResponse>> GenerateEmailEventsReportAsyncWithHttpInfo (GenerateEmailEventsReport generateEmailEventsReport)
        {
            // verify the required parameter 'generateEmailEventsReport' is set
            if (generateEmailEventsReport == null)
                throw new ApiException(400, "Missing required parameter 'generateEmailEventsReport' when calling AdvancedReportsApi->GenerateEmailEventsReport");

            var localVarPath = "/reports/advanced/email-events";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (generateEmailEventsReport != null && generateEmailEventsReport.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(generateEmailEventsReport); // http body (model) parameter
            }
            else
            {
                localVarPostBody = generateEmailEventsReport; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GenerateEmailEventsReport", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AcceptedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AcceptedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AcceptedResponse)));
        }

        /// <summary>
        /// Generate SMS bounces report Generates a new SMS bounces report
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="generateSmsBouncesReport">Parameters for the SMS bounces report</param>
        /// <returns>AcceptedResponse</returns>
        public AcceptedResponse GenerateEmailSmsReport (GenerateSmsBouncesReport generateSmsBouncesReport)
        {
             ApiResponse<AcceptedResponse> localVarResponse = GenerateEmailSmsReportWithHttpInfo(generateSmsBouncesReport);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Generate SMS bounces report Generates a new SMS bounces report
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="generateSmsBouncesReport">Parameters for the SMS bounces report</param>
        /// <returns>ApiResponse of AcceptedResponse</returns>
        public ApiResponse< AcceptedResponse > GenerateEmailSmsReportWithHttpInfo (GenerateSmsBouncesReport generateSmsBouncesReport)
        {
            // verify the required parameter 'generateSmsBouncesReport' is set
            if (generateSmsBouncesReport == null)
                throw new ApiException(400, "Missing required parameter 'generateSmsBouncesReport' when calling AdvancedReportsApi->GenerateEmailSmsReport");

            var localVarPath = "/reports/advanced/sms-bounces";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (generateSmsBouncesReport != null && generateSmsBouncesReport.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(generateSmsBouncesReport); // http body (model) parameter
            }
            else
            {
                localVarPostBody = generateSmsBouncesReport; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GenerateEmailSmsReport", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AcceptedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AcceptedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AcceptedResponse)));
        }

        /// <summary>
        /// Generate SMS bounces report Generates a new SMS bounces report
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="generateSmsBouncesReport">Parameters for the SMS bounces report</param>
        /// <returns>Task of AcceptedResponse</returns>
        public async System.Threading.Tasks.Task<AcceptedResponse> GenerateEmailSmsReportAsync (GenerateSmsBouncesReport generateSmsBouncesReport)
        {
             ApiResponse<AcceptedResponse> localVarResponse = await GenerateEmailSmsReportAsyncWithHttpInfo(generateSmsBouncesReport);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Generate SMS bounces report Generates a new SMS bounces report
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="generateSmsBouncesReport">Parameters for the SMS bounces report</param>
        /// <returns>Task of ApiResponse (AcceptedResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AcceptedResponse>> GenerateEmailSmsReportAsyncWithHttpInfo (GenerateSmsBouncesReport generateSmsBouncesReport)
        {
            // verify the required parameter 'generateSmsBouncesReport' is set
            if (generateSmsBouncesReport == null)
                throw new ApiException(400, "Missing required parameter 'generateSmsBouncesReport' when calling AdvancedReportsApi->GenerateEmailSmsReport");

            var localVarPath = "/reports/advanced/sms-bounces";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (generateSmsBouncesReport != null && generateSmsBouncesReport.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(generateSmsBouncesReport); // http body (model) parameter
            }
            else
            {
                localVarPostBody = generateSmsBouncesReport; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GenerateEmailSmsReport", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AcceptedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AcceptedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AcceptedResponse)));
        }

        /// <summary>
        /// Generate email unsubscriptions report Generates a new email unsubscriptions report
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="generateEmailUnsubscriptionsReport">Parameters for the email unsubscriptions report</param>
        /// <returns>AcceptedResponse</returns>
        public AcceptedResponse GenerateEmailUnsubscriptionsReport (GenerateEmailUnsubscriptionsReport generateEmailUnsubscriptionsReport)
        {
             ApiResponse<AcceptedResponse> localVarResponse = GenerateEmailUnsubscriptionsReportWithHttpInfo(generateEmailUnsubscriptionsReport);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Generate email unsubscriptions report Generates a new email unsubscriptions report
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="generateEmailUnsubscriptionsReport">Parameters for the email unsubscriptions report</param>
        /// <returns>ApiResponse of AcceptedResponse</returns>
        public ApiResponse< AcceptedResponse > GenerateEmailUnsubscriptionsReportWithHttpInfo (GenerateEmailUnsubscriptionsReport generateEmailUnsubscriptionsReport)
        {
            // verify the required parameter 'generateEmailUnsubscriptionsReport' is set
            if (generateEmailUnsubscriptionsReport == null)
                throw new ApiException(400, "Missing required parameter 'generateEmailUnsubscriptionsReport' when calling AdvancedReportsApi->GenerateEmailUnsubscriptionsReport");

            var localVarPath = "/reports/advanced/email-unsubscriptions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (generateEmailUnsubscriptionsReport != null && generateEmailUnsubscriptionsReport.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(generateEmailUnsubscriptionsReport); // http body (model) parameter
            }
            else
            {
                localVarPostBody = generateEmailUnsubscriptionsReport; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GenerateEmailUnsubscriptionsReport", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AcceptedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AcceptedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AcceptedResponse)));
        }

        /// <summary>
        /// Generate email unsubscriptions report Generates a new email unsubscriptions report
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="generateEmailUnsubscriptionsReport">Parameters for the email unsubscriptions report</param>
        /// <returns>Task of AcceptedResponse</returns>
        public async System.Threading.Tasks.Task<AcceptedResponse> GenerateEmailUnsubscriptionsReportAsync (GenerateEmailUnsubscriptionsReport generateEmailUnsubscriptionsReport)
        {
             ApiResponse<AcceptedResponse> localVarResponse = await GenerateEmailUnsubscriptionsReportAsyncWithHttpInfo(generateEmailUnsubscriptionsReport);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Generate email unsubscriptions report Generates a new email unsubscriptions report
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="generateEmailUnsubscriptionsReport">Parameters for the email unsubscriptions report</param>
        /// <returns>Task of ApiResponse (AcceptedResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AcceptedResponse>> GenerateEmailUnsubscriptionsReportAsyncWithHttpInfo (GenerateEmailUnsubscriptionsReport generateEmailUnsubscriptionsReport)
        {
            // verify the required parameter 'generateEmailUnsubscriptionsReport' is set
            if (generateEmailUnsubscriptionsReport == null)
                throw new ApiException(400, "Missing required parameter 'generateEmailUnsubscriptionsReport' when calling AdvancedReportsApi->GenerateEmailUnsubscriptionsReport");

            var localVarPath = "/reports/advanced/email-unsubscriptions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (generateEmailUnsubscriptionsReport != null && generateEmailUnsubscriptionsReport.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(generateEmailUnsubscriptionsReport); // http body (model) parameter
            }
            else
            {
                localVarPostBody = generateEmailUnsubscriptionsReport; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GenerateEmailUnsubscriptionsReport", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AcceptedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AcceptedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AcceptedResponse)));
        }

        /// <summary>
        /// Generate form answers report Generates a new form answers report
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="generateFormAnswersReport">Parameters for the form answers report</param>
        /// <returns>AcceptedResponse</returns>
        public AcceptedResponse GenerateFormAnswersReport (GenerateFormAnswersReport generateFormAnswersReport)
        {
             ApiResponse<AcceptedResponse> localVarResponse = GenerateFormAnswersReportWithHttpInfo(generateFormAnswersReport);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Generate form answers report Generates a new form answers report
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="generateFormAnswersReport">Parameters for the form answers report</param>
        /// <returns>ApiResponse of AcceptedResponse</returns>
        public ApiResponse< AcceptedResponse > GenerateFormAnswersReportWithHttpInfo (GenerateFormAnswersReport generateFormAnswersReport)
        {
            // verify the required parameter 'generateFormAnswersReport' is set
            if (generateFormAnswersReport == null)
                throw new ApiException(400, "Missing required parameter 'generateFormAnswersReport' when calling AdvancedReportsApi->GenerateFormAnswersReport");

            var localVarPath = "/reports/advanced/form-answers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (generateFormAnswersReport != null && generateFormAnswersReport.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(generateFormAnswersReport); // http body (model) parameter
            }
            else
            {
                localVarPostBody = generateFormAnswersReport; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GenerateFormAnswersReport", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AcceptedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AcceptedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AcceptedResponse)));
        }

        /// <summary>
        /// Generate form answers report Generates a new form answers report
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="generateFormAnswersReport">Parameters for the form answers report</param>
        /// <returns>Task of AcceptedResponse</returns>
        public async System.Threading.Tasks.Task<AcceptedResponse> GenerateFormAnswersReportAsync (GenerateFormAnswersReport generateFormAnswersReport)
        {
             ApiResponse<AcceptedResponse> localVarResponse = await GenerateFormAnswersReportAsyncWithHttpInfo(generateFormAnswersReport);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Generate form answers report Generates a new form answers report
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="generateFormAnswersReport">Parameters for the form answers report</param>
        /// <returns>Task of ApiResponse (AcceptedResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AcceptedResponse>> GenerateFormAnswersReportAsyncWithHttpInfo (GenerateFormAnswersReport generateFormAnswersReport)
        {
            // verify the required parameter 'generateFormAnswersReport' is set
            if (generateFormAnswersReport == null)
                throw new ApiException(400, "Missing required parameter 'generateFormAnswersReport' when calling AdvancedReportsApi->GenerateFormAnswersReport");

            var localVarPath = "/reports/advanced/form-answers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (generateFormAnswersReport != null && generateFormAnswersReport.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(generateFormAnswersReport); // http body (model) parameter
            }
            else
            {
                localVarPostBody = generateFormAnswersReport; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GenerateFormAnswersReport", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AcceptedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AcceptedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AcceptedResponse)));
        }

        /// <summary>
        /// Generate sends report Generates a new sends report
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="generateSendsReport">Parameters for the sends report</param>
        /// <returns>AcceptedResponse</returns>
        public AcceptedResponse GenerateSendsReport (GenerateSendsReport generateSendsReport)
        {
             ApiResponse<AcceptedResponse> localVarResponse = GenerateSendsReportWithHttpInfo(generateSendsReport);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Generate sends report Generates a new sends report
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="generateSendsReport">Parameters for the sends report</param>
        /// <returns>ApiResponse of AcceptedResponse</returns>
        public ApiResponse< AcceptedResponse > GenerateSendsReportWithHttpInfo (GenerateSendsReport generateSendsReport)
        {
            // verify the required parameter 'generateSendsReport' is set
            if (generateSendsReport == null)
                throw new ApiException(400, "Missing required parameter 'generateSendsReport' when calling AdvancedReportsApi->GenerateSendsReport");

            var localVarPath = "/reports/advanced/sends";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (generateSendsReport != null && generateSendsReport.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(generateSendsReport); // http body (model) parameter
            }
            else
            {
                localVarPostBody = generateSendsReport; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GenerateSendsReport", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AcceptedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AcceptedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AcceptedResponse)));
        }

        /// <summary>
        /// Generate sends report Generates a new sends report
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="generateSendsReport">Parameters for the sends report</param>
        /// <returns>Task of AcceptedResponse</returns>
        public async System.Threading.Tasks.Task<AcceptedResponse> GenerateSendsReportAsync (GenerateSendsReport generateSendsReport)
        {
             ApiResponse<AcceptedResponse> localVarResponse = await GenerateSendsReportAsyncWithHttpInfo(generateSendsReport);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Generate sends report Generates a new sends report
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="generateSendsReport">Parameters for the sends report</param>
        /// <returns>Task of ApiResponse (AcceptedResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AcceptedResponse>> GenerateSendsReportAsyncWithHttpInfo (GenerateSendsReport generateSendsReport)
        {
            // verify the required parameter 'generateSendsReport' is set
            if (generateSendsReport == null)
                throw new ApiException(400, "Missing required parameter 'generateSendsReport' when calling AdvancedReportsApi->GenerateSendsReport");

            var localVarPath = "/reports/advanced/sends";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (generateSendsReport != null && generateSendsReport.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(generateSendsReport); // http body (model) parameter
            }
            else
            {
                localVarPostBody = generateSendsReport; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GenerateSendsReport", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AcceptedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AcceptedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AcceptedResponse)));
        }

        /// <summary>
        /// Generate SMS events report Generates a new SMS events report
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="generateSmsEventsReport">Parameters for the SMS events report</param>
        /// <returns>AcceptedResponse</returns>
        public AcceptedResponse GenerateSmsEventsReport (GenerateSmsEventsReport generateSmsEventsReport)
        {
             ApiResponse<AcceptedResponse> localVarResponse = GenerateSmsEventsReportWithHttpInfo(generateSmsEventsReport);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Generate SMS events report Generates a new SMS events report
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="generateSmsEventsReport">Parameters for the SMS events report</param>
        /// <returns>ApiResponse of AcceptedResponse</returns>
        public ApiResponse< AcceptedResponse > GenerateSmsEventsReportWithHttpInfo (GenerateSmsEventsReport generateSmsEventsReport)
        {
            // verify the required parameter 'generateSmsEventsReport' is set
            if (generateSmsEventsReport == null)
                throw new ApiException(400, "Missing required parameter 'generateSmsEventsReport' when calling AdvancedReportsApi->GenerateSmsEventsReport");

            var localVarPath = "/reports/advanced/sms-events";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (generateSmsEventsReport != null && generateSmsEventsReport.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(generateSmsEventsReport); // http body (model) parameter
            }
            else
            {
                localVarPostBody = generateSmsEventsReport; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GenerateSmsEventsReport", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AcceptedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AcceptedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AcceptedResponse)));
        }

        /// <summary>
        /// Generate SMS events report Generates a new SMS events report
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="generateSmsEventsReport">Parameters for the SMS events report</param>
        /// <returns>Task of AcceptedResponse</returns>
        public async System.Threading.Tasks.Task<AcceptedResponse> GenerateSmsEventsReportAsync (GenerateSmsEventsReport generateSmsEventsReport)
        {
             ApiResponse<AcceptedResponse> localVarResponse = await GenerateSmsEventsReportAsyncWithHttpInfo(generateSmsEventsReport);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Generate SMS events report Generates a new SMS events report
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="generateSmsEventsReport">Parameters for the SMS events report</param>
        /// <returns>Task of ApiResponse (AcceptedResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AcceptedResponse>> GenerateSmsEventsReportAsyncWithHttpInfo (GenerateSmsEventsReport generateSmsEventsReport)
        {
            // verify the required parameter 'generateSmsEventsReport' is set
            if (generateSmsEventsReport == null)
                throw new ApiException(400, "Missing required parameter 'generateSmsEventsReport' when calling AdvancedReportsApi->GenerateSmsEventsReport");

            var localVarPath = "/reports/advanced/sms-events";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (generateSmsEventsReport != null && generateSmsEventsReport.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(generateSmsEventsReport); // http body (model) parameter
            }
            else
            {
                localVarPostBody = generateSmsEventsReport; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GenerateSmsEventsReport", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AcceptedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AcceptedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AcceptedResponse)));
        }

        /// <summary>
        /// Generate subscriptions report Generates a new subscriptions report
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="generateSubscriptionsReport">Parameters for the subscriptions report</param>
        /// <returns>AcceptedResponse</returns>
        public AcceptedResponse GenerateSubscriptionsReport (GenerateSubscriptionsReport generateSubscriptionsReport)
        {
             ApiResponse<AcceptedResponse> localVarResponse = GenerateSubscriptionsReportWithHttpInfo(generateSubscriptionsReport);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Generate subscriptions report Generates a new subscriptions report
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="generateSubscriptionsReport">Parameters for the subscriptions report</param>
        /// <returns>ApiResponse of AcceptedResponse</returns>
        public ApiResponse< AcceptedResponse > GenerateSubscriptionsReportWithHttpInfo (GenerateSubscriptionsReport generateSubscriptionsReport)
        {
            // verify the required parameter 'generateSubscriptionsReport' is set
            if (generateSubscriptionsReport == null)
                throw new ApiException(400, "Missing required parameter 'generateSubscriptionsReport' when calling AdvancedReportsApi->GenerateSubscriptionsReport");

            var localVarPath = "/reports/advanced/subscriptions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (generateSubscriptionsReport != null && generateSubscriptionsReport.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(generateSubscriptionsReport); // http body (model) parameter
            }
            else
            {
                localVarPostBody = generateSubscriptionsReport; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GenerateSubscriptionsReport", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AcceptedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AcceptedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AcceptedResponse)));
        }

        /// <summary>
        /// Generate subscriptions report Generates a new subscriptions report
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="generateSubscriptionsReport">Parameters for the subscriptions report</param>
        /// <returns>Task of AcceptedResponse</returns>
        public async System.Threading.Tasks.Task<AcceptedResponse> GenerateSubscriptionsReportAsync (GenerateSubscriptionsReport generateSubscriptionsReport)
        {
             ApiResponse<AcceptedResponse> localVarResponse = await GenerateSubscriptionsReportAsyncWithHttpInfo(generateSubscriptionsReport);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Generate subscriptions report Generates a new subscriptions report
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="generateSubscriptionsReport">Parameters for the subscriptions report</param>
        /// <returns>Task of ApiResponse (AcceptedResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AcceptedResponse>> GenerateSubscriptionsReportAsyncWithHttpInfo (GenerateSubscriptionsReport generateSubscriptionsReport)
        {
            // verify the required parameter 'generateSubscriptionsReport' is set
            if (generateSubscriptionsReport == null)
                throw new ApiException(400, "Missing required parameter 'generateSubscriptionsReport' when calling AdvancedReportsApi->GenerateSubscriptionsReport");

            var localVarPath = "/reports/advanced/subscriptions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (generateSubscriptionsReport != null && generateSubscriptionsReport.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(generateSubscriptionsReport); // http body (model) parameter
            }
            else
            {
                localVarPostBody = generateSubscriptionsReport; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GenerateSubscriptionsReport", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AcceptedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AcceptedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AcceptedResponse)));
        }

        /// <summary>
        /// Generate unsubscriptions report Generates a new unsubscriptions report
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="generateUnsubscriptionsReport">Parameters for the unsubscriptions report</param>
        /// <returns>AcceptedResponse</returns>
        public AcceptedResponse GenerateUnsubscriptionsReport (GenerateUnsubscriptionsReport generateUnsubscriptionsReport)
        {
             ApiResponse<AcceptedResponse> localVarResponse = GenerateUnsubscriptionsReportWithHttpInfo(generateUnsubscriptionsReport);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Generate unsubscriptions report Generates a new unsubscriptions report
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="generateUnsubscriptionsReport">Parameters for the unsubscriptions report</param>
        /// <returns>ApiResponse of AcceptedResponse</returns>
        public ApiResponse< AcceptedResponse > GenerateUnsubscriptionsReportWithHttpInfo (GenerateUnsubscriptionsReport generateUnsubscriptionsReport)
        {
            // verify the required parameter 'generateUnsubscriptionsReport' is set
            if (generateUnsubscriptionsReport == null)
                throw new ApiException(400, "Missing required parameter 'generateUnsubscriptionsReport' when calling AdvancedReportsApi->GenerateUnsubscriptionsReport");

            var localVarPath = "/reports/advanced/unsubscriptions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (generateUnsubscriptionsReport != null && generateUnsubscriptionsReport.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(generateUnsubscriptionsReport); // http body (model) parameter
            }
            else
            {
                localVarPostBody = generateUnsubscriptionsReport; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GenerateUnsubscriptionsReport", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AcceptedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AcceptedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AcceptedResponse)));
        }

        /// <summary>
        /// Generate unsubscriptions report Generates a new unsubscriptions report
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="generateUnsubscriptionsReport">Parameters for the unsubscriptions report</param>
        /// <returns>Task of AcceptedResponse</returns>
        public async System.Threading.Tasks.Task<AcceptedResponse> GenerateUnsubscriptionsReportAsync (GenerateUnsubscriptionsReport generateUnsubscriptionsReport)
        {
             ApiResponse<AcceptedResponse> localVarResponse = await GenerateUnsubscriptionsReportAsyncWithHttpInfo(generateUnsubscriptionsReport);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Generate unsubscriptions report Generates a new unsubscriptions report
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="generateUnsubscriptionsReport">Parameters for the unsubscriptions report</param>
        /// <returns>Task of ApiResponse (AcceptedResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AcceptedResponse>> GenerateUnsubscriptionsReportAsyncWithHttpInfo (GenerateUnsubscriptionsReport generateUnsubscriptionsReport)
        {
            // verify the required parameter 'generateUnsubscriptionsReport' is set
            if (generateUnsubscriptionsReport == null)
                throw new ApiException(400, "Missing required parameter 'generateUnsubscriptionsReport' when calling AdvancedReportsApi->GenerateUnsubscriptionsReport");

            var localVarPath = "/reports/advanced/unsubscriptions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (generateUnsubscriptionsReport != null && generateUnsubscriptionsReport.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(generateUnsubscriptionsReport); // http body (model) parameter
            }
            else
            {
                localVarPostBody = generateUnsubscriptionsReport; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GenerateUnsubscriptionsReport", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AcceptedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AcceptedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AcceptedResponse)));
        }

        /// <summary>
        /// Get all advanced reports Returns all advanced reports
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Advanced report status (optional)</param>
        /// <param name="title">Advanced report title (optional)</param>
        /// <param name="createdMin">Created initial date (optional)</param>
        /// <param name="createdMax">Created finish (optional)</param>
        /// <param name="offset">Element offset (starting at zero for the first element) (optional)</param>
        /// <param name="limit">Number of items to return (optional, default to 10)</param>
        /// <param name="order">Type of order (optional, default to desc)</param>
        /// <param name="orderBy">Reference attribute to order the advanced reports (optional, default to advanced_report_id)</param>
        /// <returns>AdvancedReportsCollection</returns>
        public AdvancedReportsCollection GetAllAdvancedReports (string status = null, string title = null, DateTime? createdMin = null, DateTime? createdMax = null, int? offset = null, int? limit = null, string order = null, string orderBy = null)
        {
             ApiResponse<AdvancedReportsCollection> localVarResponse = GetAllAdvancedReportsWithHttpInfo(status, title, createdMin, createdMax, offset, limit, order, orderBy);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all advanced reports Returns all advanced reports
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Advanced report status (optional)</param>
        /// <param name="title">Advanced report title (optional)</param>
        /// <param name="createdMin">Created initial date (optional)</param>
        /// <param name="createdMax">Created finish (optional)</param>
        /// <param name="offset">Element offset (starting at zero for the first element) (optional)</param>
        /// <param name="limit">Number of items to return (optional, default to 10)</param>
        /// <param name="order">Type of order (optional, default to desc)</param>
        /// <param name="orderBy">Reference attribute to order the advanced reports (optional, default to advanced_report_id)</param>
        /// <returns>ApiResponse of AdvancedReportsCollection</returns>
        public ApiResponse< AdvancedReportsCollection > GetAllAdvancedReportsWithHttpInfo (string status = null, string title = null, DateTime? createdMin = null, DateTime? createdMax = null, int? offset = null, int? limit = null, string order = null, string orderBy = null)
        {

            var localVarPath = "/reports/advanced";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (status != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "status", status)); // query parameter
            if (title != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "title", title)); // query parameter
            if (createdMin != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "created_min", createdMin)); // query parameter
            if (createdMax != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "created_max", createdMax)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (order != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order", order)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllAdvancedReports", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AdvancedReportsCollection>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AdvancedReportsCollection) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AdvancedReportsCollection)));
        }

        /// <summary>
        /// Get all advanced reports Returns all advanced reports
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Advanced report status (optional)</param>
        /// <param name="title">Advanced report title (optional)</param>
        /// <param name="createdMin">Created initial date (optional)</param>
        /// <param name="createdMax">Created finish (optional)</param>
        /// <param name="offset">Element offset (starting at zero for the first element) (optional)</param>
        /// <param name="limit">Number of items to return (optional, default to 10)</param>
        /// <param name="order">Type of order (optional, default to desc)</param>
        /// <param name="orderBy">Reference attribute to order the advanced reports (optional, default to advanced_report_id)</param>
        /// <returns>Task of AdvancedReportsCollection</returns>
        public async System.Threading.Tasks.Task<AdvancedReportsCollection> GetAllAdvancedReportsAsync (string status = null, string title = null, DateTime? createdMin = null, DateTime? createdMax = null, int? offset = null, int? limit = null, string order = null, string orderBy = null)
        {
             ApiResponse<AdvancedReportsCollection> localVarResponse = await GetAllAdvancedReportsAsyncWithHttpInfo(status, title, createdMin, createdMax, offset, limit, order, orderBy);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all advanced reports Returns all advanced reports
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Advanced report status (optional)</param>
        /// <param name="title">Advanced report title (optional)</param>
        /// <param name="createdMin">Created initial date (optional)</param>
        /// <param name="createdMax">Created finish (optional)</param>
        /// <param name="offset">Element offset (starting at zero for the first element) (optional)</param>
        /// <param name="limit">Number of items to return (optional, default to 10)</param>
        /// <param name="order">Type of order (optional, default to desc)</param>
        /// <param name="orderBy">Reference attribute to order the advanced reports (optional, default to advanced_report_id)</param>
        /// <returns>Task of ApiResponse (AdvancedReportsCollection)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AdvancedReportsCollection>> GetAllAdvancedReportsAsyncWithHttpInfo (string status = null, string title = null, DateTime? createdMin = null, DateTime? createdMax = null, int? offset = null, int? limit = null, string order = null, string orderBy = null)
        {

            var localVarPath = "/reports/advanced";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (status != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "status", status)); // query parameter
            if (title != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "title", title)); // query parameter
            if (createdMin != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "created_min", createdMin)); // query parameter
            if (createdMax != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "created_max", createdMax)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (order != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order", order)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllAdvancedReports", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AdvancedReportsCollection>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AdvancedReportsCollection) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AdvancedReportsCollection)));
        }

    }
}
