/* 
 * APIv3 (Beta)
 *
 *  # Introduction Just a quick peek!!! This is our new version of API. Remember, it is not stable yet!!! But we invite you play with it and give us your feedback ;) # Getting Started  E-goi can be integrated with many environments and programming languages via our REST API. We've created a developer focused portal to give your organization a clear and quick overview of how to integrate with E-goi. The developer portal focuses on scenarios for integration and flow of events. We recommend familiarizing yourself with all of the content in the developer portal, before start using our rest API.   The E-goi  APIv3 is served over HTTPS. To ensure data privacy, unencrypted HTTP is not supported.  Request data is passed to the API by POSTing JSON objects to the API endpoints with the appropriate parameters.   BaseURL = api.egoiapp.com  # RESTful Services This API supports 5 HTTP methods:  * <b>GET</b>: The HTTP GET method is used to **read** (or retrieve) a representation of a resource. * <b>POST</b>: The POST verb is most-often utilized to **create** new resources. * <b>PATCH</b>: PATCH is used for **modify** capabilities. The PATCH request only needs to contain the changes to the resource, not the complete resource * <b>PUT</b>: PUT is most-often utilized for **update** capabilities, PUT-ing to a known resource URI with the request body containing the newly-updated representation of the original resource. * <b>DELETE</b>: DELETE is pretty easy to understand. It is used to **delete** a resource identified by a URI.  # Authentication   We use a custom authentication method, you will need a apikey that you can find in your account settings. Below you will see a curl example to get your account information:  #!/bin/bash  curl -X GET 'https://api.egoiapp.com/my-account' \\  -H 'accept: application/json' \\  -H 'Apikey: <YOUR_APY_KEY>'  Here you can see a curl Post example with authentication:  #!/bin/bash  curl -X POST 'http://api.egoiapp.com/tags' \\  -H 'accept: application/json' \\  -H 'Apikey: <YOUR_APY_KEY>' \\  -H 'Content-Type: application/json' \\  -d '{`name`:`Your custom tag`,`color`:`#FFFFFF`}'  # SDK Get started quickly with E-goi with our integration tools. Our SDK is a modern open source library that makes it easy to integrate your application with E-goi services. * <b><a href='https://github.com/E-goi/sdk-java'>Java</a></b> * <b><a href='https://github.com/E-goi/sdk-php'>PHP</a></b> * <b><a href='https://github.com/E-goi/sdk-python'>Python</a></b>  <security-definitions/>
 *
 * OpenAPI spec version: 3.0.0-beta
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using org.egoi.client.api.Client;
using org.egoi.client.api.Model;

namespace org.egoi.client.api.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISmartSmsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Send smart sms message
        /// </summary>
        /// <remarks>
        /// Deploys and sends a smart sms message
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignHash">ID of the Campaign</param>
        /// <param name="campaignSmsSendRequest">Parameters for the &#39;send sms&#39; action</param>
        /// <returns>AcceptedResponse</returns>
        AcceptedResponse ActionSendSmartSms (string campaignHash, CampaignSmsSendRequest campaignSmsSendRequest);

        /// <summary>
        /// Send smart sms message
        /// </summary>
        /// <remarks>
        /// Deploys and sends a smart sms message
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignHash">ID of the Campaign</param>
        /// <param name="campaignSmsSendRequest">Parameters for the &#39;send sms&#39; action</param>
        /// <returns>ApiResponse of AcceptedResponse</returns>
        ApiResponse<AcceptedResponse> ActionSendSmartSmsWithHttpInfo (string campaignHash, CampaignSmsSendRequest campaignSmsSendRequest);
        /// <summary>
        /// Create new smart sms campaign
        /// </summary>
        /// <remarks>
        /// Creates a new smart sms campaign.                         **DISCLAIMER:** A URL will be added at the end of your SMS
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="smartSmsCampaign">Parameters for the Smart Sms Campaign</param>
        /// <returns>HashcodeCampaign</returns>
        HashcodeCampaign CreateSmartSmsCampaign (SmartSmsCampaign smartSmsCampaign);

        /// <summary>
        /// Create new smart sms campaign
        /// </summary>
        /// <remarks>
        /// Creates a new smart sms campaign.                         **DISCLAIMER:** A URL will be added at the end of your SMS
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="smartSmsCampaign">Parameters for the Smart Sms Campaign</param>
        /// <returns>ApiResponse of HashcodeCampaign</returns>
        ApiResponse<HashcodeCampaign> CreateSmartSmsCampaignWithHttpInfo (SmartSmsCampaign smartSmsCampaign);
        /// <summary>
        /// Update a specific smart sms campaign
        /// </summary>
        /// <remarks>
        /// Update smart sms campaign
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignHash">ID of the Campaign</param>
        /// <param name="smartSmsCampaignPatchRequest">Parameters for the Smart Sms Campaign</param>
        /// <returns>HashcodeCampaign</returns>
        HashcodeCampaign PatchSmartSmsCampaign (string campaignHash, SmartSmsCampaignPatchRequest smartSmsCampaignPatchRequest);

        /// <summary>
        /// Update a specific smart sms campaign
        /// </summary>
        /// <remarks>
        /// Update smart sms campaign
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignHash">ID of the Campaign</param>
        /// <param name="smartSmsCampaignPatchRequest">Parameters for the Smart Sms Campaign</param>
        /// <returns>ApiResponse of HashcodeCampaign</returns>
        ApiResponse<HashcodeCampaign> PatchSmartSmsCampaignWithHttpInfo (string campaignHash, SmartSmsCampaignPatchRequest smartSmsCampaignPatchRequest);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Send smart sms message
        /// </summary>
        /// <remarks>
        /// Deploys and sends a smart sms message
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignHash">ID of the Campaign</param>
        /// <param name="campaignSmsSendRequest">Parameters for the &#39;send sms&#39; action</param>
        /// <returns>Task of AcceptedResponse</returns>
        System.Threading.Tasks.Task<AcceptedResponse> ActionSendSmartSmsAsync (string campaignHash, CampaignSmsSendRequest campaignSmsSendRequest);

        /// <summary>
        /// Send smart sms message
        /// </summary>
        /// <remarks>
        /// Deploys and sends a smart sms message
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignHash">ID of the Campaign</param>
        /// <param name="campaignSmsSendRequest">Parameters for the &#39;send sms&#39; action</param>
        /// <returns>Task of ApiResponse (AcceptedResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AcceptedResponse>> ActionSendSmartSmsAsyncWithHttpInfo (string campaignHash, CampaignSmsSendRequest campaignSmsSendRequest);
        /// <summary>
        /// Create new smart sms campaign
        /// </summary>
        /// <remarks>
        /// Creates a new smart sms campaign.                         **DISCLAIMER:** A URL will be added at the end of your SMS
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="smartSmsCampaign">Parameters for the Smart Sms Campaign</param>
        /// <returns>Task of HashcodeCampaign</returns>
        System.Threading.Tasks.Task<HashcodeCampaign> CreateSmartSmsCampaignAsync (SmartSmsCampaign smartSmsCampaign);

        /// <summary>
        /// Create new smart sms campaign
        /// </summary>
        /// <remarks>
        /// Creates a new smart sms campaign.                         **DISCLAIMER:** A URL will be added at the end of your SMS
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="smartSmsCampaign">Parameters for the Smart Sms Campaign</param>
        /// <returns>Task of ApiResponse (HashcodeCampaign)</returns>
        System.Threading.Tasks.Task<ApiResponse<HashcodeCampaign>> CreateSmartSmsCampaignAsyncWithHttpInfo (SmartSmsCampaign smartSmsCampaign);
        /// <summary>
        /// Update a specific smart sms campaign
        /// </summary>
        /// <remarks>
        /// Update smart sms campaign
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignHash">ID of the Campaign</param>
        /// <param name="smartSmsCampaignPatchRequest">Parameters for the Smart Sms Campaign</param>
        /// <returns>Task of HashcodeCampaign</returns>
        System.Threading.Tasks.Task<HashcodeCampaign> PatchSmartSmsCampaignAsync (string campaignHash, SmartSmsCampaignPatchRequest smartSmsCampaignPatchRequest);

        /// <summary>
        /// Update a specific smart sms campaign
        /// </summary>
        /// <remarks>
        /// Update smart sms campaign
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignHash">ID of the Campaign</param>
        /// <param name="smartSmsCampaignPatchRequest">Parameters for the Smart Sms Campaign</param>
        /// <returns>Task of ApiResponse (HashcodeCampaign)</returns>
        System.Threading.Tasks.Task<ApiResponse<HashcodeCampaign>> PatchSmartSmsCampaignAsyncWithHttpInfo (string campaignHash, SmartSmsCampaignPatchRequest smartSmsCampaignPatchRequest);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SmartSmsApi : ISmartSmsApi
    {
        private org.egoi.client.api.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SmartSmsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SmartSmsApi(String basePath)
        {
            this.Configuration = new org.egoi.client.api.Client.Configuration { BasePath = basePath };

            ExceptionFactory = org.egoi.client.api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SmartSmsApi"/> class
        /// </summary>
        /// <returns></returns>
        public SmartSmsApi()
        {
            this.Configuration = org.egoi.client.api.Client.Configuration.Default;

            ExceptionFactory = org.egoi.client.api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SmartSmsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SmartSmsApi(org.egoi.client.api.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = org.egoi.client.api.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = org.egoi.client.api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public org.egoi.client.api.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public org.egoi.client.api.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Send smart sms message Deploys and sends a smart sms message
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignHash">ID of the Campaign</param>
        /// <param name="campaignSmsSendRequest">Parameters for the &#39;send sms&#39; action</param>
        /// <returns>AcceptedResponse</returns>
        public AcceptedResponse ActionSendSmartSms (string campaignHash, CampaignSmsSendRequest campaignSmsSendRequest)
        {
             ApiResponse<AcceptedResponse> localVarResponse = ActionSendSmartSmsWithHttpInfo(campaignHash, campaignSmsSendRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Send smart sms message Deploys and sends a smart sms message
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignHash">ID of the Campaign</param>
        /// <param name="campaignSmsSendRequest">Parameters for the &#39;send sms&#39; action</param>
        /// <returns>ApiResponse of AcceptedResponse</returns>
        public ApiResponse< AcceptedResponse > ActionSendSmartSmsWithHttpInfo (string campaignHash, CampaignSmsSendRequest campaignSmsSendRequest)
        {
            // verify the required parameter 'campaignHash' is set
            if (campaignHash == null)
                throw new ApiException(400, "Missing required parameter 'campaignHash' when calling SmartSmsApi->ActionSendSmartSms");
            // verify the required parameter 'campaignSmsSendRequest' is set
            if (campaignSmsSendRequest == null)
                throw new ApiException(400, "Missing required parameter 'campaignSmsSendRequest' when calling SmartSmsApi->ActionSendSmartSms");

            var localVarPath = "/campaigns/smart-sms/{campaign_hash}/actions/send";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (campaignHash != null) localVarPathParams.Add("campaign_hash", this.Configuration.ApiClient.ParameterToString(campaignHash)); // path parameter
            if (campaignSmsSendRequest != null && campaignSmsSendRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(campaignSmsSendRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = campaignSmsSendRequest; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ActionSendSmartSms", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AcceptedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AcceptedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AcceptedResponse)));
        }

        /// <summary>
        /// Send smart sms message Deploys and sends a smart sms message
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignHash">ID of the Campaign</param>
        /// <param name="campaignSmsSendRequest">Parameters for the &#39;send sms&#39; action</param>
        /// <returns>Task of AcceptedResponse</returns>
        public async System.Threading.Tasks.Task<AcceptedResponse> ActionSendSmartSmsAsync (string campaignHash, CampaignSmsSendRequest campaignSmsSendRequest)
        {
             ApiResponse<AcceptedResponse> localVarResponse = await ActionSendSmartSmsAsyncWithHttpInfo(campaignHash, campaignSmsSendRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Send smart sms message Deploys and sends a smart sms message
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignHash">ID of the Campaign</param>
        /// <param name="campaignSmsSendRequest">Parameters for the &#39;send sms&#39; action</param>
        /// <returns>Task of ApiResponse (AcceptedResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AcceptedResponse>> ActionSendSmartSmsAsyncWithHttpInfo (string campaignHash, CampaignSmsSendRequest campaignSmsSendRequest)
        {
            // verify the required parameter 'campaignHash' is set
            if (campaignHash == null)
                throw new ApiException(400, "Missing required parameter 'campaignHash' when calling SmartSmsApi->ActionSendSmartSms");
            // verify the required parameter 'campaignSmsSendRequest' is set
            if (campaignSmsSendRequest == null)
                throw new ApiException(400, "Missing required parameter 'campaignSmsSendRequest' when calling SmartSmsApi->ActionSendSmartSms");

            var localVarPath = "/campaigns/smart-sms/{campaign_hash}/actions/send";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (campaignHash != null) localVarPathParams.Add("campaign_hash", this.Configuration.ApiClient.ParameterToString(campaignHash)); // path parameter
            if (campaignSmsSendRequest != null && campaignSmsSendRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(campaignSmsSendRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = campaignSmsSendRequest; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ActionSendSmartSms", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AcceptedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AcceptedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AcceptedResponse)));
        }

        /// <summary>
        /// Create new smart sms campaign Creates a new smart sms campaign.                         **DISCLAIMER:** A URL will be added at the end of your SMS
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="smartSmsCampaign">Parameters for the Smart Sms Campaign</param>
        /// <returns>HashcodeCampaign</returns>
        public HashcodeCampaign CreateSmartSmsCampaign (SmartSmsCampaign smartSmsCampaign)
        {
             ApiResponse<HashcodeCampaign> localVarResponse = CreateSmartSmsCampaignWithHttpInfo(smartSmsCampaign);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create new smart sms campaign Creates a new smart sms campaign.                         **DISCLAIMER:** A URL will be added at the end of your SMS
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="smartSmsCampaign">Parameters for the Smart Sms Campaign</param>
        /// <returns>ApiResponse of HashcodeCampaign</returns>
        public ApiResponse< HashcodeCampaign > CreateSmartSmsCampaignWithHttpInfo (SmartSmsCampaign smartSmsCampaign)
        {
            // verify the required parameter 'smartSmsCampaign' is set
            if (smartSmsCampaign == null)
                throw new ApiException(400, "Missing required parameter 'smartSmsCampaign' when calling SmartSmsApi->CreateSmartSmsCampaign");

            var localVarPath = "/campaigns/smart-sms";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (smartSmsCampaign != null && smartSmsCampaign.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(smartSmsCampaign); // http body (model) parameter
            }
            else
            {
                localVarPostBody = smartSmsCampaign; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateSmartSmsCampaign", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<HashcodeCampaign>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (HashcodeCampaign) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(HashcodeCampaign)));
        }

        /// <summary>
        /// Create new smart sms campaign Creates a new smart sms campaign.                         **DISCLAIMER:** A URL will be added at the end of your SMS
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="smartSmsCampaign">Parameters for the Smart Sms Campaign</param>
        /// <returns>Task of HashcodeCampaign</returns>
        public async System.Threading.Tasks.Task<HashcodeCampaign> CreateSmartSmsCampaignAsync (SmartSmsCampaign smartSmsCampaign)
        {
             ApiResponse<HashcodeCampaign> localVarResponse = await CreateSmartSmsCampaignAsyncWithHttpInfo(smartSmsCampaign);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create new smart sms campaign Creates a new smart sms campaign.                         **DISCLAIMER:** A URL will be added at the end of your SMS
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="smartSmsCampaign">Parameters for the Smart Sms Campaign</param>
        /// <returns>Task of ApiResponse (HashcodeCampaign)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<HashcodeCampaign>> CreateSmartSmsCampaignAsyncWithHttpInfo (SmartSmsCampaign smartSmsCampaign)
        {
            // verify the required parameter 'smartSmsCampaign' is set
            if (smartSmsCampaign == null)
                throw new ApiException(400, "Missing required parameter 'smartSmsCampaign' when calling SmartSmsApi->CreateSmartSmsCampaign");

            var localVarPath = "/campaigns/smart-sms";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (smartSmsCampaign != null && smartSmsCampaign.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(smartSmsCampaign); // http body (model) parameter
            }
            else
            {
                localVarPostBody = smartSmsCampaign; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateSmartSmsCampaign", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<HashcodeCampaign>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (HashcodeCampaign) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(HashcodeCampaign)));
        }

        /// <summary>
        /// Update a specific smart sms campaign Update smart sms campaign
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignHash">ID of the Campaign</param>
        /// <param name="smartSmsCampaignPatchRequest">Parameters for the Smart Sms Campaign</param>
        /// <returns>HashcodeCampaign</returns>
        public HashcodeCampaign PatchSmartSmsCampaign (string campaignHash, SmartSmsCampaignPatchRequest smartSmsCampaignPatchRequest)
        {
             ApiResponse<HashcodeCampaign> localVarResponse = PatchSmartSmsCampaignWithHttpInfo(campaignHash, smartSmsCampaignPatchRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a specific smart sms campaign Update smart sms campaign
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignHash">ID of the Campaign</param>
        /// <param name="smartSmsCampaignPatchRequest">Parameters for the Smart Sms Campaign</param>
        /// <returns>ApiResponse of HashcodeCampaign</returns>
        public ApiResponse< HashcodeCampaign > PatchSmartSmsCampaignWithHttpInfo (string campaignHash, SmartSmsCampaignPatchRequest smartSmsCampaignPatchRequest)
        {
            // verify the required parameter 'campaignHash' is set
            if (campaignHash == null)
                throw new ApiException(400, "Missing required parameter 'campaignHash' when calling SmartSmsApi->PatchSmartSmsCampaign");
            // verify the required parameter 'smartSmsCampaignPatchRequest' is set
            if (smartSmsCampaignPatchRequest == null)
                throw new ApiException(400, "Missing required parameter 'smartSmsCampaignPatchRequest' when calling SmartSmsApi->PatchSmartSmsCampaign");

            var localVarPath = "/campaigns/smart-sms/{campaign_hash}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (campaignHash != null) localVarPathParams.Add("campaign_hash", this.Configuration.ApiClient.ParameterToString(campaignHash)); // path parameter
            if (smartSmsCampaignPatchRequest != null && smartSmsCampaignPatchRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(smartSmsCampaignPatchRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = smartSmsCampaignPatchRequest; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PatchSmartSmsCampaign", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<HashcodeCampaign>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (HashcodeCampaign) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(HashcodeCampaign)));
        }

        /// <summary>
        /// Update a specific smart sms campaign Update smart sms campaign
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignHash">ID of the Campaign</param>
        /// <param name="smartSmsCampaignPatchRequest">Parameters for the Smart Sms Campaign</param>
        /// <returns>Task of HashcodeCampaign</returns>
        public async System.Threading.Tasks.Task<HashcodeCampaign> PatchSmartSmsCampaignAsync (string campaignHash, SmartSmsCampaignPatchRequest smartSmsCampaignPatchRequest)
        {
             ApiResponse<HashcodeCampaign> localVarResponse = await PatchSmartSmsCampaignAsyncWithHttpInfo(campaignHash, smartSmsCampaignPatchRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a specific smart sms campaign Update smart sms campaign
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignHash">ID of the Campaign</param>
        /// <param name="smartSmsCampaignPatchRequest">Parameters for the Smart Sms Campaign</param>
        /// <returns>Task of ApiResponse (HashcodeCampaign)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<HashcodeCampaign>> PatchSmartSmsCampaignAsyncWithHttpInfo (string campaignHash, SmartSmsCampaignPatchRequest smartSmsCampaignPatchRequest)
        {
            // verify the required parameter 'campaignHash' is set
            if (campaignHash == null)
                throw new ApiException(400, "Missing required parameter 'campaignHash' when calling SmartSmsApi->PatchSmartSmsCampaign");
            // verify the required parameter 'smartSmsCampaignPatchRequest' is set
            if (smartSmsCampaignPatchRequest == null)
                throw new ApiException(400, "Missing required parameter 'smartSmsCampaignPatchRequest' when calling SmartSmsApi->PatchSmartSmsCampaign");

            var localVarPath = "/campaigns/smart-sms/{campaign_hash}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (campaignHash != null) localVarPathParams.Add("campaign_hash", this.Configuration.ApiClient.ParameterToString(campaignHash)); // path parameter
            if (smartSmsCampaignPatchRequest != null && smartSmsCampaignPatchRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(smartSmsCampaignPatchRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = smartSmsCampaignPatchRequest; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PatchSmartSmsCampaign", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<HashcodeCampaign>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (HashcodeCampaign) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(HashcodeCampaign)));
        }

    }
}
