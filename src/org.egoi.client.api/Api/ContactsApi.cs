/* 
 * APIv3 (Beta)
 *
 *  # Introduction Just a quick peek!!! This is our new version of API. Remember, it is not stable yet!!! But we invite you play with it and give us your feedback ;) # Getting Started  E-goi can be integrated with many environments and programming languages via our REST API. We've created a developer focused portal to give your organization a clear and quick overview of how to integrate with E-goi. The developer portal focuses on scenarios for integration and flow of events. We recommend familiarizing yourself with all of the content in the developer portal, before start using our rest API.   The E-goi  APIv3 is served over HTTPS. To ensure data privacy, unencrypted HTTP is not supported.  Request data is passed to the API by POSTing JSON objects to the API endpoints with the appropriate parameters.   BaseURL = api.egoiapp.com  # RESTful Services This API supports 5 HTTP methods:  * <b>GET</b>: The HTTP GET method is used to **read** (or retrieve) a representation of a resource. * <b>POST</b>: The POST verb is most-often utilized to **create** new resources. * <b>PATCH</b>: PATCH is used for **modify** capabilities. The PATCH request only needs to contain the changes to the resource, not the complete resource * <b>PUT</b>: PUT is most-often utilized for **update** capabilities, PUT-ing to a known resource URI with the request body containing the newly-updated representation of the original resource. * <b>DELETE</b>: DELETE is pretty easy to understand. It is used to **delete** a resource identified by a URI.  # Authentication   We use a custom authentication method, you will need a apikey that you can find in your account settings. Below you will see a curl example to get your account information:  #!/bin/bash  curl -X GET 'https://api.egoiapp.com/my-account' \\  -H 'accept: application/json' \\  -H 'Apikey: <YOUR_APY_KEY>'  Here you can see a curl Post example with authentication:  #!/bin/bash  curl -X POST 'http://api.egoiapp.com/tags' \\  -H 'accept: application/json' \\  -H 'Apikey: <YOUR_APY_KEY>' \\  -H 'Content-Type: application/json' \\  -d '{`name`:`Your custom tag`,`color`:`#FFFFFF`}'  # SDK Get started quickly with E-goi with our integration tools. Our SDK is a modern open source library that makes it easy to integrate your application with E-goi services. * <b><a href='https://github.com/E-goi/sdk-java'>Java</a></b> * <b><a href='https://github.com/E-goi/sdk-php'>PHP</a></b> * <b><a href='https://github.com/E-goi/sdk-python'>Python</a></b>  <security-definitions/>
 *
 * OpenAPI spec version: 3.0.0-beta
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using org.egoi.client.api.Client;
using org.egoi.client.api.Model;

namespace org.egoi.client.api.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IContactsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Attach tag to contact
        /// </summary>
        /// <remarks>
        /// Attaches a tag to the provided contacts
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">ID of the List</param>
        /// <param name="attachTagRequest">Parameters for the Tag</param>
        /// <returns>AttachTagResponse</returns>
        AttachTagResponse ActionAttachTag (int? listId, AttachTagRequest attachTagRequest);

        /// <summary>
        /// Attach tag to contact
        /// </summary>
        /// <remarks>
        /// Attaches a tag to the provided contacts
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">ID of the List</param>
        /// <param name="attachTagRequest">Parameters for the Tag</param>
        /// <returns>ApiResponse of AttachTagResponse</returns>
        ApiResponse<AttachTagResponse> ActionAttachTagWithHttpInfo (int? listId, AttachTagRequest attachTagRequest);
        /// <summary>
        /// Detach tag to contact
        /// </summary>
        /// <remarks>
        /// Detach a tag to the provided contacts
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">ID of the List</param>
        /// <param name="attachTagRequest">Parameters for the Tag</param>
        /// <returns>AttachTagResponse</returns>
        AttachTagResponse ActionDetachTag (int? listId, AttachTagRequest attachTagRequest);

        /// <summary>
        /// Detach tag to contact
        /// </summary>
        /// <remarks>
        /// Detach a tag to the provided contacts
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">ID of the List</param>
        /// <param name="attachTagRequest">Parameters for the Tag</param>
        /// <returns>ApiResponse of AttachTagResponse</returns>
        ApiResponse<AttachTagResponse> ActionDetachTagWithHttpInfo (int? listId, AttachTagRequest attachTagRequest);
        /// <summary>
        /// Exports a list of contacts
        /// </summary>
        /// <remarks>
        /// Exports a list of contacts to the desired callback url
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">ID of the List</param>
        /// <param name="contactExportRequest">Parameters for export</param>
        /// <returns>AcceptedResponse</returns>
        AcceptedResponse ActionExportContacts (int? listId, ContactExportRequest contactExportRequest);

        /// <summary>
        /// Exports a list of contacts
        /// </summary>
        /// <remarks>
        /// Exports a list of contacts to the desired callback url
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">ID of the List</param>
        /// <param name="contactExportRequest">Parameters for export</param>
        /// <returns>ApiResponse of AcceptedResponse</returns>
        ApiResponse<AcceptedResponse> ActionExportContactsWithHttpInfo (int? listId, ContactExportRequest contactExportRequest);
        /// <summary>
        /// Import collection of contacts
        /// </summary>
        /// <remarks>
        /// Imports a collection of contacts
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">ID of the List</param>
        /// <param name="importBulkRequest">Parameters for the bulk import</param>
        /// <returns>AcceptedResponse</returns>
        AcceptedResponse ActionImportBulk (int? listId, ImportBulkRequest importBulkRequest);

        /// <summary>
        /// Import collection of contacts
        /// </summary>
        /// <remarks>
        /// Imports a collection of contacts
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">ID of the List</param>
        /// <param name="importBulkRequest">Parameters for the bulk import</param>
        /// <returns>ApiResponse of AcceptedResponse</returns>
        ApiResponse<AcceptedResponse> ActionImportBulkWithHttpInfo (int? listId, ImportBulkRequest importBulkRequest);
        /// <summary>
        /// Start automation
        /// </summary>
        /// <remarks>
        /// Start automation to the provided contacts
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">ID of the List</param>
        /// <param name="startAutomationRequest">Parameters for the operation to start automation</param>
        /// <returns>StartAutomationResponse</returns>
        StartAutomationResponse ActionStartAutomation (int? listId, StartAutomationRequest startAutomationRequest);

        /// <summary>
        /// Start automation
        /// </summary>
        /// <remarks>
        /// Start automation to the provided contacts
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">ID of the List</param>
        /// <param name="startAutomationRequest">Parameters for the operation to start automation</param>
        /// <returns>ApiResponse of StartAutomationResponse</returns>
        ApiResponse<StartAutomationResponse> ActionStartAutomationWithHttpInfo (int? listId, StartAutomationRequest startAutomationRequest);
        /// <summary>
        /// Unsubscribes contacts
        /// </summary>
        /// <remarks>
        /// Unsubscribes contacts
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">ID of the List</param>
        /// <param name="removeRequest">Parameters for the contact to unsubscribe</param>
        /// <returns>RemoveResponse</returns>
        RemoveResponse ActionUnsubscribeContact (int? listId, RemoveRequest removeRequest);

        /// <summary>
        /// Unsubscribes contacts
        /// </summary>
        /// <remarks>
        /// Unsubscribes contacts
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">ID of the List</param>
        /// <param name="removeRequest">Parameters for the contact to unsubscribe</param>
        /// <returns>ApiResponse of RemoveResponse</returns>
        ApiResponse<RemoveResponse> ActionUnsubscribeContactWithHttpInfo (int? listId, RemoveRequest removeRequest);
        /// <summary>
        /// Create new contact
        /// </summary>
        /// <remarks>
        /// Create a new contact
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">ID of the list where the contact belongs</param>
        /// <param name="contactBaseExtra">Parameters for the Contact</param>
        /// <returns>CreateContactResponse</returns>
        CreateContactResponse CreateContact (int? listId, ContactBaseExtra contactBaseExtra);

        /// <summary>
        /// Create new contact
        /// </summary>
        /// <remarks>
        /// Create a new contact
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">ID of the list where the contact belongs</param>
        /// <param name="contactBaseExtra">Parameters for the Contact</param>
        /// <returns>ApiResponse of CreateContactResponse</returns>
        ApiResponse<CreateContactResponse> CreateContactWithHttpInfo (int? listId, ContactBaseExtra contactBaseExtra);
        /// <summary>
        /// Get all contact activities
        /// </summary>
        /// <remarks>
        /// Returns all contact activities
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">ID of the Contact</param>
        /// <param name="listId">ID of the List</param>
        /// <param name="offset">Element offset (starting at zero for the first element) (optional)</param>
        /// <param name="limit">Number of items to return (optional, default to 10)</param>
        /// <param name="dateMin">Start date (optional)</param>
        /// <param name="dateMax">End date (optional)</param>
        /// <returns>ActivityCollection</returns>
        ActivityCollection GetAllContactActivities (string contactId, int? listId, int? offset = null, int? limit = null, DateTime? dateMin = null, DateTime? dateMax = null);

        /// <summary>
        /// Get all contact activities
        /// </summary>
        /// <remarks>
        /// Returns all contact activities
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">ID of the Contact</param>
        /// <param name="listId">ID of the List</param>
        /// <param name="offset">Element offset (starting at zero for the first element) (optional)</param>
        /// <param name="limit">Number of items to return (optional, default to 10)</param>
        /// <param name="dateMin">Start date (optional)</param>
        /// <param name="dateMax">End date (optional)</param>
        /// <returns>ApiResponse of ActivityCollection</returns>
        ApiResponse<ActivityCollection> GetAllContactActivitiesWithHttpInfo (string contactId, int? listId, int? offset = null, int? limit = null, DateTime? dateMin = null, DateTime? dateMax = null);
        /// <summary>
        /// Get all contacts
        /// </summary>
        /// <remarks>
        /// Returns all contacts
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">ID of the List</param>
        /// <param name="offset">Element offset (starting at zero for the first element) (optional)</param>
        /// <param name="limit">Number of items to return (optional, default to 10)</param>
        /// <returns>ContactCollection</returns>
        ContactCollection GetAllContacts (int? listId, int? offset = null, int? limit = null);

        /// <summary>
        /// Get all contacts
        /// </summary>
        /// <remarks>
        /// Returns all contacts
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">ID of the List</param>
        /// <param name="offset">Element offset (starting at zero for the first element) (optional)</param>
        /// <param name="limit">Number of items to return (optional, default to 10)</param>
        /// <returns>ApiResponse of ContactCollection</returns>
        ApiResponse<ContactCollection> GetAllContactsWithHttpInfo (int? listId, int? offset = null, int? limit = null);
        /// <summary>
        /// Get contact
        /// </summary>
        /// <remarks>
        /// Returns contact information given its ID
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">ID of the Contact</param>
        /// <param name="listId">ID of the List</param>
        /// <returns>ComplexContact</returns>
        ComplexContact GetContact (string contactId, int? listId);

        /// <summary>
        /// Get contact
        /// </summary>
        /// <remarks>
        /// Returns contact information given its ID
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">ID of the Contact</param>
        /// <param name="listId">ID of the List</param>
        /// <returns>ApiResponse of ComplexContact</returns>
        ApiResponse<ComplexContact> GetContactWithHttpInfo (string contactId, int? listId);
        /// <summary>
        /// Update a specific contact
        /// </summary>
        /// <remarks>
        /// Update contact
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">ID of the Contact</param>
        /// <param name="listId">ID of the List</param>
        /// <param name="contactBaseStatusExtra">Parameters for the contact</param>
        /// <returns>CreateContactResponse</returns>
        CreateContactResponse PatchContact (string contactId, int? listId, ContactBaseStatusExtra contactBaseStatusExtra);

        /// <summary>
        /// Update a specific contact
        /// </summary>
        /// <remarks>
        /// Update contact
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">ID of the Contact</param>
        /// <param name="listId">ID of the List</param>
        /// <param name="contactBaseStatusExtra">Parameters for the contact</param>
        /// <returns>ApiResponse of CreateContactResponse</returns>
        ApiResponse<CreateContactResponse> PatchContactWithHttpInfo (string contactId, int? listId, ContactBaseStatusExtra contactBaseStatusExtra);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Attach tag to contact
        /// </summary>
        /// <remarks>
        /// Attaches a tag to the provided contacts
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">ID of the List</param>
        /// <param name="attachTagRequest">Parameters for the Tag</param>
        /// <returns>Task of AttachTagResponse</returns>
        System.Threading.Tasks.Task<AttachTagResponse> ActionAttachTagAsync (int? listId, AttachTagRequest attachTagRequest);

        /// <summary>
        /// Attach tag to contact
        /// </summary>
        /// <remarks>
        /// Attaches a tag to the provided contacts
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">ID of the List</param>
        /// <param name="attachTagRequest">Parameters for the Tag</param>
        /// <returns>Task of ApiResponse (AttachTagResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AttachTagResponse>> ActionAttachTagAsyncWithHttpInfo (int? listId, AttachTagRequest attachTagRequest);
        /// <summary>
        /// Detach tag to contact
        /// </summary>
        /// <remarks>
        /// Detach a tag to the provided contacts
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">ID of the List</param>
        /// <param name="attachTagRequest">Parameters for the Tag</param>
        /// <returns>Task of AttachTagResponse</returns>
        System.Threading.Tasks.Task<AttachTagResponse> ActionDetachTagAsync (int? listId, AttachTagRequest attachTagRequest);

        /// <summary>
        /// Detach tag to contact
        /// </summary>
        /// <remarks>
        /// Detach a tag to the provided contacts
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">ID of the List</param>
        /// <param name="attachTagRequest">Parameters for the Tag</param>
        /// <returns>Task of ApiResponse (AttachTagResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AttachTagResponse>> ActionDetachTagAsyncWithHttpInfo (int? listId, AttachTagRequest attachTagRequest);
        /// <summary>
        /// Exports a list of contacts
        /// </summary>
        /// <remarks>
        /// Exports a list of contacts to the desired callback url
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">ID of the List</param>
        /// <param name="contactExportRequest">Parameters for export</param>
        /// <returns>Task of AcceptedResponse</returns>
        System.Threading.Tasks.Task<AcceptedResponse> ActionExportContactsAsync (int? listId, ContactExportRequest contactExportRequest);

        /// <summary>
        /// Exports a list of contacts
        /// </summary>
        /// <remarks>
        /// Exports a list of contacts to the desired callback url
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">ID of the List</param>
        /// <param name="contactExportRequest">Parameters for export</param>
        /// <returns>Task of ApiResponse (AcceptedResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AcceptedResponse>> ActionExportContactsAsyncWithHttpInfo (int? listId, ContactExportRequest contactExportRequest);
        /// <summary>
        /// Import collection of contacts
        /// </summary>
        /// <remarks>
        /// Imports a collection of contacts
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">ID of the List</param>
        /// <param name="importBulkRequest">Parameters for the bulk import</param>
        /// <returns>Task of AcceptedResponse</returns>
        System.Threading.Tasks.Task<AcceptedResponse> ActionImportBulkAsync (int? listId, ImportBulkRequest importBulkRequest);

        /// <summary>
        /// Import collection of contacts
        /// </summary>
        /// <remarks>
        /// Imports a collection of contacts
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">ID of the List</param>
        /// <param name="importBulkRequest">Parameters for the bulk import</param>
        /// <returns>Task of ApiResponse (AcceptedResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AcceptedResponse>> ActionImportBulkAsyncWithHttpInfo (int? listId, ImportBulkRequest importBulkRequest);
        /// <summary>
        /// Start automation
        /// </summary>
        /// <remarks>
        /// Start automation to the provided contacts
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">ID of the List</param>
        /// <param name="startAutomationRequest">Parameters for the operation to start automation</param>
        /// <returns>Task of StartAutomationResponse</returns>
        System.Threading.Tasks.Task<StartAutomationResponse> ActionStartAutomationAsync (int? listId, StartAutomationRequest startAutomationRequest);

        /// <summary>
        /// Start automation
        /// </summary>
        /// <remarks>
        /// Start automation to the provided contacts
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">ID of the List</param>
        /// <param name="startAutomationRequest">Parameters for the operation to start automation</param>
        /// <returns>Task of ApiResponse (StartAutomationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<StartAutomationResponse>> ActionStartAutomationAsyncWithHttpInfo (int? listId, StartAutomationRequest startAutomationRequest);
        /// <summary>
        /// Unsubscribes contacts
        /// </summary>
        /// <remarks>
        /// Unsubscribes contacts
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">ID of the List</param>
        /// <param name="removeRequest">Parameters for the contact to unsubscribe</param>
        /// <returns>Task of RemoveResponse</returns>
        System.Threading.Tasks.Task<RemoveResponse> ActionUnsubscribeContactAsync (int? listId, RemoveRequest removeRequest);

        /// <summary>
        /// Unsubscribes contacts
        /// </summary>
        /// <remarks>
        /// Unsubscribes contacts
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">ID of the List</param>
        /// <param name="removeRequest">Parameters for the contact to unsubscribe</param>
        /// <returns>Task of ApiResponse (RemoveResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RemoveResponse>> ActionUnsubscribeContactAsyncWithHttpInfo (int? listId, RemoveRequest removeRequest);
        /// <summary>
        /// Create new contact
        /// </summary>
        /// <remarks>
        /// Create a new contact
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">ID of the list where the contact belongs</param>
        /// <param name="contactBaseExtra">Parameters for the Contact</param>
        /// <returns>Task of CreateContactResponse</returns>
        System.Threading.Tasks.Task<CreateContactResponse> CreateContactAsync (int? listId, ContactBaseExtra contactBaseExtra);

        /// <summary>
        /// Create new contact
        /// </summary>
        /// <remarks>
        /// Create a new contact
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">ID of the list where the contact belongs</param>
        /// <param name="contactBaseExtra">Parameters for the Contact</param>
        /// <returns>Task of ApiResponse (CreateContactResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateContactResponse>> CreateContactAsyncWithHttpInfo (int? listId, ContactBaseExtra contactBaseExtra);
        /// <summary>
        /// Get all contact activities
        /// </summary>
        /// <remarks>
        /// Returns all contact activities
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">ID of the Contact</param>
        /// <param name="listId">ID of the List</param>
        /// <param name="offset">Element offset (starting at zero for the first element) (optional)</param>
        /// <param name="limit">Number of items to return (optional, default to 10)</param>
        /// <param name="dateMin">Start date (optional)</param>
        /// <param name="dateMax">End date (optional)</param>
        /// <returns>Task of ActivityCollection</returns>
        System.Threading.Tasks.Task<ActivityCollection> GetAllContactActivitiesAsync (string contactId, int? listId, int? offset = null, int? limit = null, DateTime? dateMin = null, DateTime? dateMax = null);

        /// <summary>
        /// Get all contact activities
        /// </summary>
        /// <remarks>
        /// Returns all contact activities
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">ID of the Contact</param>
        /// <param name="listId">ID of the List</param>
        /// <param name="offset">Element offset (starting at zero for the first element) (optional)</param>
        /// <param name="limit">Number of items to return (optional, default to 10)</param>
        /// <param name="dateMin">Start date (optional)</param>
        /// <param name="dateMax">End date (optional)</param>
        /// <returns>Task of ApiResponse (ActivityCollection)</returns>
        System.Threading.Tasks.Task<ApiResponse<ActivityCollection>> GetAllContactActivitiesAsyncWithHttpInfo (string contactId, int? listId, int? offset = null, int? limit = null, DateTime? dateMin = null, DateTime? dateMax = null);
        /// <summary>
        /// Get all contacts
        /// </summary>
        /// <remarks>
        /// Returns all contacts
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">ID of the List</param>
        /// <param name="offset">Element offset (starting at zero for the first element) (optional)</param>
        /// <param name="limit">Number of items to return (optional, default to 10)</param>
        /// <returns>Task of ContactCollection</returns>
        System.Threading.Tasks.Task<ContactCollection> GetAllContactsAsync (int? listId, int? offset = null, int? limit = null);

        /// <summary>
        /// Get all contacts
        /// </summary>
        /// <remarks>
        /// Returns all contacts
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">ID of the List</param>
        /// <param name="offset">Element offset (starting at zero for the first element) (optional)</param>
        /// <param name="limit">Number of items to return (optional, default to 10)</param>
        /// <returns>Task of ApiResponse (ContactCollection)</returns>
        System.Threading.Tasks.Task<ApiResponse<ContactCollection>> GetAllContactsAsyncWithHttpInfo (int? listId, int? offset = null, int? limit = null);
        /// <summary>
        /// Get contact
        /// </summary>
        /// <remarks>
        /// Returns contact information given its ID
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">ID of the Contact</param>
        /// <param name="listId">ID of the List</param>
        /// <returns>Task of ComplexContact</returns>
        System.Threading.Tasks.Task<ComplexContact> GetContactAsync (string contactId, int? listId);

        /// <summary>
        /// Get contact
        /// </summary>
        /// <remarks>
        /// Returns contact information given its ID
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">ID of the Contact</param>
        /// <param name="listId">ID of the List</param>
        /// <returns>Task of ApiResponse (ComplexContact)</returns>
        System.Threading.Tasks.Task<ApiResponse<ComplexContact>> GetContactAsyncWithHttpInfo (string contactId, int? listId);
        /// <summary>
        /// Update a specific contact
        /// </summary>
        /// <remarks>
        /// Update contact
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">ID of the Contact</param>
        /// <param name="listId">ID of the List</param>
        /// <param name="contactBaseStatusExtra">Parameters for the contact</param>
        /// <returns>Task of CreateContactResponse</returns>
        System.Threading.Tasks.Task<CreateContactResponse> PatchContactAsync (string contactId, int? listId, ContactBaseStatusExtra contactBaseStatusExtra);

        /// <summary>
        /// Update a specific contact
        /// </summary>
        /// <remarks>
        /// Update contact
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">ID of the Contact</param>
        /// <param name="listId">ID of the List</param>
        /// <param name="contactBaseStatusExtra">Parameters for the contact</param>
        /// <returns>Task of ApiResponse (CreateContactResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateContactResponse>> PatchContactAsyncWithHttpInfo (string contactId, int? listId, ContactBaseStatusExtra contactBaseStatusExtra);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ContactsApi : IContactsApi
    {
        private org.egoi.client.api.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ContactsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ContactsApi(String basePath)
        {
            this.Configuration = new org.egoi.client.api.Client.Configuration { BasePath = basePath };

            ExceptionFactory = org.egoi.client.api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ContactsApi"/> class
        /// </summary>
        /// <returns></returns>
        public ContactsApi()
        {
            this.Configuration = org.egoi.client.api.Client.Configuration.Default;

            ExceptionFactory = org.egoi.client.api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ContactsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ContactsApi(org.egoi.client.api.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = org.egoi.client.api.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = org.egoi.client.api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public org.egoi.client.api.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public org.egoi.client.api.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Attach tag to contact Attaches a tag to the provided contacts
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">ID of the List</param>
        /// <param name="attachTagRequest">Parameters for the Tag</param>
        /// <returns>AttachTagResponse</returns>
        public AttachTagResponse ActionAttachTag (int? listId, AttachTagRequest attachTagRequest)
        {
             ApiResponse<AttachTagResponse> localVarResponse = ActionAttachTagWithHttpInfo(listId, attachTagRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Attach tag to contact Attaches a tag to the provided contacts
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">ID of the List</param>
        /// <param name="attachTagRequest">Parameters for the Tag</param>
        /// <returns>ApiResponse of AttachTagResponse</returns>
        public ApiResponse< AttachTagResponse > ActionAttachTagWithHttpInfo (int? listId, AttachTagRequest attachTagRequest)
        {
            // verify the required parameter 'listId' is set
            if (listId == null)
                throw new ApiException(400, "Missing required parameter 'listId' when calling ContactsApi->ActionAttachTag");
            // verify the required parameter 'attachTagRequest' is set
            if (attachTagRequest == null)
                throw new ApiException(400, "Missing required parameter 'attachTagRequest' when calling ContactsApi->ActionAttachTag");

            var localVarPath = "/lists/{list_id}/contacts/actions/attach-tag";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (listId != null) localVarPathParams.Add("list_id", this.Configuration.ApiClient.ParameterToString(listId)); // path parameter
            if (attachTagRequest != null && attachTagRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(attachTagRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = attachTagRequest; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ActionAttachTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AttachTagResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AttachTagResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AttachTagResponse)));
        }

        /// <summary>
        /// Attach tag to contact Attaches a tag to the provided contacts
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">ID of the List</param>
        /// <param name="attachTagRequest">Parameters for the Tag</param>
        /// <returns>Task of AttachTagResponse</returns>
        public async System.Threading.Tasks.Task<AttachTagResponse> ActionAttachTagAsync (int? listId, AttachTagRequest attachTagRequest)
        {
             ApiResponse<AttachTagResponse> localVarResponse = await ActionAttachTagAsyncWithHttpInfo(listId, attachTagRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Attach tag to contact Attaches a tag to the provided contacts
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">ID of the List</param>
        /// <param name="attachTagRequest">Parameters for the Tag</param>
        /// <returns>Task of ApiResponse (AttachTagResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AttachTagResponse>> ActionAttachTagAsyncWithHttpInfo (int? listId, AttachTagRequest attachTagRequest)
        {
            // verify the required parameter 'listId' is set
            if (listId == null)
                throw new ApiException(400, "Missing required parameter 'listId' when calling ContactsApi->ActionAttachTag");
            // verify the required parameter 'attachTagRequest' is set
            if (attachTagRequest == null)
                throw new ApiException(400, "Missing required parameter 'attachTagRequest' when calling ContactsApi->ActionAttachTag");

            var localVarPath = "/lists/{list_id}/contacts/actions/attach-tag";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (listId != null) localVarPathParams.Add("list_id", this.Configuration.ApiClient.ParameterToString(listId)); // path parameter
            if (attachTagRequest != null && attachTagRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(attachTagRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = attachTagRequest; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ActionAttachTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AttachTagResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AttachTagResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AttachTagResponse)));
        }

        /// <summary>
        /// Detach tag to contact Detach a tag to the provided contacts
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">ID of the List</param>
        /// <param name="attachTagRequest">Parameters for the Tag</param>
        /// <returns>AttachTagResponse</returns>
        public AttachTagResponse ActionDetachTag (int? listId, AttachTagRequest attachTagRequest)
        {
             ApiResponse<AttachTagResponse> localVarResponse = ActionDetachTagWithHttpInfo(listId, attachTagRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Detach tag to contact Detach a tag to the provided contacts
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">ID of the List</param>
        /// <param name="attachTagRequest">Parameters for the Tag</param>
        /// <returns>ApiResponse of AttachTagResponse</returns>
        public ApiResponse< AttachTagResponse > ActionDetachTagWithHttpInfo (int? listId, AttachTagRequest attachTagRequest)
        {
            // verify the required parameter 'listId' is set
            if (listId == null)
                throw new ApiException(400, "Missing required parameter 'listId' when calling ContactsApi->ActionDetachTag");
            // verify the required parameter 'attachTagRequest' is set
            if (attachTagRequest == null)
                throw new ApiException(400, "Missing required parameter 'attachTagRequest' when calling ContactsApi->ActionDetachTag");

            var localVarPath = "/lists/{list_id}/contacts/actions/detach-tag";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (listId != null) localVarPathParams.Add("list_id", this.Configuration.ApiClient.ParameterToString(listId)); // path parameter
            if (attachTagRequest != null && attachTagRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(attachTagRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = attachTagRequest; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ActionDetachTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AttachTagResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AttachTagResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AttachTagResponse)));
        }

        /// <summary>
        /// Detach tag to contact Detach a tag to the provided contacts
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">ID of the List</param>
        /// <param name="attachTagRequest">Parameters for the Tag</param>
        /// <returns>Task of AttachTagResponse</returns>
        public async System.Threading.Tasks.Task<AttachTagResponse> ActionDetachTagAsync (int? listId, AttachTagRequest attachTagRequest)
        {
             ApiResponse<AttachTagResponse> localVarResponse = await ActionDetachTagAsyncWithHttpInfo(listId, attachTagRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Detach tag to contact Detach a tag to the provided contacts
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">ID of the List</param>
        /// <param name="attachTagRequest">Parameters for the Tag</param>
        /// <returns>Task of ApiResponse (AttachTagResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AttachTagResponse>> ActionDetachTagAsyncWithHttpInfo (int? listId, AttachTagRequest attachTagRequest)
        {
            // verify the required parameter 'listId' is set
            if (listId == null)
                throw new ApiException(400, "Missing required parameter 'listId' when calling ContactsApi->ActionDetachTag");
            // verify the required parameter 'attachTagRequest' is set
            if (attachTagRequest == null)
                throw new ApiException(400, "Missing required parameter 'attachTagRequest' when calling ContactsApi->ActionDetachTag");

            var localVarPath = "/lists/{list_id}/contacts/actions/detach-tag";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (listId != null) localVarPathParams.Add("list_id", this.Configuration.ApiClient.ParameterToString(listId)); // path parameter
            if (attachTagRequest != null && attachTagRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(attachTagRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = attachTagRequest; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ActionDetachTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AttachTagResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AttachTagResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AttachTagResponse)));
        }

        /// <summary>
        /// Exports a list of contacts Exports a list of contacts to the desired callback url
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">ID of the List</param>
        /// <param name="contactExportRequest">Parameters for export</param>
        /// <returns>AcceptedResponse</returns>
        public AcceptedResponse ActionExportContacts (int? listId, ContactExportRequest contactExportRequest)
        {
             ApiResponse<AcceptedResponse> localVarResponse = ActionExportContactsWithHttpInfo(listId, contactExportRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Exports a list of contacts Exports a list of contacts to the desired callback url
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">ID of the List</param>
        /// <param name="contactExportRequest">Parameters for export</param>
        /// <returns>ApiResponse of AcceptedResponse</returns>
        public ApiResponse< AcceptedResponse > ActionExportContactsWithHttpInfo (int? listId, ContactExportRequest contactExportRequest)
        {
            // verify the required parameter 'listId' is set
            if (listId == null)
                throw new ApiException(400, "Missing required parameter 'listId' when calling ContactsApi->ActionExportContacts");
            // verify the required parameter 'contactExportRequest' is set
            if (contactExportRequest == null)
                throw new ApiException(400, "Missing required parameter 'contactExportRequest' when calling ContactsApi->ActionExportContacts");

            var localVarPath = "/lists/{list_id}/contacts/actions/export";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (listId != null) localVarPathParams.Add("list_id", this.Configuration.ApiClient.ParameterToString(listId)); // path parameter
            if (contactExportRequest != null && contactExportRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(contactExportRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = contactExportRequest; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ActionExportContacts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AcceptedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AcceptedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AcceptedResponse)));
        }

        /// <summary>
        /// Exports a list of contacts Exports a list of contacts to the desired callback url
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">ID of the List</param>
        /// <param name="contactExportRequest">Parameters for export</param>
        /// <returns>Task of AcceptedResponse</returns>
        public async System.Threading.Tasks.Task<AcceptedResponse> ActionExportContactsAsync (int? listId, ContactExportRequest contactExportRequest)
        {
             ApiResponse<AcceptedResponse> localVarResponse = await ActionExportContactsAsyncWithHttpInfo(listId, contactExportRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Exports a list of contacts Exports a list of contacts to the desired callback url
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">ID of the List</param>
        /// <param name="contactExportRequest">Parameters for export</param>
        /// <returns>Task of ApiResponse (AcceptedResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AcceptedResponse>> ActionExportContactsAsyncWithHttpInfo (int? listId, ContactExportRequest contactExportRequest)
        {
            // verify the required parameter 'listId' is set
            if (listId == null)
                throw new ApiException(400, "Missing required parameter 'listId' when calling ContactsApi->ActionExportContacts");
            // verify the required parameter 'contactExportRequest' is set
            if (contactExportRequest == null)
                throw new ApiException(400, "Missing required parameter 'contactExportRequest' when calling ContactsApi->ActionExportContacts");

            var localVarPath = "/lists/{list_id}/contacts/actions/export";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (listId != null) localVarPathParams.Add("list_id", this.Configuration.ApiClient.ParameterToString(listId)); // path parameter
            if (contactExportRequest != null && contactExportRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(contactExportRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = contactExportRequest; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ActionExportContacts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AcceptedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AcceptedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AcceptedResponse)));
        }

        /// <summary>
        /// Import collection of contacts Imports a collection of contacts
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">ID of the List</param>
        /// <param name="importBulkRequest">Parameters for the bulk import</param>
        /// <returns>AcceptedResponse</returns>
        public AcceptedResponse ActionImportBulk (int? listId, ImportBulkRequest importBulkRequest)
        {
             ApiResponse<AcceptedResponse> localVarResponse = ActionImportBulkWithHttpInfo(listId, importBulkRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Import collection of contacts Imports a collection of contacts
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">ID of the List</param>
        /// <param name="importBulkRequest">Parameters for the bulk import</param>
        /// <returns>ApiResponse of AcceptedResponse</returns>
        public ApiResponse< AcceptedResponse > ActionImportBulkWithHttpInfo (int? listId, ImportBulkRequest importBulkRequest)
        {
            // verify the required parameter 'listId' is set
            if (listId == null)
                throw new ApiException(400, "Missing required parameter 'listId' when calling ContactsApi->ActionImportBulk");
            // verify the required parameter 'importBulkRequest' is set
            if (importBulkRequest == null)
                throw new ApiException(400, "Missing required parameter 'importBulkRequest' when calling ContactsApi->ActionImportBulk");

            var localVarPath = "/lists/{list_id}/contacts/actions/import-bulk";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (listId != null) localVarPathParams.Add("list_id", this.Configuration.ApiClient.ParameterToString(listId)); // path parameter
            if (importBulkRequest != null && importBulkRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(importBulkRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = importBulkRequest; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ActionImportBulk", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AcceptedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AcceptedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AcceptedResponse)));
        }

        /// <summary>
        /// Import collection of contacts Imports a collection of contacts
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">ID of the List</param>
        /// <param name="importBulkRequest">Parameters for the bulk import</param>
        /// <returns>Task of AcceptedResponse</returns>
        public async System.Threading.Tasks.Task<AcceptedResponse> ActionImportBulkAsync (int? listId, ImportBulkRequest importBulkRequest)
        {
             ApiResponse<AcceptedResponse> localVarResponse = await ActionImportBulkAsyncWithHttpInfo(listId, importBulkRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Import collection of contacts Imports a collection of contacts
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">ID of the List</param>
        /// <param name="importBulkRequest">Parameters for the bulk import</param>
        /// <returns>Task of ApiResponse (AcceptedResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AcceptedResponse>> ActionImportBulkAsyncWithHttpInfo (int? listId, ImportBulkRequest importBulkRequest)
        {
            // verify the required parameter 'listId' is set
            if (listId == null)
                throw new ApiException(400, "Missing required parameter 'listId' when calling ContactsApi->ActionImportBulk");
            // verify the required parameter 'importBulkRequest' is set
            if (importBulkRequest == null)
                throw new ApiException(400, "Missing required parameter 'importBulkRequest' when calling ContactsApi->ActionImportBulk");

            var localVarPath = "/lists/{list_id}/contacts/actions/import-bulk";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (listId != null) localVarPathParams.Add("list_id", this.Configuration.ApiClient.ParameterToString(listId)); // path parameter
            if (importBulkRequest != null && importBulkRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(importBulkRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = importBulkRequest; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ActionImportBulk", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AcceptedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AcceptedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AcceptedResponse)));
        }

        /// <summary>
        /// Start automation Start automation to the provided contacts
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">ID of the List</param>
        /// <param name="startAutomationRequest">Parameters for the operation to start automation</param>
        /// <returns>StartAutomationResponse</returns>
        public StartAutomationResponse ActionStartAutomation (int? listId, StartAutomationRequest startAutomationRequest)
        {
             ApiResponse<StartAutomationResponse> localVarResponse = ActionStartAutomationWithHttpInfo(listId, startAutomationRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Start automation Start automation to the provided contacts
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">ID of the List</param>
        /// <param name="startAutomationRequest">Parameters for the operation to start automation</param>
        /// <returns>ApiResponse of StartAutomationResponse</returns>
        public ApiResponse< StartAutomationResponse > ActionStartAutomationWithHttpInfo (int? listId, StartAutomationRequest startAutomationRequest)
        {
            // verify the required parameter 'listId' is set
            if (listId == null)
                throw new ApiException(400, "Missing required parameter 'listId' when calling ContactsApi->ActionStartAutomation");
            // verify the required parameter 'startAutomationRequest' is set
            if (startAutomationRequest == null)
                throw new ApiException(400, "Missing required parameter 'startAutomationRequest' when calling ContactsApi->ActionStartAutomation");

            var localVarPath = "/lists/{list_id}/contacts/actions/start-automation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (listId != null) localVarPathParams.Add("list_id", this.Configuration.ApiClient.ParameterToString(listId)); // path parameter
            if (startAutomationRequest != null && startAutomationRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(startAutomationRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = startAutomationRequest; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ActionStartAutomation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StartAutomationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StartAutomationResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(StartAutomationResponse)));
        }

        /// <summary>
        /// Start automation Start automation to the provided contacts
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">ID of the List</param>
        /// <param name="startAutomationRequest">Parameters for the operation to start automation</param>
        /// <returns>Task of StartAutomationResponse</returns>
        public async System.Threading.Tasks.Task<StartAutomationResponse> ActionStartAutomationAsync (int? listId, StartAutomationRequest startAutomationRequest)
        {
             ApiResponse<StartAutomationResponse> localVarResponse = await ActionStartAutomationAsyncWithHttpInfo(listId, startAutomationRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Start automation Start automation to the provided contacts
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">ID of the List</param>
        /// <param name="startAutomationRequest">Parameters for the operation to start automation</param>
        /// <returns>Task of ApiResponse (StartAutomationResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<StartAutomationResponse>> ActionStartAutomationAsyncWithHttpInfo (int? listId, StartAutomationRequest startAutomationRequest)
        {
            // verify the required parameter 'listId' is set
            if (listId == null)
                throw new ApiException(400, "Missing required parameter 'listId' when calling ContactsApi->ActionStartAutomation");
            // verify the required parameter 'startAutomationRequest' is set
            if (startAutomationRequest == null)
                throw new ApiException(400, "Missing required parameter 'startAutomationRequest' when calling ContactsApi->ActionStartAutomation");

            var localVarPath = "/lists/{list_id}/contacts/actions/start-automation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (listId != null) localVarPathParams.Add("list_id", this.Configuration.ApiClient.ParameterToString(listId)); // path parameter
            if (startAutomationRequest != null && startAutomationRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(startAutomationRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = startAutomationRequest; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ActionStartAutomation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StartAutomationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StartAutomationResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(StartAutomationResponse)));
        }

        /// <summary>
        /// Unsubscribes contacts Unsubscribes contacts
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">ID of the List</param>
        /// <param name="removeRequest">Parameters for the contact to unsubscribe</param>
        /// <returns>RemoveResponse</returns>
        public RemoveResponse ActionUnsubscribeContact (int? listId, RemoveRequest removeRequest)
        {
             ApiResponse<RemoveResponse> localVarResponse = ActionUnsubscribeContactWithHttpInfo(listId, removeRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Unsubscribes contacts Unsubscribes contacts
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">ID of the List</param>
        /// <param name="removeRequest">Parameters for the contact to unsubscribe</param>
        /// <returns>ApiResponse of RemoveResponse</returns>
        public ApiResponse< RemoveResponse > ActionUnsubscribeContactWithHttpInfo (int? listId, RemoveRequest removeRequest)
        {
            // verify the required parameter 'listId' is set
            if (listId == null)
                throw new ApiException(400, "Missing required parameter 'listId' when calling ContactsApi->ActionUnsubscribeContact");
            // verify the required parameter 'removeRequest' is set
            if (removeRequest == null)
                throw new ApiException(400, "Missing required parameter 'removeRequest' when calling ContactsApi->ActionUnsubscribeContact");

            var localVarPath = "/lists/{list_id}/contacts/actions/unsubscribe";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (listId != null) localVarPathParams.Add("list_id", this.Configuration.ApiClient.ParameterToString(listId)); // path parameter
            if (removeRequest != null && removeRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(removeRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = removeRequest; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ActionUnsubscribeContact", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RemoveResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RemoveResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RemoveResponse)));
        }

        /// <summary>
        /// Unsubscribes contacts Unsubscribes contacts
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">ID of the List</param>
        /// <param name="removeRequest">Parameters for the contact to unsubscribe</param>
        /// <returns>Task of RemoveResponse</returns>
        public async System.Threading.Tasks.Task<RemoveResponse> ActionUnsubscribeContactAsync (int? listId, RemoveRequest removeRequest)
        {
             ApiResponse<RemoveResponse> localVarResponse = await ActionUnsubscribeContactAsyncWithHttpInfo(listId, removeRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Unsubscribes contacts Unsubscribes contacts
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">ID of the List</param>
        /// <param name="removeRequest">Parameters for the contact to unsubscribe</param>
        /// <returns>Task of ApiResponse (RemoveResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RemoveResponse>> ActionUnsubscribeContactAsyncWithHttpInfo (int? listId, RemoveRequest removeRequest)
        {
            // verify the required parameter 'listId' is set
            if (listId == null)
                throw new ApiException(400, "Missing required parameter 'listId' when calling ContactsApi->ActionUnsubscribeContact");
            // verify the required parameter 'removeRequest' is set
            if (removeRequest == null)
                throw new ApiException(400, "Missing required parameter 'removeRequest' when calling ContactsApi->ActionUnsubscribeContact");

            var localVarPath = "/lists/{list_id}/contacts/actions/unsubscribe";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (listId != null) localVarPathParams.Add("list_id", this.Configuration.ApiClient.ParameterToString(listId)); // path parameter
            if (removeRequest != null && removeRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(removeRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = removeRequest; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ActionUnsubscribeContact", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RemoveResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RemoveResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RemoveResponse)));
        }

        /// <summary>
        /// Create new contact Create a new contact
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">ID of the list where the contact belongs</param>
        /// <param name="contactBaseExtra">Parameters for the Contact</param>
        /// <returns>CreateContactResponse</returns>
        public CreateContactResponse CreateContact (int? listId, ContactBaseExtra contactBaseExtra)
        {
             ApiResponse<CreateContactResponse> localVarResponse = CreateContactWithHttpInfo(listId, contactBaseExtra);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create new contact Create a new contact
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">ID of the list where the contact belongs</param>
        /// <param name="contactBaseExtra">Parameters for the Contact</param>
        /// <returns>ApiResponse of CreateContactResponse</returns>
        public ApiResponse< CreateContactResponse > CreateContactWithHttpInfo (int? listId, ContactBaseExtra contactBaseExtra)
        {
            // verify the required parameter 'listId' is set
            if (listId == null)
                throw new ApiException(400, "Missing required parameter 'listId' when calling ContactsApi->CreateContact");
            // verify the required parameter 'contactBaseExtra' is set
            if (contactBaseExtra == null)
                throw new ApiException(400, "Missing required parameter 'contactBaseExtra' when calling ContactsApi->CreateContact");

            var localVarPath = "/lists/{list_id}/contacts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (listId != null) localVarPathParams.Add("list_id", this.Configuration.ApiClient.ParameterToString(listId)); // path parameter
            if (contactBaseExtra != null && contactBaseExtra.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(contactBaseExtra); // http body (model) parameter
            }
            else
            {
                localVarPostBody = contactBaseExtra; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateContact", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreateContactResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CreateContactResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateContactResponse)));
        }

        /// <summary>
        /// Create new contact Create a new contact
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">ID of the list where the contact belongs</param>
        /// <param name="contactBaseExtra">Parameters for the Contact</param>
        /// <returns>Task of CreateContactResponse</returns>
        public async System.Threading.Tasks.Task<CreateContactResponse> CreateContactAsync (int? listId, ContactBaseExtra contactBaseExtra)
        {
             ApiResponse<CreateContactResponse> localVarResponse = await CreateContactAsyncWithHttpInfo(listId, contactBaseExtra);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create new contact Create a new contact
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">ID of the list where the contact belongs</param>
        /// <param name="contactBaseExtra">Parameters for the Contact</param>
        /// <returns>Task of ApiResponse (CreateContactResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CreateContactResponse>> CreateContactAsyncWithHttpInfo (int? listId, ContactBaseExtra contactBaseExtra)
        {
            // verify the required parameter 'listId' is set
            if (listId == null)
                throw new ApiException(400, "Missing required parameter 'listId' when calling ContactsApi->CreateContact");
            // verify the required parameter 'contactBaseExtra' is set
            if (contactBaseExtra == null)
                throw new ApiException(400, "Missing required parameter 'contactBaseExtra' when calling ContactsApi->CreateContact");

            var localVarPath = "/lists/{list_id}/contacts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (listId != null) localVarPathParams.Add("list_id", this.Configuration.ApiClient.ParameterToString(listId)); // path parameter
            if (contactBaseExtra != null && contactBaseExtra.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(contactBaseExtra); // http body (model) parameter
            }
            else
            {
                localVarPostBody = contactBaseExtra; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateContact", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreateContactResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CreateContactResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateContactResponse)));
        }

        /// <summary>
        /// Get all contact activities Returns all contact activities
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">ID of the Contact</param>
        /// <param name="listId">ID of the List</param>
        /// <param name="offset">Element offset (starting at zero for the first element) (optional)</param>
        /// <param name="limit">Number of items to return (optional, default to 10)</param>
        /// <param name="dateMin">Start date (optional)</param>
        /// <param name="dateMax">End date (optional)</param>
        /// <returns>ActivityCollection</returns>
        public ActivityCollection GetAllContactActivities (string contactId, int? listId, int? offset = null, int? limit = null, DateTime? dateMin = null, DateTime? dateMax = null)
        {
             ApiResponse<ActivityCollection> localVarResponse = GetAllContactActivitiesWithHttpInfo(contactId, listId, offset, limit, dateMin, dateMax);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all contact activities Returns all contact activities
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">ID of the Contact</param>
        /// <param name="listId">ID of the List</param>
        /// <param name="offset">Element offset (starting at zero for the first element) (optional)</param>
        /// <param name="limit">Number of items to return (optional, default to 10)</param>
        /// <param name="dateMin">Start date (optional)</param>
        /// <param name="dateMax">End date (optional)</param>
        /// <returns>ApiResponse of ActivityCollection</returns>
        public ApiResponse< ActivityCollection > GetAllContactActivitiesWithHttpInfo (string contactId, int? listId, int? offset = null, int? limit = null, DateTime? dateMin = null, DateTime? dateMax = null)
        {
            // verify the required parameter 'contactId' is set
            if (contactId == null)
                throw new ApiException(400, "Missing required parameter 'contactId' when calling ContactsApi->GetAllContactActivities");
            // verify the required parameter 'listId' is set
            if (listId == null)
                throw new ApiException(400, "Missing required parameter 'listId' when calling ContactsApi->GetAllContactActivities");

            var localVarPath = "/lists/{list_id}/contacts/{contact_id}/activities";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contactId != null) localVarPathParams.Add("contact_id", this.Configuration.ApiClient.ParameterToString(contactId)); // path parameter
            if (listId != null) localVarPathParams.Add("list_id", this.Configuration.ApiClient.ParameterToString(listId)); // path parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (dateMin != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "date_min", dateMin)); // query parameter
            if (dateMax != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "date_max", dateMax)); // query parameter

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllContactActivities", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ActivityCollection>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ActivityCollection) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ActivityCollection)));
        }

        /// <summary>
        /// Get all contact activities Returns all contact activities
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">ID of the Contact</param>
        /// <param name="listId">ID of the List</param>
        /// <param name="offset">Element offset (starting at zero for the first element) (optional)</param>
        /// <param name="limit">Number of items to return (optional, default to 10)</param>
        /// <param name="dateMin">Start date (optional)</param>
        /// <param name="dateMax">End date (optional)</param>
        /// <returns>Task of ActivityCollection</returns>
        public async System.Threading.Tasks.Task<ActivityCollection> GetAllContactActivitiesAsync (string contactId, int? listId, int? offset = null, int? limit = null, DateTime? dateMin = null, DateTime? dateMax = null)
        {
             ApiResponse<ActivityCollection> localVarResponse = await GetAllContactActivitiesAsyncWithHttpInfo(contactId, listId, offset, limit, dateMin, dateMax);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all contact activities Returns all contact activities
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">ID of the Contact</param>
        /// <param name="listId">ID of the List</param>
        /// <param name="offset">Element offset (starting at zero for the first element) (optional)</param>
        /// <param name="limit">Number of items to return (optional, default to 10)</param>
        /// <param name="dateMin">Start date (optional)</param>
        /// <param name="dateMax">End date (optional)</param>
        /// <returns>Task of ApiResponse (ActivityCollection)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ActivityCollection>> GetAllContactActivitiesAsyncWithHttpInfo (string contactId, int? listId, int? offset = null, int? limit = null, DateTime? dateMin = null, DateTime? dateMax = null)
        {
            // verify the required parameter 'contactId' is set
            if (contactId == null)
                throw new ApiException(400, "Missing required parameter 'contactId' when calling ContactsApi->GetAllContactActivities");
            // verify the required parameter 'listId' is set
            if (listId == null)
                throw new ApiException(400, "Missing required parameter 'listId' when calling ContactsApi->GetAllContactActivities");

            var localVarPath = "/lists/{list_id}/contacts/{contact_id}/activities";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contactId != null) localVarPathParams.Add("contact_id", this.Configuration.ApiClient.ParameterToString(contactId)); // path parameter
            if (listId != null) localVarPathParams.Add("list_id", this.Configuration.ApiClient.ParameterToString(listId)); // path parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (dateMin != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "date_min", dateMin)); // query parameter
            if (dateMax != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "date_max", dateMax)); // query parameter

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllContactActivities", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ActivityCollection>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ActivityCollection) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ActivityCollection)));
        }

        /// <summary>
        /// Get all contacts Returns all contacts
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">ID of the List</param>
        /// <param name="offset">Element offset (starting at zero for the first element) (optional)</param>
        /// <param name="limit">Number of items to return (optional, default to 10)</param>
        /// <returns>ContactCollection</returns>
        public ContactCollection GetAllContacts (int? listId, int? offset = null, int? limit = null)
        {
             ApiResponse<ContactCollection> localVarResponse = GetAllContactsWithHttpInfo(listId, offset, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all contacts Returns all contacts
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">ID of the List</param>
        /// <param name="offset">Element offset (starting at zero for the first element) (optional)</param>
        /// <param name="limit">Number of items to return (optional, default to 10)</param>
        /// <returns>ApiResponse of ContactCollection</returns>
        public ApiResponse< ContactCollection > GetAllContactsWithHttpInfo (int? listId, int? offset = null, int? limit = null)
        {
            // verify the required parameter 'listId' is set
            if (listId == null)
                throw new ApiException(400, "Missing required parameter 'listId' when calling ContactsApi->GetAllContacts");

            var localVarPath = "/lists/{list_id}/contacts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (listId != null) localVarPathParams.Add("list_id", this.Configuration.ApiClient.ParameterToString(listId)); // path parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllContacts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ContactCollection>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ContactCollection) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ContactCollection)));
        }

        /// <summary>
        /// Get all contacts Returns all contacts
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">ID of the List</param>
        /// <param name="offset">Element offset (starting at zero for the first element) (optional)</param>
        /// <param name="limit">Number of items to return (optional, default to 10)</param>
        /// <returns>Task of ContactCollection</returns>
        public async System.Threading.Tasks.Task<ContactCollection> GetAllContactsAsync (int? listId, int? offset = null, int? limit = null)
        {
             ApiResponse<ContactCollection> localVarResponse = await GetAllContactsAsyncWithHttpInfo(listId, offset, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all contacts Returns all contacts
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">ID of the List</param>
        /// <param name="offset">Element offset (starting at zero for the first element) (optional)</param>
        /// <param name="limit">Number of items to return (optional, default to 10)</param>
        /// <returns>Task of ApiResponse (ContactCollection)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ContactCollection>> GetAllContactsAsyncWithHttpInfo (int? listId, int? offset = null, int? limit = null)
        {
            // verify the required parameter 'listId' is set
            if (listId == null)
                throw new ApiException(400, "Missing required parameter 'listId' when calling ContactsApi->GetAllContacts");

            var localVarPath = "/lists/{list_id}/contacts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (listId != null) localVarPathParams.Add("list_id", this.Configuration.ApiClient.ParameterToString(listId)); // path parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllContacts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ContactCollection>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ContactCollection) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ContactCollection)));
        }

        /// <summary>
        /// Get contact Returns contact information given its ID
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">ID of the Contact</param>
        /// <param name="listId">ID of the List</param>
        /// <returns>ComplexContact</returns>
        public ComplexContact GetContact (string contactId, int? listId)
        {
             ApiResponse<ComplexContact> localVarResponse = GetContactWithHttpInfo(contactId, listId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get contact Returns contact information given its ID
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">ID of the Contact</param>
        /// <param name="listId">ID of the List</param>
        /// <returns>ApiResponse of ComplexContact</returns>
        public ApiResponse< ComplexContact > GetContactWithHttpInfo (string contactId, int? listId)
        {
            // verify the required parameter 'contactId' is set
            if (contactId == null)
                throw new ApiException(400, "Missing required parameter 'contactId' when calling ContactsApi->GetContact");
            // verify the required parameter 'listId' is set
            if (listId == null)
                throw new ApiException(400, "Missing required parameter 'listId' when calling ContactsApi->GetContact");

            var localVarPath = "/lists/{list_id}/contacts/{contact_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contactId != null) localVarPathParams.Add("contact_id", this.Configuration.ApiClient.ParameterToString(contactId)); // path parameter
            if (listId != null) localVarPathParams.Add("list_id", this.Configuration.ApiClient.ParameterToString(listId)); // path parameter

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetContact", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ComplexContact>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ComplexContact) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ComplexContact)));
        }

        /// <summary>
        /// Get contact Returns contact information given its ID
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">ID of the Contact</param>
        /// <param name="listId">ID of the List</param>
        /// <returns>Task of ComplexContact</returns>
        public async System.Threading.Tasks.Task<ComplexContact> GetContactAsync (string contactId, int? listId)
        {
             ApiResponse<ComplexContact> localVarResponse = await GetContactAsyncWithHttpInfo(contactId, listId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get contact Returns contact information given its ID
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">ID of the Contact</param>
        /// <param name="listId">ID of the List</param>
        /// <returns>Task of ApiResponse (ComplexContact)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ComplexContact>> GetContactAsyncWithHttpInfo (string contactId, int? listId)
        {
            // verify the required parameter 'contactId' is set
            if (contactId == null)
                throw new ApiException(400, "Missing required parameter 'contactId' when calling ContactsApi->GetContact");
            // verify the required parameter 'listId' is set
            if (listId == null)
                throw new ApiException(400, "Missing required parameter 'listId' when calling ContactsApi->GetContact");

            var localVarPath = "/lists/{list_id}/contacts/{contact_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contactId != null) localVarPathParams.Add("contact_id", this.Configuration.ApiClient.ParameterToString(contactId)); // path parameter
            if (listId != null) localVarPathParams.Add("list_id", this.Configuration.ApiClient.ParameterToString(listId)); // path parameter

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetContact", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ComplexContact>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ComplexContact) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ComplexContact)));
        }

        /// <summary>
        /// Update a specific contact Update contact
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">ID of the Contact</param>
        /// <param name="listId">ID of the List</param>
        /// <param name="contactBaseStatusExtra">Parameters for the contact</param>
        /// <returns>CreateContactResponse</returns>
        public CreateContactResponse PatchContact (string contactId, int? listId, ContactBaseStatusExtra contactBaseStatusExtra)
        {
             ApiResponse<CreateContactResponse> localVarResponse = PatchContactWithHttpInfo(contactId, listId, contactBaseStatusExtra);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a specific contact Update contact
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">ID of the Contact</param>
        /// <param name="listId">ID of the List</param>
        /// <param name="contactBaseStatusExtra">Parameters for the contact</param>
        /// <returns>ApiResponse of CreateContactResponse</returns>
        public ApiResponse< CreateContactResponse > PatchContactWithHttpInfo (string contactId, int? listId, ContactBaseStatusExtra contactBaseStatusExtra)
        {
            // verify the required parameter 'contactId' is set
            if (contactId == null)
                throw new ApiException(400, "Missing required parameter 'contactId' when calling ContactsApi->PatchContact");
            // verify the required parameter 'listId' is set
            if (listId == null)
                throw new ApiException(400, "Missing required parameter 'listId' when calling ContactsApi->PatchContact");
            // verify the required parameter 'contactBaseStatusExtra' is set
            if (contactBaseStatusExtra == null)
                throw new ApiException(400, "Missing required parameter 'contactBaseStatusExtra' when calling ContactsApi->PatchContact");

            var localVarPath = "/lists/{list_id}/contacts/{contact_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contactId != null) localVarPathParams.Add("contact_id", this.Configuration.ApiClient.ParameterToString(contactId)); // path parameter
            if (listId != null) localVarPathParams.Add("list_id", this.Configuration.ApiClient.ParameterToString(listId)); // path parameter
            if (contactBaseStatusExtra != null && contactBaseStatusExtra.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(contactBaseStatusExtra); // http body (model) parameter
            }
            else
            {
                localVarPostBody = contactBaseStatusExtra; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PatchContact", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreateContactResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CreateContactResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateContactResponse)));
        }

        /// <summary>
        /// Update a specific contact Update contact
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">ID of the Contact</param>
        /// <param name="listId">ID of the List</param>
        /// <param name="contactBaseStatusExtra">Parameters for the contact</param>
        /// <returns>Task of CreateContactResponse</returns>
        public async System.Threading.Tasks.Task<CreateContactResponse> PatchContactAsync (string contactId, int? listId, ContactBaseStatusExtra contactBaseStatusExtra)
        {
             ApiResponse<CreateContactResponse> localVarResponse = await PatchContactAsyncWithHttpInfo(contactId, listId, contactBaseStatusExtra);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a specific contact Update contact
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">ID of the Contact</param>
        /// <param name="listId">ID of the List</param>
        /// <param name="contactBaseStatusExtra">Parameters for the contact</param>
        /// <returns>Task of ApiResponse (CreateContactResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CreateContactResponse>> PatchContactAsyncWithHttpInfo (string contactId, int? listId, ContactBaseStatusExtra contactBaseStatusExtra)
        {
            // verify the required parameter 'contactId' is set
            if (contactId == null)
                throw new ApiException(400, "Missing required parameter 'contactId' when calling ContactsApi->PatchContact");
            // verify the required parameter 'listId' is set
            if (listId == null)
                throw new ApiException(400, "Missing required parameter 'listId' when calling ContactsApi->PatchContact");
            // verify the required parameter 'contactBaseStatusExtra' is set
            if (contactBaseStatusExtra == null)
                throw new ApiException(400, "Missing required parameter 'contactBaseStatusExtra' when calling ContactsApi->PatchContact");

            var localVarPath = "/lists/{list_id}/contacts/{contact_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contactId != null) localVarPathParams.Add("contact_id", this.Configuration.ApiClient.ParameterToString(contactId)); // path parameter
            if (listId != null) localVarPathParams.Add("list_id", this.Configuration.ApiClient.ParameterToString(listId)); // path parameter
            if (contactBaseStatusExtra != null && contactBaseStatusExtra.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(contactBaseStatusExtra); // http body (model) parameter
            }
            else
            {
                localVarPostBody = contactBaseStatusExtra; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PatchContact", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreateContactResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CreateContactResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateContactResponse)));
        }

    }
}
