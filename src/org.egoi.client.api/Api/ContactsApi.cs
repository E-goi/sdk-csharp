/* 
 * APIv3 (New)
 *
 *  # Introduction This is our new version of API. We invite you to start using it and give us your feedback # Getting Started  E-goi can be integrated with many environments and programming languages via our REST API. We've created a developer focused portal to give your organization a clear and quick overview of how to integrate with E-goi. The developer portal focuses on scenarios for integration and flow of events. We recommend familiarizing yourself with all of the content in the developer portal, before start using our rest API.   The E-goi  APIv3 is served over HTTPS. To ensure data privacy, unencrypted HTTP is not supported.  Request data is passed to the API by POSTing JSON objects to the API endpoints with the appropriate parameters.   BaseURL = api.egoiapp.com  # RESTful Services This API supports 5 HTTP methods:  * <b>GET</b>: The HTTP GET method is used to **read** (or retrieve) a representation of a resource. * <b>POST</b>: The POST verb is most-often utilized to **create** new resources. * <b>PATCH</b>: PATCH is used for **modify** capabilities. The PATCH request only needs to contain the changes to the resource, not the complete resource * <b>PUT</b>: PUT is most-often utilized for **update** capabilities, PUT-ing to a known resource URI with the request body containing the newly-updated representation of the original resource. * <b>DELETE</b>: DELETE is pretty easy to understand. It is used to **delete** a resource identified by a URI.  # Authentication   We use a custom authentication method, you will need a apikey that you can find in your account settings. Below you will see a curl example to get your account information:  #!/bin/bash  curl -X GET 'https://api.egoiapp.com/my-account' \\  -H 'accept: application/json' \\  -H 'Apikey: <YOUR_APY_KEY>'  Here you can see a curl Post example with authentication:  #!/bin/bash  curl -X POST 'http://api.egoiapp.com/tags' \\  -H 'accept: application/json' \\  -H 'Apikey: <YOUR_APY_KEY>' \\  -H 'Content-Type: application/json' \\  -d '{`name`:`Your custom tag`,`color`:`#FFFFFF`}'  # SDK Get started quickly with E-goi with our integration tools. Our SDK is a modern open source library that makes it easy to integrate your application with E-goi services.  * <a href='https://github.com/E-goi/sdk-java'>Java</a>  * <a href='https://github.com/E-goi/sdk-php'>PHP</a>  * <a href='https://github.com/E-goi/sdk-python'>Python</a>  * <a href='https://github.com/E-goi/sdk-ruby'>Ruby</a>  * <a href='https://github.com/E-goi/sdk-javascript'>Javascript</a>  * <a href='https://github.com/E-goi/sdk-csharp'>C#</a>  # Stream Limits Stream limits are security mesures we have to make sure our API have a fair use policy, for this reason, any request that creates or modifies data (**POST**, **PATCH** and **PUT**) is limited to a maximum of **20MB** of content length. If you arrive to this limit in one of your request, you'll receive a HTTP code **413 (Request Entity Too Large)** and the request will be ignored. To avoid this error in importation's requests, it's advised the request's division in batches that have each one less than 20MB.  # Timeouts Timeouts set a maximum waiting time on a request's response. Our API, sets a default timeout for each request and when breached, you'll receive an HTTP **408 (Request Timeout)** error code. You should take into consideration that response times can vary widely based on the complexity of the request, amount of data being analyzed, and the load on the system and workspace at the time of the query. When dealing with such errors, you should first attempt to reduce the complexity and amount of data under analysis, and only then, if problems are still occurring ask for support.  For all these reasons, the default timeout for each request is **10 Seconds** and any request that creates or modifies data (**POST**, **PATCH** and **PUT**) will have a timeout of **60 Seconds**. Specific timeouts may exist for specific requests, these can be found in the request's documentation.  <security-definitions/>
 *
 * OpenAPI spec version: 3.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using org.egoi.client.api.Client;
using org.egoi.client.api.Model;

namespace org.egoi.client.api.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IContactsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Activate contacts
        /// </summary>
        /// <remarks>
        /// Activates a collection of contacts (does not apply to removed contacts)
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">ID of the List</param>
        /// <param name="activateContactsRequest">Parameters for the request</param>
        /// <returns>AcceptedResponse</returns>
        AcceptedResponse ActionActivateContacts (int? listId, ActivateContactsRequest activateContactsRequest);

        /// <summary>
        /// Activate contacts
        /// </summary>
        /// <remarks>
        /// Activates a collection of contacts (does not apply to removed contacts)
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">ID of the List</param>
        /// <param name="activateContactsRequest">Parameters for the request</param>
        /// <returns>ApiResponse of AcceptedResponse</returns>
        ApiResponse<AcceptedResponse> ActionActivateContactsWithHttpInfo (int? listId, ActivateContactsRequest activateContactsRequest);
        /// <summary>
        /// Attach tag to contact
        /// </summary>
        /// <remarks>
        /// Attaches a tag to the provided contacts. &lt;br&gt;***Note:***&lt;br&gt; If you provide the array of **contacts** there will be a maximum limit of 1000 contacts in the payload, but if you provide a **segment_id** instead of     the array of contacts you will get an asynchronous response with the status code 202
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">ID of the List</param>
        /// <param name="attachTagRequest">Parameters for the Tag</param>
        /// <returns>AttachTagResponse</returns>
        AttachTagResponse ActionAttachTag (int? listId, AttachTagRequest attachTagRequest);

        /// <summary>
        /// Attach tag to contact
        /// </summary>
        /// <remarks>
        /// Attaches a tag to the provided contacts. &lt;br&gt;***Note:***&lt;br&gt; If you provide the array of **contacts** there will be a maximum limit of 1000 contacts in the payload, but if you provide a **segment_id** instead of     the array of contacts you will get an asynchronous response with the status code 202
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">ID of the List</param>
        /// <param name="attachTagRequest">Parameters for the Tag</param>
        /// <returns>ApiResponse of AttachTagResponse</returns>
        ApiResponse<AttachTagResponse> ActionAttachTagWithHttpInfo (int? listId, AttachTagRequest attachTagRequest);
        /// <summary>
        /// Deactivate contacts
        /// </summary>
        /// <remarks>
        /// Deactivates a collection of contacts (does not apply to removed contacts)
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">ID of the List</param>
        /// <param name="deactivateContactsRequest">Parameters for the request</param>
        /// <returns>AcceptedResponse</returns>
        AcceptedResponse ActionDeactivateContacts (int? listId, DeactivateContactsRequest deactivateContactsRequest);

        /// <summary>
        /// Deactivate contacts
        /// </summary>
        /// <remarks>
        /// Deactivates a collection of contacts (does not apply to removed contacts)
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">ID of the List</param>
        /// <param name="deactivateContactsRequest">Parameters for the request</param>
        /// <returns>ApiResponse of AcceptedResponse</returns>
        ApiResponse<AcceptedResponse> ActionDeactivateContactsWithHttpInfo (int? listId, DeactivateContactsRequest deactivateContactsRequest);
        /// <summary>
        /// Detach tag to contact
        /// </summary>
        /// <remarks>
        /// Detach a tag to the provided contacts
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">ID of the List</param>
        /// <param name="attachTagRequest">Parameters for the Tag</param>
        /// <returns>AttachTagResponse</returns>
        AttachTagResponse ActionDetachTag (int? listId, AttachTagRequest attachTagRequest);

        /// <summary>
        /// Detach tag to contact
        /// </summary>
        /// <remarks>
        /// Detach a tag to the provided contacts
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">ID of the List</param>
        /// <param name="attachTagRequest">Parameters for the Tag</param>
        /// <returns>ApiResponse of AttachTagResponse</returns>
        ApiResponse<AttachTagResponse> ActionDetachTagWithHttpInfo (int? listId, AttachTagRequest attachTagRequest);
        /// <summary>
        /// Exports a list of contacts
        /// </summary>
        /// <remarks>
        /// Exports a list of contacts to the desired callback url
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">ID of the List</param>
        /// <param name="contactExportRequest">Parameters for export</param>
        /// <returns>AcceptedResponse</returns>
        AcceptedResponse ActionExportContacts (int? listId, ContactExportRequest contactExportRequest);

        /// <summary>
        /// Exports a list of contacts
        /// </summary>
        /// <remarks>
        /// Exports a list of contacts to the desired callback url
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">ID of the List</param>
        /// <param name="contactExportRequest">Parameters for export</param>
        /// <returns>ApiResponse of AcceptedResponse</returns>
        ApiResponse<AcceptedResponse> ActionExportContactsWithHttpInfo (int? listId, ContactExportRequest contactExportRequest);
        /// <summary>
        /// Forget contacts
        /// </summary>
        /// <remarks>
        /// Forgets a list of contacts to the desired callback url
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">ID of the List</param>
        /// <param name="contactForgetRequest">Parameters for the action</param>
        /// <returns>AcceptedResponse</returns>
        AcceptedResponse ActionForgetContacts (int? listId, ContactForgetRequest contactForgetRequest);

        /// <summary>
        /// Forget contacts
        /// </summary>
        /// <remarks>
        /// Forgets a list of contacts to the desired callback url
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">ID of the List</param>
        /// <param name="contactForgetRequest">Parameters for the action</param>
        /// <returns>ApiResponse of AcceptedResponse</returns>
        ApiResponse<AcceptedResponse> ActionForgetContactsWithHttpInfo (int? listId, ContactForgetRequest contactForgetRequest);
        /// <summary>
        /// Import collection of contacts
        /// </summary>
        /// <remarks>
        /// Imports a collection of contacts &lt;/br&gt;      **DISCLAIMER:** stream limits applied. [view here](#section/Stream-Limits &#39;Stream Limits&#39;)&lt;br&gt; ***Note:*** minimum of 2 contacts to use this method. [use Create new contact method instead](#operation/createContact &#39;Create new contact&#39;)
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">ID of the List</param>
        /// <param name="importBulkRequest">Parameters for the bulk import</param>
        /// <returns>AcceptedResponse</returns>
        AcceptedResponse ActionImportBulk (int? listId, ImportBulkRequest importBulkRequest);

        /// <summary>
        /// Import collection of contacts
        /// </summary>
        /// <remarks>
        /// Imports a collection of contacts &lt;/br&gt;      **DISCLAIMER:** stream limits applied. [view here](#section/Stream-Limits &#39;Stream Limits&#39;)&lt;br&gt; ***Note:*** minimum of 2 contacts to use this method. [use Create new contact method instead](#operation/createContact &#39;Create new contact&#39;)
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">ID of the List</param>
        /// <param name="importBulkRequest">Parameters for the bulk import</param>
        /// <returns>ApiResponse of AcceptedResponse</returns>
        ApiResponse<AcceptedResponse> ActionImportBulkWithHttpInfo (int? listId, ImportBulkRequest importBulkRequest);
        /// <summary>
        /// Start automation
        /// </summary>
        /// <remarks>
        /// Start automation to the provided contacts
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">ID of the List</param>
        /// <param name="startAutomationRequest">Parameters for the operation to start automation</param>
        /// <returns>StartAutomationResponse</returns>
        StartAutomationResponse ActionStartAutomation (int? listId, StartAutomationRequest startAutomationRequest);

        /// <summary>
        /// Start automation
        /// </summary>
        /// <remarks>
        /// Start automation to the provided contacts
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">ID of the List</param>
        /// <param name="startAutomationRequest">Parameters for the operation to start automation</param>
        /// <returns>ApiResponse of StartAutomationResponse</returns>
        ApiResponse<StartAutomationResponse> ActionStartAutomationWithHttpInfo (int? listId, StartAutomationRequest startAutomationRequest);
        /// <summary>
        /// Unsubscribes contacts
        /// </summary>
        /// <remarks>
        /// Unsubscribes contacts
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">ID of the List</param>
        /// <param name="removeRequest">Parameters for the contact to unsubscribe</param>
        /// <returns>RemoveResponse</returns>
        RemoveResponse ActionUnsubscribeContact (int? listId, RemoveRequest removeRequest);

        /// <summary>
        /// Unsubscribes contacts
        /// </summary>
        /// <remarks>
        /// Unsubscribes contacts
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">ID of the List</param>
        /// <param name="removeRequest">Parameters for the contact to unsubscribe</param>
        /// <returns>ApiResponse of RemoveResponse</returns>
        ApiResponse<RemoveResponse> ActionUnsubscribeContactWithHttpInfo (int? listId, RemoveRequest removeRequest);
        /// <summary>
        /// Create new contact
        /// </summary>
        /// <remarks>
        /// Create a new contact
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">ID of the list where the contact belongs</param>
        /// <param name="contactBaseExtra">Parameters for the Contact</param>
        /// <returns>CreateContactResponse</returns>
        CreateContactResponse CreateContact (int? listId, ContactBaseExtra contactBaseExtra);

        /// <summary>
        /// Create new contact
        /// </summary>
        /// <remarks>
        /// Create a new contact
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">ID of the list where the contact belongs</param>
        /// <param name="contactBaseExtra">Parameters for the Contact</param>
        /// <returns>ApiResponse of CreateContactResponse</returns>
        ApiResponse<CreateContactResponse> CreateContactWithHttpInfo (int? listId, ContactBaseExtra contactBaseExtra);
        /// <summary>
        /// Get all contact activities
        /// </summary>
        /// <remarks>
        /// Returns all contact activities
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">ID of the Contact</param>
        /// <param name="listId">ID of the List</param>
        /// <param name="offset">Element offset (starting at zero for the first element) (optional)</param>
        /// <param name="limit">Number of items to return (optional, default to 10)</param>
        /// <param name="dateMin">Start date (optional)</param>
        /// <param name="dateMax">End date (optional)</param>
        /// <returns>ActivityCollection</returns>
        ActivityCollection GetAllContactActivities (string contactId, int? listId, int? offset = null, int? limit = null, DateTime? dateMin = null, DateTime? dateMax = null);

        /// <summary>
        /// Get all contact activities
        /// </summary>
        /// <remarks>
        /// Returns all contact activities
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">ID of the Contact</param>
        /// <param name="listId">ID of the List</param>
        /// <param name="offset">Element offset (starting at zero for the first element) (optional)</param>
        /// <param name="limit">Number of items to return (optional, default to 10)</param>
        /// <param name="dateMin">Start date (optional)</param>
        /// <param name="dateMax">End date (optional)</param>
        /// <returns>ApiResponse of ActivityCollection</returns>
        ApiResponse<ActivityCollection> GetAllContactActivitiesWithHttpInfo (string contactId, int? listId, int? offset = null, int? limit = null, DateTime? dateMin = null, DateTime? dateMax = null);
        /// <summary>
        /// Get all contacts
        /// </summary>
        /// <remarks>
        /// Returns all contacts
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">ID of the List</param>
        /// <param name="offset">Element offset (starting at zero for the first element) (optional)</param>
        /// <param name="limit">Number of items to return (optional, default to 10)</param>
        /// <param name="firstName">First name of the contacts to return (optional)</param>
        /// <param name="lastName">Last name of the contacts to return (optional)</param>
        /// <param name="email">Email of the contacts to return (optional)</param>
        /// <param name="emailStatus">EmailStatus of the contacts to return (optional)</param>
        /// <param name="cellphone">Cellphone of the contacts to return (optional)</param>
        /// <param name="cellphoneStatus">CellphoneStatus of the contacts to return (optional)</param>
        /// <param name="phone">Phone of the contacts to return (optional)</param>
        /// <param name="phoneStatus">PhoneStatus of the contacts to return (optional)</param>
        /// <param name="birthDate">Birth date of the contacts to return (optional)</param>
        /// <param name="language">Language date of the contacts to return (optional)</param>
        /// <param name="extraFieldId">Extra field of contacts, extra_field_id[field_id]&#x3D;value (optional)</param>
        /// <returns>ContactCollection</returns>
        ContactCollection GetAllContacts (int? listId, int? offset = null, int? limit = null, string firstName = null, string lastName = null, string email = null, bool? emailStatus = null, string cellphone = null, bool? cellphoneStatus = null, string phone = null, bool? phoneStatus = null, DateTime? birthDate = null, string language = null, List<string> extraFieldId = null);

        /// <summary>
        /// Get all contacts
        /// </summary>
        /// <remarks>
        /// Returns all contacts
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">ID of the List</param>
        /// <param name="offset">Element offset (starting at zero for the first element) (optional)</param>
        /// <param name="limit">Number of items to return (optional, default to 10)</param>
        /// <param name="firstName">First name of the contacts to return (optional)</param>
        /// <param name="lastName">Last name of the contacts to return (optional)</param>
        /// <param name="email">Email of the contacts to return (optional)</param>
        /// <param name="emailStatus">EmailStatus of the contacts to return (optional)</param>
        /// <param name="cellphone">Cellphone of the contacts to return (optional)</param>
        /// <param name="cellphoneStatus">CellphoneStatus of the contacts to return (optional)</param>
        /// <param name="phone">Phone of the contacts to return (optional)</param>
        /// <param name="phoneStatus">PhoneStatus of the contacts to return (optional)</param>
        /// <param name="birthDate">Birth date of the contacts to return (optional)</param>
        /// <param name="language">Language date of the contacts to return (optional)</param>
        /// <param name="extraFieldId">Extra field of contacts, extra_field_id[field_id]&#x3D;value (optional)</param>
        /// <returns>ApiResponse of ContactCollection</returns>
        ApiResponse<ContactCollection> GetAllContactsWithHttpInfo (int? listId, int? offset = null, int? limit = null, string firstName = null, string lastName = null, string email = null, bool? emailStatus = null, string cellphone = null, bool? cellphoneStatus = null, string phone = null, bool? phoneStatus = null, DateTime? birthDate = null, string language = null, List<string> extraFieldId = null);
        /// <summary>
        /// Get all contacts by Segment Id
        /// </summary>
        /// <remarks>
        /// Returns all contacts filtered by Segment Id
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">ID of the List</param>
        /// <param name="segmentId">ID of the Segment</param>
        /// <param name="offset">Element offset (starting at zero for the first element) (optional)</param>
        /// <param name="limit">Number of items to return (optional, default to 10)</param>
        /// <param name="showRemoved">Show removed contacts (optional)</param>
        /// <returns>ContactCollection</returns>
        ContactCollection GetAllContactsBySegment (int? listId, string segmentId, int? offset = null, int? limit = null, bool? showRemoved = null);

        /// <summary>
        /// Get all contacts by Segment Id
        /// </summary>
        /// <remarks>
        /// Returns all contacts filtered by Segment Id
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">ID of the List</param>
        /// <param name="segmentId">ID of the Segment</param>
        /// <param name="offset">Element offset (starting at zero for the first element) (optional)</param>
        /// <param name="limit">Number of items to return (optional, default to 10)</param>
        /// <param name="showRemoved">Show removed contacts (optional)</param>
        /// <returns>ApiResponse of ContactCollection</returns>
        ApiResponse<ContactCollection> GetAllContactsBySegmentWithHttpInfo (int? listId, string segmentId, int? offset = null, int? limit = null, bool? showRemoved = null);
        /// <summary>
        /// Get contact
        /// </summary>
        /// <remarks>
        /// Returns contact information given its ID
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">ID of the Contact</param>
        /// <param name="listId">ID of the List</param>
        /// <returns>ComplexContact</returns>
        ComplexContact GetContact (string contactId, int? listId);

        /// <summary>
        /// Get contact
        /// </summary>
        /// <remarks>
        /// Returns contact information given its ID
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">ID of the Contact</param>
        /// <param name="listId">ID of the List</param>
        /// <returns>ApiResponse of ComplexContact</returns>
        ApiResponse<ComplexContact> GetContactWithHttpInfo (string contactId, int? listId);
        /// <summary>
        /// Update a specific contact
        /// </summary>
        /// <remarks>
        /// Update contact
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">ID of the Contact</param>
        /// <param name="listId">ID of the List</param>
        /// <param name="contactBaseStatusExtra">Parameters for the contact</param>
        /// <returns>CreateContactResponse</returns>
        CreateContactResponse PatchContact (string contactId, int? listId, ContactBaseStatusExtra contactBaseStatusExtra);

        /// <summary>
        /// Update a specific contact
        /// </summary>
        /// <remarks>
        /// Update contact
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">ID of the Contact</param>
        /// <param name="listId">ID of the List</param>
        /// <param name="contactBaseStatusExtra">Parameters for the contact</param>
        /// <returns>ApiResponse of CreateContactResponse</returns>
        ApiResponse<CreateContactResponse> PatchContactWithHttpInfo (string contactId, int? listId, ContactBaseStatusExtra contactBaseStatusExtra);
        /// <summary>
        /// Search contact
        /// </summary>
        /// <remarks>
        /// Searches a contact across all lists and returns a collection of contacts found
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contact">Contact to search</param>
        /// <param name="type">Type of contact to search (defaults to &#39;email&#39;) (optional, default to email)</param>
        /// <returns>InlineResponse200</returns>
        InlineResponse200 SearchContacts (string contact, string type = null);

        /// <summary>
        /// Search contact
        /// </summary>
        /// <remarks>
        /// Searches a contact across all lists and returns a collection of contacts found
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contact">Contact to search</param>
        /// <param name="type">Type of contact to search (defaults to &#39;email&#39;) (optional, default to email)</param>
        /// <returns>ApiResponse of InlineResponse200</returns>
        ApiResponse<InlineResponse200> SearchContactsWithHttpInfo (string contact, string type = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Activate contacts
        /// </summary>
        /// <remarks>
        /// Activates a collection of contacts (does not apply to removed contacts)
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">ID of the List</param>
        /// <param name="activateContactsRequest">Parameters for the request</param>
        /// <returns>Task of AcceptedResponse</returns>
        System.Threading.Tasks.Task<AcceptedResponse> ActionActivateContactsAsync (int? listId, ActivateContactsRequest activateContactsRequest);

        /// <summary>
        /// Activate contacts
        /// </summary>
        /// <remarks>
        /// Activates a collection of contacts (does not apply to removed contacts)
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">ID of the List</param>
        /// <param name="activateContactsRequest">Parameters for the request</param>
        /// <returns>Task of ApiResponse (AcceptedResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AcceptedResponse>> ActionActivateContactsAsyncWithHttpInfo (int? listId, ActivateContactsRequest activateContactsRequest);
        /// <summary>
        /// Attach tag to contact
        /// </summary>
        /// <remarks>
        /// Attaches a tag to the provided contacts. &lt;br&gt;***Note:***&lt;br&gt; If you provide the array of **contacts** there will be a maximum limit of 1000 contacts in the payload, but if you provide a **segment_id** instead of     the array of contacts you will get an asynchronous response with the status code 202
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">ID of the List</param>
        /// <param name="attachTagRequest">Parameters for the Tag</param>
        /// <returns>Task of AttachTagResponse</returns>
        System.Threading.Tasks.Task<AttachTagResponse> ActionAttachTagAsync (int? listId, AttachTagRequest attachTagRequest);

        /// <summary>
        /// Attach tag to contact
        /// </summary>
        /// <remarks>
        /// Attaches a tag to the provided contacts. &lt;br&gt;***Note:***&lt;br&gt; If you provide the array of **contacts** there will be a maximum limit of 1000 contacts in the payload, but if you provide a **segment_id** instead of     the array of contacts you will get an asynchronous response with the status code 202
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">ID of the List</param>
        /// <param name="attachTagRequest">Parameters for the Tag</param>
        /// <returns>Task of ApiResponse (AttachTagResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AttachTagResponse>> ActionAttachTagAsyncWithHttpInfo (int? listId, AttachTagRequest attachTagRequest);
        /// <summary>
        /// Deactivate contacts
        /// </summary>
        /// <remarks>
        /// Deactivates a collection of contacts (does not apply to removed contacts)
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">ID of the List</param>
        /// <param name="deactivateContactsRequest">Parameters for the request</param>
        /// <returns>Task of AcceptedResponse</returns>
        System.Threading.Tasks.Task<AcceptedResponse> ActionDeactivateContactsAsync (int? listId, DeactivateContactsRequest deactivateContactsRequest);

        /// <summary>
        /// Deactivate contacts
        /// </summary>
        /// <remarks>
        /// Deactivates a collection of contacts (does not apply to removed contacts)
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">ID of the List</param>
        /// <param name="deactivateContactsRequest">Parameters for the request</param>
        /// <returns>Task of ApiResponse (AcceptedResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AcceptedResponse>> ActionDeactivateContactsAsyncWithHttpInfo (int? listId, DeactivateContactsRequest deactivateContactsRequest);
        /// <summary>
        /// Detach tag to contact
        /// </summary>
        /// <remarks>
        /// Detach a tag to the provided contacts
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">ID of the List</param>
        /// <param name="attachTagRequest">Parameters for the Tag</param>
        /// <returns>Task of AttachTagResponse</returns>
        System.Threading.Tasks.Task<AttachTagResponse> ActionDetachTagAsync (int? listId, AttachTagRequest attachTagRequest);

        /// <summary>
        /// Detach tag to contact
        /// </summary>
        /// <remarks>
        /// Detach a tag to the provided contacts
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">ID of the List</param>
        /// <param name="attachTagRequest">Parameters for the Tag</param>
        /// <returns>Task of ApiResponse (AttachTagResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AttachTagResponse>> ActionDetachTagAsyncWithHttpInfo (int? listId, AttachTagRequest attachTagRequest);
        /// <summary>
        /// Exports a list of contacts
        /// </summary>
        /// <remarks>
        /// Exports a list of contacts to the desired callback url
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">ID of the List</param>
        /// <param name="contactExportRequest">Parameters for export</param>
        /// <returns>Task of AcceptedResponse</returns>
        System.Threading.Tasks.Task<AcceptedResponse> ActionExportContactsAsync (int? listId, ContactExportRequest contactExportRequest);

        /// <summary>
        /// Exports a list of contacts
        /// </summary>
        /// <remarks>
        /// Exports a list of contacts to the desired callback url
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">ID of the List</param>
        /// <param name="contactExportRequest">Parameters for export</param>
        /// <returns>Task of ApiResponse (AcceptedResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AcceptedResponse>> ActionExportContactsAsyncWithHttpInfo (int? listId, ContactExportRequest contactExportRequest);
        /// <summary>
        /// Forget contacts
        /// </summary>
        /// <remarks>
        /// Forgets a list of contacts to the desired callback url
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">ID of the List</param>
        /// <param name="contactForgetRequest">Parameters for the action</param>
        /// <returns>Task of AcceptedResponse</returns>
        System.Threading.Tasks.Task<AcceptedResponse> ActionForgetContactsAsync (int? listId, ContactForgetRequest contactForgetRequest);

        /// <summary>
        /// Forget contacts
        /// </summary>
        /// <remarks>
        /// Forgets a list of contacts to the desired callback url
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">ID of the List</param>
        /// <param name="contactForgetRequest">Parameters for the action</param>
        /// <returns>Task of ApiResponse (AcceptedResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AcceptedResponse>> ActionForgetContactsAsyncWithHttpInfo (int? listId, ContactForgetRequest contactForgetRequest);
        /// <summary>
        /// Import collection of contacts
        /// </summary>
        /// <remarks>
        /// Imports a collection of contacts &lt;/br&gt;      **DISCLAIMER:** stream limits applied. [view here](#section/Stream-Limits &#39;Stream Limits&#39;)&lt;br&gt; ***Note:*** minimum of 2 contacts to use this method. [use Create new contact method instead](#operation/createContact &#39;Create new contact&#39;)
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">ID of the List</param>
        /// <param name="importBulkRequest">Parameters for the bulk import</param>
        /// <returns>Task of AcceptedResponse</returns>
        System.Threading.Tasks.Task<AcceptedResponse> ActionImportBulkAsync (int? listId, ImportBulkRequest importBulkRequest);

        /// <summary>
        /// Import collection of contacts
        /// </summary>
        /// <remarks>
        /// Imports a collection of contacts &lt;/br&gt;      **DISCLAIMER:** stream limits applied. [view here](#section/Stream-Limits &#39;Stream Limits&#39;)&lt;br&gt; ***Note:*** minimum of 2 contacts to use this method. [use Create new contact method instead](#operation/createContact &#39;Create new contact&#39;)
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">ID of the List</param>
        /// <param name="importBulkRequest">Parameters for the bulk import</param>
        /// <returns>Task of ApiResponse (AcceptedResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AcceptedResponse>> ActionImportBulkAsyncWithHttpInfo (int? listId, ImportBulkRequest importBulkRequest);
        /// <summary>
        /// Start automation
        /// </summary>
        /// <remarks>
        /// Start automation to the provided contacts
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">ID of the List</param>
        /// <param name="startAutomationRequest">Parameters for the operation to start automation</param>
        /// <returns>Task of StartAutomationResponse</returns>
        System.Threading.Tasks.Task<StartAutomationResponse> ActionStartAutomationAsync (int? listId, StartAutomationRequest startAutomationRequest);

        /// <summary>
        /// Start automation
        /// </summary>
        /// <remarks>
        /// Start automation to the provided contacts
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">ID of the List</param>
        /// <param name="startAutomationRequest">Parameters for the operation to start automation</param>
        /// <returns>Task of ApiResponse (StartAutomationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<StartAutomationResponse>> ActionStartAutomationAsyncWithHttpInfo (int? listId, StartAutomationRequest startAutomationRequest);
        /// <summary>
        /// Unsubscribes contacts
        /// </summary>
        /// <remarks>
        /// Unsubscribes contacts
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">ID of the List</param>
        /// <param name="removeRequest">Parameters for the contact to unsubscribe</param>
        /// <returns>Task of RemoveResponse</returns>
        System.Threading.Tasks.Task<RemoveResponse> ActionUnsubscribeContactAsync (int? listId, RemoveRequest removeRequest);

        /// <summary>
        /// Unsubscribes contacts
        /// </summary>
        /// <remarks>
        /// Unsubscribes contacts
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">ID of the List</param>
        /// <param name="removeRequest">Parameters for the contact to unsubscribe</param>
        /// <returns>Task of ApiResponse (RemoveResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RemoveResponse>> ActionUnsubscribeContactAsyncWithHttpInfo (int? listId, RemoveRequest removeRequest);
        /// <summary>
        /// Create new contact
        /// </summary>
        /// <remarks>
        /// Create a new contact
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">ID of the list where the contact belongs</param>
        /// <param name="contactBaseExtra">Parameters for the Contact</param>
        /// <returns>Task of CreateContactResponse</returns>
        System.Threading.Tasks.Task<CreateContactResponse> CreateContactAsync (int? listId, ContactBaseExtra contactBaseExtra);

        /// <summary>
        /// Create new contact
        /// </summary>
        /// <remarks>
        /// Create a new contact
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">ID of the list where the contact belongs</param>
        /// <param name="contactBaseExtra">Parameters for the Contact</param>
        /// <returns>Task of ApiResponse (CreateContactResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateContactResponse>> CreateContactAsyncWithHttpInfo (int? listId, ContactBaseExtra contactBaseExtra);
        /// <summary>
        /// Get all contact activities
        /// </summary>
        /// <remarks>
        /// Returns all contact activities
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">ID of the Contact</param>
        /// <param name="listId">ID of the List</param>
        /// <param name="offset">Element offset (starting at zero for the first element) (optional)</param>
        /// <param name="limit">Number of items to return (optional, default to 10)</param>
        /// <param name="dateMin">Start date (optional)</param>
        /// <param name="dateMax">End date (optional)</param>
        /// <returns>Task of ActivityCollection</returns>
        System.Threading.Tasks.Task<ActivityCollection> GetAllContactActivitiesAsync (string contactId, int? listId, int? offset = null, int? limit = null, DateTime? dateMin = null, DateTime? dateMax = null);

        /// <summary>
        /// Get all contact activities
        /// </summary>
        /// <remarks>
        /// Returns all contact activities
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">ID of the Contact</param>
        /// <param name="listId">ID of the List</param>
        /// <param name="offset">Element offset (starting at zero for the first element) (optional)</param>
        /// <param name="limit">Number of items to return (optional, default to 10)</param>
        /// <param name="dateMin">Start date (optional)</param>
        /// <param name="dateMax">End date (optional)</param>
        /// <returns>Task of ApiResponse (ActivityCollection)</returns>
        System.Threading.Tasks.Task<ApiResponse<ActivityCollection>> GetAllContactActivitiesAsyncWithHttpInfo (string contactId, int? listId, int? offset = null, int? limit = null, DateTime? dateMin = null, DateTime? dateMax = null);
        /// <summary>
        /// Get all contacts
        /// </summary>
        /// <remarks>
        /// Returns all contacts
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">ID of the List</param>
        /// <param name="offset">Element offset (starting at zero for the first element) (optional)</param>
        /// <param name="limit">Number of items to return (optional, default to 10)</param>
        /// <param name="firstName">First name of the contacts to return (optional)</param>
        /// <param name="lastName">Last name of the contacts to return (optional)</param>
        /// <param name="email">Email of the contacts to return (optional)</param>
        /// <param name="emailStatus">EmailStatus of the contacts to return (optional)</param>
        /// <param name="cellphone">Cellphone of the contacts to return (optional)</param>
        /// <param name="cellphoneStatus">CellphoneStatus of the contacts to return (optional)</param>
        /// <param name="phone">Phone of the contacts to return (optional)</param>
        /// <param name="phoneStatus">PhoneStatus of the contacts to return (optional)</param>
        /// <param name="birthDate">Birth date of the contacts to return (optional)</param>
        /// <param name="language">Language date of the contacts to return (optional)</param>
        /// <param name="extraFieldId">Extra field of contacts, extra_field_id[field_id]&#x3D;value (optional)</param>
        /// <returns>Task of ContactCollection</returns>
        System.Threading.Tasks.Task<ContactCollection> GetAllContactsAsync (int? listId, int? offset = null, int? limit = null, string firstName = null, string lastName = null, string email = null, bool? emailStatus = null, string cellphone = null, bool? cellphoneStatus = null, string phone = null, bool? phoneStatus = null, DateTime? birthDate = null, string language = null, List<string> extraFieldId = null);

        /// <summary>
        /// Get all contacts
        /// </summary>
        /// <remarks>
        /// Returns all contacts
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">ID of the List</param>
        /// <param name="offset">Element offset (starting at zero for the first element) (optional)</param>
        /// <param name="limit">Number of items to return (optional, default to 10)</param>
        /// <param name="firstName">First name of the contacts to return (optional)</param>
        /// <param name="lastName">Last name of the contacts to return (optional)</param>
        /// <param name="email">Email of the contacts to return (optional)</param>
        /// <param name="emailStatus">EmailStatus of the contacts to return (optional)</param>
        /// <param name="cellphone">Cellphone of the contacts to return (optional)</param>
        /// <param name="cellphoneStatus">CellphoneStatus of the contacts to return (optional)</param>
        /// <param name="phone">Phone of the contacts to return (optional)</param>
        /// <param name="phoneStatus">PhoneStatus of the contacts to return (optional)</param>
        /// <param name="birthDate">Birth date of the contacts to return (optional)</param>
        /// <param name="language">Language date of the contacts to return (optional)</param>
        /// <param name="extraFieldId">Extra field of contacts, extra_field_id[field_id]&#x3D;value (optional)</param>
        /// <returns>Task of ApiResponse (ContactCollection)</returns>
        System.Threading.Tasks.Task<ApiResponse<ContactCollection>> GetAllContactsAsyncWithHttpInfo (int? listId, int? offset = null, int? limit = null, string firstName = null, string lastName = null, string email = null, bool? emailStatus = null, string cellphone = null, bool? cellphoneStatus = null, string phone = null, bool? phoneStatus = null, DateTime? birthDate = null, string language = null, List<string> extraFieldId = null);
        /// <summary>
        /// Get all contacts by Segment Id
        /// </summary>
        /// <remarks>
        /// Returns all contacts filtered by Segment Id
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">ID of the List</param>
        /// <param name="segmentId">ID of the Segment</param>
        /// <param name="offset">Element offset (starting at zero for the first element) (optional)</param>
        /// <param name="limit">Number of items to return (optional, default to 10)</param>
        /// <param name="showRemoved">Show removed contacts (optional)</param>
        /// <returns>Task of ContactCollection</returns>
        System.Threading.Tasks.Task<ContactCollection> GetAllContactsBySegmentAsync (int? listId, string segmentId, int? offset = null, int? limit = null, bool? showRemoved = null);

        /// <summary>
        /// Get all contacts by Segment Id
        /// </summary>
        /// <remarks>
        /// Returns all contacts filtered by Segment Id
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">ID of the List</param>
        /// <param name="segmentId">ID of the Segment</param>
        /// <param name="offset">Element offset (starting at zero for the first element) (optional)</param>
        /// <param name="limit">Number of items to return (optional, default to 10)</param>
        /// <param name="showRemoved">Show removed contacts (optional)</param>
        /// <returns>Task of ApiResponse (ContactCollection)</returns>
        System.Threading.Tasks.Task<ApiResponse<ContactCollection>> GetAllContactsBySegmentAsyncWithHttpInfo (int? listId, string segmentId, int? offset = null, int? limit = null, bool? showRemoved = null);
        /// <summary>
        /// Get contact
        /// </summary>
        /// <remarks>
        /// Returns contact information given its ID
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">ID of the Contact</param>
        /// <param name="listId">ID of the List</param>
        /// <returns>Task of ComplexContact</returns>
        System.Threading.Tasks.Task<ComplexContact> GetContactAsync (string contactId, int? listId);

        /// <summary>
        /// Get contact
        /// </summary>
        /// <remarks>
        /// Returns contact information given its ID
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">ID of the Contact</param>
        /// <param name="listId">ID of the List</param>
        /// <returns>Task of ApiResponse (ComplexContact)</returns>
        System.Threading.Tasks.Task<ApiResponse<ComplexContact>> GetContactAsyncWithHttpInfo (string contactId, int? listId);
        /// <summary>
        /// Update a specific contact
        /// </summary>
        /// <remarks>
        /// Update contact
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">ID of the Contact</param>
        /// <param name="listId">ID of the List</param>
        /// <param name="contactBaseStatusExtra">Parameters for the contact</param>
        /// <returns>Task of CreateContactResponse</returns>
        System.Threading.Tasks.Task<CreateContactResponse> PatchContactAsync (string contactId, int? listId, ContactBaseStatusExtra contactBaseStatusExtra);

        /// <summary>
        /// Update a specific contact
        /// </summary>
        /// <remarks>
        /// Update contact
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">ID of the Contact</param>
        /// <param name="listId">ID of the List</param>
        /// <param name="contactBaseStatusExtra">Parameters for the contact</param>
        /// <returns>Task of ApiResponse (CreateContactResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateContactResponse>> PatchContactAsyncWithHttpInfo (string contactId, int? listId, ContactBaseStatusExtra contactBaseStatusExtra);
        /// <summary>
        /// Search contact
        /// </summary>
        /// <remarks>
        /// Searches a contact across all lists and returns a collection of contacts found
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contact">Contact to search</param>
        /// <param name="type">Type of contact to search (defaults to &#39;email&#39;) (optional, default to email)</param>
        /// <returns>Task of InlineResponse200</returns>
        System.Threading.Tasks.Task<InlineResponse200> SearchContactsAsync (string contact, string type = null);

        /// <summary>
        /// Search contact
        /// </summary>
        /// <remarks>
        /// Searches a contact across all lists and returns a collection of contacts found
        /// </remarks>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contact">Contact to search</param>
        /// <param name="type">Type of contact to search (defaults to &#39;email&#39;) (optional, default to email)</param>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse200>> SearchContactsAsyncWithHttpInfo (string contact, string type = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ContactsApi : IContactsApi
    {
        private org.egoi.client.api.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ContactsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ContactsApi(String basePath)
        {
            this.Configuration = new org.egoi.client.api.Client.Configuration { BasePath = basePath };

            ExceptionFactory = org.egoi.client.api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ContactsApi"/> class
        /// </summary>
        /// <returns></returns>
        public ContactsApi()
        {
            this.Configuration = org.egoi.client.api.Client.Configuration.Default;

            ExceptionFactory = org.egoi.client.api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ContactsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ContactsApi(org.egoi.client.api.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = org.egoi.client.api.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = org.egoi.client.api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public org.egoi.client.api.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public org.egoi.client.api.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Activate contacts Activates a collection of contacts (does not apply to removed contacts)
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">ID of the List</param>
        /// <param name="activateContactsRequest">Parameters for the request</param>
        /// <returns>AcceptedResponse</returns>
        public AcceptedResponse ActionActivateContacts (int? listId, ActivateContactsRequest activateContactsRequest)
        {
             ApiResponse<AcceptedResponse> localVarResponse = ActionActivateContactsWithHttpInfo(listId, activateContactsRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Activate contacts Activates a collection of contacts (does not apply to removed contacts)
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">ID of the List</param>
        /// <param name="activateContactsRequest">Parameters for the request</param>
        /// <returns>ApiResponse of AcceptedResponse</returns>
        public ApiResponse< AcceptedResponse > ActionActivateContactsWithHttpInfo (int? listId, ActivateContactsRequest activateContactsRequest)
        {
            // verify the required parameter 'listId' is set
            if (listId == null)
                throw new ApiException(400, "Missing required parameter 'listId' when calling ContactsApi->ActionActivateContacts");
            // verify the required parameter 'activateContactsRequest' is set
            if (activateContactsRequest == null)
                throw new ApiException(400, "Missing required parameter 'activateContactsRequest' when calling ContactsApi->ActionActivateContacts");

            var localVarPath = "/lists/{list_id}/contacts/actions/activate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (listId != null) localVarPathParams.Add("list_id", this.Configuration.ApiClient.ParameterToString(listId)); // path parameter
            if (activateContactsRequest != null && activateContactsRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(activateContactsRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = activateContactsRequest; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ActionActivateContacts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AcceptedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AcceptedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AcceptedResponse)));
        }

        /// <summary>
        /// Activate contacts Activates a collection of contacts (does not apply to removed contacts)
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">ID of the List</param>
        /// <param name="activateContactsRequest">Parameters for the request</param>
        /// <returns>Task of AcceptedResponse</returns>
        public async System.Threading.Tasks.Task<AcceptedResponse> ActionActivateContactsAsync (int? listId, ActivateContactsRequest activateContactsRequest)
        {
             ApiResponse<AcceptedResponse> localVarResponse = await ActionActivateContactsAsyncWithHttpInfo(listId, activateContactsRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Activate contacts Activates a collection of contacts (does not apply to removed contacts)
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">ID of the List</param>
        /// <param name="activateContactsRequest">Parameters for the request</param>
        /// <returns>Task of ApiResponse (AcceptedResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AcceptedResponse>> ActionActivateContactsAsyncWithHttpInfo (int? listId, ActivateContactsRequest activateContactsRequest)
        {
            // verify the required parameter 'listId' is set
            if (listId == null)
                throw new ApiException(400, "Missing required parameter 'listId' when calling ContactsApi->ActionActivateContacts");
            // verify the required parameter 'activateContactsRequest' is set
            if (activateContactsRequest == null)
                throw new ApiException(400, "Missing required parameter 'activateContactsRequest' when calling ContactsApi->ActionActivateContacts");

            var localVarPath = "/lists/{list_id}/contacts/actions/activate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (listId != null) localVarPathParams.Add("list_id", this.Configuration.ApiClient.ParameterToString(listId)); // path parameter
            if (activateContactsRequest != null && activateContactsRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(activateContactsRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = activateContactsRequest; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ActionActivateContacts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AcceptedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AcceptedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AcceptedResponse)));
        }

        /// <summary>
        /// Attach tag to contact Attaches a tag to the provided contacts. &lt;br&gt;***Note:***&lt;br&gt; If you provide the array of **contacts** there will be a maximum limit of 1000 contacts in the payload, but if you provide a **segment_id** instead of     the array of contacts you will get an asynchronous response with the status code 202
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">ID of the List</param>
        /// <param name="attachTagRequest">Parameters for the Tag</param>
        /// <returns>AttachTagResponse</returns>
        public AttachTagResponse ActionAttachTag (int? listId, AttachTagRequest attachTagRequest)
        {
             ApiResponse<AttachTagResponse> localVarResponse = ActionAttachTagWithHttpInfo(listId, attachTagRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Attach tag to contact Attaches a tag to the provided contacts. &lt;br&gt;***Note:***&lt;br&gt; If you provide the array of **contacts** there will be a maximum limit of 1000 contacts in the payload, but if you provide a **segment_id** instead of     the array of contacts you will get an asynchronous response with the status code 202
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">ID of the List</param>
        /// <param name="attachTagRequest">Parameters for the Tag</param>
        /// <returns>ApiResponse of AttachTagResponse</returns>
        public ApiResponse< AttachTagResponse > ActionAttachTagWithHttpInfo (int? listId, AttachTagRequest attachTagRequest)
        {
            // verify the required parameter 'listId' is set
            if (listId == null)
                throw new ApiException(400, "Missing required parameter 'listId' when calling ContactsApi->ActionAttachTag");
            // verify the required parameter 'attachTagRequest' is set
            if (attachTagRequest == null)
                throw new ApiException(400, "Missing required parameter 'attachTagRequest' when calling ContactsApi->ActionAttachTag");

            var localVarPath = "/lists/{list_id}/contacts/actions/attach-tag";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (listId != null) localVarPathParams.Add("list_id", this.Configuration.ApiClient.ParameterToString(listId)); // path parameter
            if (attachTagRequest != null && attachTagRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(attachTagRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = attachTagRequest; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ActionAttachTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AttachTagResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AttachTagResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AttachTagResponse)));
        }

        /// <summary>
        /// Attach tag to contact Attaches a tag to the provided contacts. &lt;br&gt;***Note:***&lt;br&gt; If you provide the array of **contacts** there will be a maximum limit of 1000 contacts in the payload, but if you provide a **segment_id** instead of     the array of contacts you will get an asynchronous response with the status code 202
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">ID of the List</param>
        /// <param name="attachTagRequest">Parameters for the Tag</param>
        /// <returns>Task of AttachTagResponse</returns>
        public async System.Threading.Tasks.Task<AttachTagResponse> ActionAttachTagAsync (int? listId, AttachTagRequest attachTagRequest)
        {
             ApiResponse<AttachTagResponse> localVarResponse = await ActionAttachTagAsyncWithHttpInfo(listId, attachTagRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Attach tag to contact Attaches a tag to the provided contacts. &lt;br&gt;***Note:***&lt;br&gt; If you provide the array of **contacts** there will be a maximum limit of 1000 contacts in the payload, but if you provide a **segment_id** instead of     the array of contacts you will get an asynchronous response with the status code 202
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">ID of the List</param>
        /// <param name="attachTagRequest">Parameters for the Tag</param>
        /// <returns>Task of ApiResponse (AttachTagResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AttachTagResponse>> ActionAttachTagAsyncWithHttpInfo (int? listId, AttachTagRequest attachTagRequest)
        {
            // verify the required parameter 'listId' is set
            if (listId == null)
                throw new ApiException(400, "Missing required parameter 'listId' when calling ContactsApi->ActionAttachTag");
            // verify the required parameter 'attachTagRequest' is set
            if (attachTagRequest == null)
                throw new ApiException(400, "Missing required parameter 'attachTagRequest' when calling ContactsApi->ActionAttachTag");

            var localVarPath = "/lists/{list_id}/contacts/actions/attach-tag";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (listId != null) localVarPathParams.Add("list_id", this.Configuration.ApiClient.ParameterToString(listId)); // path parameter
            if (attachTagRequest != null && attachTagRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(attachTagRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = attachTagRequest; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ActionAttachTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AttachTagResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AttachTagResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AttachTagResponse)));
        }

        /// <summary>
        /// Deactivate contacts Deactivates a collection of contacts (does not apply to removed contacts)
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">ID of the List</param>
        /// <param name="deactivateContactsRequest">Parameters for the request</param>
        /// <returns>AcceptedResponse</returns>
        public AcceptedResponse ActionDeactivateContacts (int? listId, DeactivateContactsRequest deactivateContactsRequest)
        {
             ApiResponse<AcceptedResponse> localVarResponse = ActionDeactivateContactsWithHttpInfo(listId, deactivateContactsRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deactivate contacts Deactivates a collection of contacts (does not apply to removed contacts)
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">ID of the List</param>
        /// <param name="deactivateContactsRequest">Parameters for the request</param>
        /// <returns>ApiResponse of AcceptedResponse</returns>
        public ApiResponse< AcceptedResponse > ActionDeactivateContactsWithHttpInfo (int? listId, DeactivateContactsRequest deactivateContactsRequest)
        {
            // verify the required parameter 'listId' is set
            if (listId == null)
                throw new ApiException(400, "Missing required parameter 'listId' when calling ContactsApi->ActionDeactivateContacts");
            // verify the required parameter 'deactivateContactsRequest' is set
            if (deactivateContactsRequest == null)
                throw new ApiException(400, "Missing required parameter 'deactivateContactsRequest' when calling ContactsApi->ActionDeactivateContacts");

            var localVarPath = "/lists/{list_id}/contacts/actions/deactivate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (listId != null) localVarPathParams.Add("list_id", this.Configuration.ApiClient.ParameterToString(listId)); // path parameter
            if (deactivateContactsRequest != null && deactivateContactsRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(deactivateContactsRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = deactivateContactsRequest; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ActionDeactivateContacts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AcceptedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AcceptedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AcceptedResponse)));
        }

        /// <summary>
        /// Deactivate contacts Deactivates a collection of contacts (does not apply to removed contacts)
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">ID of the List</param>
        /// <param name="deactivateContactsRequest">Parameters for the request</param>
        /// <returns>Task of AcceptedResponse</returns>
        public async System.Threading.Tasks.Task<AcceptedResponse> ActionDeactivateContactsAsync (int? listId, DeactivateContactsRequest deactivateContactsRequest)
        {
             ApiResponse<AcceptedResponse> localVarResponse = await ActionDeactivateContactsAsyncWithHttpInfo(listId, deactivateContactsRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Deactivate contacts Deactivates a collection of contacts (does not apply to removed contacts)
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">ID of the List</param>
        /// <param name="deactivateContactsRequest">Parameters for the request</param>
        /// <returns>Task of ApiResponse (AcceptedResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AcceptedResponse>> ActionDeactivateContactsAsyncWithHttpInfo (int? listId, DeactivateContactsRequest deactivateContactsRequest)
        {
            // verify the required parameter 'listId' is set
            if (listId == null)
                throw new ApiException(400, "Missing required parameter 'listId' when calling ContactsApi->ActionDeactivateContacts");
            // verify the required parameter 'deactivateContactsRequest' is set
            if (deactivateContactsRequest == null)
                throw new ApiException(400, "Missing required parameter 'deactivateContactsRequest' when calling ContactsApi->ActionDeactivateContacts");

            var localVarPath = "/lists/{list_id}/contacts/actions/deactivate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (listId != null) localVarPathParams.Add("list_id", this.Configuration.ApiClient.ParameterToString(listId)); // path parameter
            if (deactivateContactsRequest != null && deactivateContactsRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(deactivateContactsRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = deactivateContactsRequest; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ActionDeactivateContacts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AcceptedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AcceptedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AcceptedResponse)));
        }

        /// <summary>
        /// Detach tag to contact Detach a tag to the provided contacts
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">ID of the List</param>
        /// <param name="attachTagRequest">Parameters for the Tag</param>
        /// <returns>AttachTagResponse</returns>
        public AttachTagResponse ActionDetachTag (int? listId, AttachTagRequest attachTagRequest)
        {
             ApiResponse<AttachTagResponse> localVarResponse = ActionDetachTagWithHttpInfo(listId, attachTagRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Detach tag to contact Detach a tag to the provided contacts
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">ID of the List</param>
        /// <param name="attachTagRequest">Parameters for the Tag</param>
        /// <returns>ApiResponse of AttachTagResponse</returns>
        public ApiResponse< AttachTagResponse > ActionDetachTagWithHttpInfo (int? listId, AttachTagRequest attachTagRequest)
        {
            // verify the required parameter 'listId' is set
            if (listId == null)
                throw new ApiException(400, "Missing required parameter 'listId' when calling ContactsApi->ActionDetachTag");
            // verify the required parameter 'attachTagRequest' is set
            if (attachTagRequest == null)
                throw new ApiException(400, "Missing required parameter 'attachTagRequest' when calling ContactsApi->ActionDetachTag");

            var localVarPath = "/lists/{list_id}/contacts/actions/detach-tag";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (listId != null) localVarPathParams.Add("list_id", this.Configuration.ApiClient.ParameterToString(listId)); // path parameter
            if (attachTagRequest != null && attachTagRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(attachTagRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = attachTagRequest; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ActionDetachTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AttachTagResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AttachTagResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AttachTagResponse)));
        }

        /// <summary>
        /// Detach tag to contact Detach a tag to the provided contacts
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">ID of the List</param>
        /// <param name="attachTagRequest">Parameters for the Tag</param>
        /// <returns>Task of AttachTagResponse</returns>
        public async System.Threading.Tasks.Task<AttachTagResponse> ActionDetachTagAsync (int? listId, AttachTagRequest attachTagRequest)
        {
             ApiResponse<AttachTagResponse> localVarResponse = await ActionDetachTagAsyncWithHttpInfo(listId, attachTagRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Detach tag to contact Detach a tag to the provided contacts
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">ID of the List</param>
        /// <param name="attachTagRequest">Parameters for the Tag</param>
        /// <returns>Task of ApiResponse (AttachTagResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AttachTagResponse>> ActionDetachTagAsyncWithHttpInfo (int? listId, AttachTagRequest attachTagRequest)
        {
            // verify the required parameter 'listId' is set
            if (listId == null)
                throw new ApiException(400, "Missing required parameter 'listId' when calling ContactsApi->ActionDetachTag");
            // verify the required parameter 'attachTagRequest' is set
            if (attachTagRequest == null)
                throw new ApiException(400, "Missing required parameter 'attachTagRequest' when calling ContactsApi->ActionDetachTag");

            var localVarPath = "/lists/{list_id}/contacts/actions/detach-tag";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (listId != null) localVarPathParams.Add("list_id", this.Configuration.ApiClient.ParameterToString(listId)); // path parameter
            if (attachTagRequest != null && attachTagRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(attachTagRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = attachTagRequest; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ActionDetachTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AttachTagResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AttachTagResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AttachTagResponse)));
        }

        /// <summary>
        /// Exports a list of contacts Exports a list of contacts to the desired callback url
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">ID of the List</param>
        /// <param name="contactExportRequest">Parameters for export</param>
        /// <returns>AcceptedResponse</returns>
        public AcceptedResponse ActionExportContacts (int? listId, ContactExportRequest contactExportRequest)
        {
             ApiResponse<AcceptedResponse> localVarResponse = ActionExportContactsWithHttpInfo(listId, contactExportRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Exports a list of contacts Exports a list of contacts to the desired callback url
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">ID of the List</param>
        /// <param name="contactExportRequest">Parameters for export</param>
        /// <returns>ApiResponse of AcceptedResponse</returns>
        public ApiResponse< AcceptedResponse > ActionExportContactsWithHttpInfo (int? listId, ContactExportRequest contactExportRequest)
        {
            // verify the required parameter 'listId' is set
            if (listId == null)
                throw new ApiException(400, "Missing required parameter 'listId' when calling ContactsApi->ActionExportContacts");
            // verify the required parameter 'contactExportRequest' is set
            if (contactExportRequest == null)
                throw new ApiException(400, "Missing required parameter 'contactExportRequest' when calling ContactsApi->ActionExportContacts");

            var localVarPath = "/lists/{list_id}/contacts/actions/export";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (listId != null) localVarPathParams.Add("list_id", this.Configuration.ApiClient.ParameterToString(listId)); // path parameter
            if (contactExportRequest != null && contactExportRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(contactExportRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = contactExportRequest; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ActionExportContacts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AcceptedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AcceptedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AcceptedResponse)));
        }

        /// <summary>
        /// Exports a list of contacts Exports a list of contacts to the desired callback url
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">ID of the List</param>
        /// <param name="contactExportRequest">Parameters for export</param>
        /// <returns>Task of AcceptedResponse</returns>
        public async System.Threading.Tasks.Task<AcceptedResponse> ActionExportContactsAsync (int? listId, ContactExportRequest contactExportRequest)
        {
             ApiResponse<AcceptedResponse> localVarResponse = await ActionExportContactsAsyncWithHttpInfo(listId, contactExportRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Exports a list of contacts Exports a list of contacts to the desired callback url
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">ID of the List</param>
        /// <param name="contactExportRequest">Parameters for export</param>
        /// <returns>Task of ApiResponse (AcceptedResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AcceptedResponse>> ActionExportContactsAsyncWithHttpInfo (int? listId, ContactExportRequest contactExportRequest)
        {
            // verify the required parameter 'listId' is set
            if (listId == null)
                throw new ApiException(400, "Missing required parameter 'listId' when calling ContactsApi->ActionExportContacts");
            // verify the required parameter 'contactExportRequest' is set
            if (contactExportRequest == null)
                throw new ApiException(400, "Missing required parameter 'contactExportRequest' when calling ContactsApi->ActionExportContacts");

            var localVarPath = "/lists/{list_id}/contacts/actions/export";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (listId != null) localVarPathParams.Add("list_id", this.Configuration.ApiClient.ParameterToString(listId)); // path parameter
            if (contactExportRequest != null && contactExportRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(contactExportRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = contactExportRequest; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ActionExportContacts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AcceptedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AcceptedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AcceptedResponse)));
        }

        /// <summary>
        /// Forget contacts Forgets a list of contacts to the desired callback url
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">ID of the List</param>
        /// <param name="contactForgetRequest">Parameters for the action</param>
        /// <returns>AcceptedResponse</returns>
        public AcceptedResponse ActionForgetContacts (int? listId, ContactForgetRequest contactForgetRequest)
        {
             ApiResponse<AcceptedResponse> localVarResponse = ActionForgetContactsWithHttpInfo(listId, contactForgetRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Forget contacts Forgets a list of contacts to the desired callback url
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">ID of the List</param>
        /// <param name="contactForgetRequest">Parameters for the action</param>
        /// <returns>ApiResponse of AcceptedResponse</returns>
        public ApiResponse< AcceptedResponse > ActionForgetContactsWithHttpInfo (int? listId, ContactForgetRequest contactForgetRequest)
        {
            // verify the required parameter 'listId' is set
            if (listId == null)
                throw new ApiException(400, "Missing required parameter 'listId' when calling ContactsApi->ActionForgetContacts");
            // verify the required parameter 'contactForgetRequest' is set
            if (contactForgetRequest == null)
                throw new ApiException(400, "Missing required parameter 'contactForgetRequest' when calling ContactsApi->ActionForgetContacts");

            var localVarPath = "/lists/{list_id}/contacts/actions/forget";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (listId != null) localVarPathParams.Add("list_id", this.Configuration.ApiClient.ParameterToString(listId)); // path parameter
            if (contactForgetRequest != null && contactForgetRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(contactForgetRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = contactForgetRequest; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ActionForgetContacts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AcceptedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AcceptedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AcceptedResponse)));
        }

        /// <summary>
        /// Forget contacts Forgets a list of contacts to the desired callback url
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">ID of the List</param>
        /// <param name="contactForgetRequest">Parameters for the action</param>
        /// <returns>Task of AcceptedResponse</returns>
        public async System.Threading.Tasks.Task<AcceptedResponse> ActionForgetContactsAsync (int? listId, ContactForgetRequest contactForgetRequest)
        {
             ApiResponse<AcceptedResponse> localVarResponse = await ActionForgetContactsAsyncWithHttpInfo(listId, contactForgetRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Forget contacts Forgets a list of contacts to the desired callback url
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">ID of the List</param>
        /// <param name="contactForgetRequest">Parameters for the action</param>
        /// <returns>Task of ApiResponse (AcceptedResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AcceptedResponse>> ActionForgetContactsAsyncWithHttpInfo (int? listId, ContactForgetRequest contactForgetRequest)
        {
            // verify the required parameter 'listId' is set
            if (listId == null)
                throw new ApiException(400, "Missing required parameter 'listId' when calling ContactsApi->ActionForgetContacts");
            // verify the required parameter 'contactForgetRequest' is set
            if (contactForgetRequest == null)
                throw new ApiException(400, "Missing required parameter 'contactForgetRequest' when calling ContactsApi->ActionForgetContacts");

            var localVarPath = "/lists/{list_id}/contacts/actions/forget";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (listId != null) localVarPathParams.Add("list_id", this.Configuration.ApiClient.ParameterToString(listId)); // path parameter
            if (contactForgetRequest != null && contactForgetRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(contactForgetRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = contactForgetRequest; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ActionForgetContacts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AcceptedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AcceptedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AcceptedResponse)));
        }

        /// <summary>
        /// Import collection of contacts Imports a collection of contacts &lt;/br&gt;      **DISCLAIMER:** stream limits applied. [view here](#section/Stream-Limits &#39;Stream Limits&#39;)&lt;br&gt; ***Note:*** minimum of 2 contacts to use this method. [use Create new contact method instead](#operation/createContact &#39;Create new contact&#39;)
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">ID of the List</param>
        /// <param name="importBulkRequest">Parameters for the bulk import</param>
        /// <returns>AcceptedResponse</returns>
        public AcceptedResponse ActionImportBulk (int? listId, ImportBulkRequest importBulkRequest)
        {
             ApiResponse<AcceptedResponse> localVarResponse = ActionImportBulkWithHttpInfo(listId, importBulkRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Import collection of contacts Imports a collection of contacts &lt;/br&gt;      **DISCLAIMER:** stream limits applied. [view here](#section/Stream-Limits &#39;Stream Limits&#39;)&lt;br&gt; ***Note:*** minimum of 2 contacts to use this method. [use Create new contact method instead](#operation/createContact &#39;Create new contact&#39;)
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">ID of the List</param>
        /// <param name="importBulkRequest">Parameters for the bulk import</param>
        /// <returns>ApiResponse of AcceptedResponse</returns>
        public ApiResponse< AcceptedResponse > ActionImportBulkWithHttpInfo (int? listId, ImportBulkRequest importBulkRequest)
        {
            // verify the required parameter 'listId' is set
            if (listId == null)
                throw new ApiException(400, "Missing required parameter 'listId' when calling ContactsApi->ActionImportBulk");
            // verify the required parameter 'importBulkRequest' is set
            if (importBulkRequest == null)
                throw new ApiException(400, "Missing required parameter 'importBulkRequest' when calling ContactsApi->ActionImportBulk");

            var localVarPath = "/lists/{list_id}/contacts/actions/import-bulk";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (listId != null) localVarPathParams.Add("list_id", this.Configuration.ApiClient.ParameterToString(listId)); // path parameter
            if (importBulkRequest != null && importBulkRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(importBulkRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = importBulkRequest; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ActionImportBulk", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AcceptedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AcceptedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AcceptedResponse)));
        }

        /// <summary>
        /// Import collection of contacts Imports a collection of contacts &lt;/br&gt;      **DISCLAIMER:** stream limits applied. [view here](#section/Stream-Limits &#39;Stream Limits&#39;)&lt;br&gt; ***Note:*** minimum of 2 contacts to use this method. [use Create new contact method instead](#operation/createContact &#39;Create new contact&#39;)
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">ID of the List</param>
        /// <param name="importBulkRequest">Parameters for the bulk import</param>
        /// <returns>Task of AcceptedResponse</returns>
        public async System.Threading.Tasks.Task<AcceptedResponse> ActionImportBulkAsync (int? listId, ImportBulkRequest importBulkRequest)
        {
             ApiResponse<AcceptedResponse> localVarResponse = await ActionImportBulkAsyncWithHttpInfo(listId, importBulkRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Import collection of contacts Imports a collection of contacts &lt;/br&gt;      **DISCLAIMER:** stream limits applied. [view here](#section/Stream-Limits &#39;Stream Limits&#39;)&lt;br&gt; ***Note:*** minimum of 2 contacts to use this method. [use Create new contact method instead](#operation/createContact &#39;Create new contact&#39;)
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">ID of the List</param>
        /// <param name="importBulkRequest">Parameters for the bulk import</param>
        /// <returns>Task of ApiResponse (AcceptedResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AcceptedResponse>> ActionImportBulkAsyncWithHttpInfo (int? listId, ImportBulkRequest importBulkRequest)
        {
            // verify the required parameter 'listId' is set
            if (listId == null)
                throw new ApiException(400, "Missing required parameter 'listId' when calling ContactsApi->ActionImportBulk");
            // verify the required parameter 'importBulkRequest' is set
            if (importBulkRequest == null)
                throw new ApiException(400, "Missing required parameter 'importBulkRequest' when calling ContactsApi->ActionImportBulk");

            var localVarPath = "/lists/{list_id}/contacts/actions/import-bulk";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (listId != null) localVarPathParams.Add("list_id", this.Configuration.ApiClient.ParameterToString(listId)); // path parameter
            if (importBulkRequest != null && importBulkRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(importBulkRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = importBulkRequest; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ActionImportBulk", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AcceptedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AcceptedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AcceptedResponse)));
        }

        /// <summary>
        /// Start automation Start automation to the provided contacts
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">ID of the List</param>
        /// <param name="startAutomationRequest">Parameters for the operation to start automation</param>
        /// <returns>StartAutomationResponse</returns>
        public StartAutomationResponse ActionStartAutomation (int? listId, StartAutomationRequest startAutomationRequest)
        {
             ApiResponse<StartAutomationResponse> localVarResponse = ActionStartAutomationWithHttpInfo(listId, startAutomationRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Start automation Start automation to the provided contacts
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">ID of the List</param>
        /// <param name="startAutomationRequest">Parameters for the operation to start automation</param>
        /// <returns>ApiResponse of StartAutomationResponse</returns>
        public ApiResponse< StartAutomationResponse > ActionStartAutomationWithHttpInfo (int? listId, StartAutomationRequest startAutomationRequest)
        {
            // verify the required parameter 'listId' is set
            if (listId == null)
                throw new ApiException(400, "Missing required parameter 'listId' when calling ContactsApi->ActionStartAutomation");
            // verify the required parameter 'startAutomationRequest' is set
            if (startAutomationRequest == null)
                throw new ApiException(400, "Missing required parameter 'startAutomationRequest' when calling ContactsApi->ActionStartAutomation");

            var localVarPath = "/lists/{list_id}/contacts/actions/start-automation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (listId != null) localVarPathParams.Add("list_id", this.Configuration.ApiClient.ParameterToString(listId)); // path parameter
            if (startAutomationRequest != null && startAutomationRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(startAutomationRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = startAutomationRequest; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ActionStartAutomation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StartAutomationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StartAutomationResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(StartAutomationResponse)));
        }

        /// <summary>
        /// Start automation Start automation to the provided contacts
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">ID of the List</param>
        /// <param name="startAutomationRequest">Parameters for the operation to start automation</param>
        /// <returns>Task of StartAutomationResponse</returns>
        public async System.Threading.Tasks.Task<StartAutomationResponse> ActionStartAutomationAsync (int? listId, StartAutomationRequest startAutomationRequest)
        {
             ApiResponse<StartAutomationResponse> localVarResponse = await ActionStartAutomationAsyncWithHttpInfo(listId, startAutomationRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Start automation Start automation to the provided contacts
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">ID of the List</param>
        /// <param name="startAutomationRequest">Parameters for the operation to start automation</param>
        /// <returns>Task of ApiResponse (StartAutomationResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<StartAutomationResponse>> ActionStartAutomationAsyncWithHttpInfo (int? listId, StartAutomationRequest startAutomationRequest)
        {
            // verify the required parameter 'listId' is set
            if (listId == null)
                throw new ApiException(400, "Missing required parameter 'listId' when calling ContactsApi->ActionStartAutomation");
            // verify the required parameter 'startAutomationRequest' is set
            if (startAutomationRequest == null)
                throw new ApiException(400, "Missing required parameter 'startAutomationRequest' when calling ContactsApi->ActionStartAutomation");

            var localVarPath = "/lists/{list_id}/contacts/actions/start-automation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (listId != null) localVarPathParams.Add("list_id", this.Configuration.ApiClient.ParameterToString(listId)); // path parameter
            if (startAutomationRequest != null && startAutomationRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(startAutomationRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = startAutomationRequest; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ActionStartAutomation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StartAutomationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StartAutomationResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(StartAutomationResponse)));
        }

        /// <summary>
        /// Unsubscribes contacts Unsubscribes contacts
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">ID of the List</param>
        /// <param name="removeRequest">Parameters for the contact to unsubscribe</param>
        /// <returns>RemoveResponse</returns>
        public RemoveResponse ActionUnsubscribeContact (int? listId, RemoveRequest removeRequest)
        {
             ApiResponse<RemoveResponse> localVarResponse = ActionUnsubscribeContactWithHttpInfo(listId, removeRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Unsubscribes contacts Unsubscribes contacts
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">ID of the List</param>
        /// <param name="removeRequest">Parameters for the contact to unsubscribe</param>
        /// <returns>ApiResponse of RemoveResponse</returns>
        public ApiResponse< RemoveResponse > ActionUnsubscribeContactWithHttpInfo (int? listId, RemoveRequest removeRequest)
        {
            // verify the required parameter 'listId' is set
            if (listId == null)
                throw new ApiException(400, "Missing required parameter 'listId' when calling ContactsApi->ActionUnsubscribeContact");
            // verify the required parameter 'removeRequest' is set
            if (removeRequest == null)
                throw new ApiException(400, "Missing required parameter 'removeRequest' when calling ContactsApi->ActionUnsubscribeContact");

            var localVarPath = "/lists/{list_id}/contacts/actions/unsubscribe";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (listId != null) localVarPathParams.Add("list_id", this.Configuration.ApiClient.ParameterToString(listId)); // path parameter
            if (removeRequest != null && removeRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(removeRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = removeRequest; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ActionUnsubscribeContact", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RemoveResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RemoveResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RemoveResponse)));
        }

        /// <summary>
        /// Unsubscribes contacts Unsubscribes contacts
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">ID of the List</param>
        /// <param name="removeRequest">Parameters for the contact to unsubscribe</param>
        /// <returns>Task of RemoveResponse</returns>
        public async System.Threading.Tasks.Task<RemoveResponse> ActionUnsubscribeContactAsync (int? listId, RemoveRequest removeRequest)
        {
             ApiResponse<RemoveResponse> localVarResponse = await ActionUnsubscribeContactAsyncWithHttpInfo(listId, removeRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Unsubscribes contacts Unsubscribes contacts
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">ID of the List</param>
        /// <param name="removeRequest">Parameters for the contact to unsubscribe</param>
        /// <returns>Task of ApiResponse (RemoveResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RemoveResponse>> ActionUnsubscribeContactAsyncWithHttpInfo (int? listId, RemoveRequest removeRequest)
        {
            // verify the required parameter 'listId' is set
            if (listId == null)
                throw new ApiException(400, "Missing required parameter 'listId' when calling ContactsApi->ActionUnsubscribeContact");
            // verify the required parameter 'removeRequest' is set
            if (removeRequest == null)
                throw new ApiException(400, "Missing required parameter 'removeRequest' when calling ContactsApi->ActionUnsubscribeContact");

            var localVarPath = "/lists/{list_id}/contacts/actions/unsubscribe";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (listId != null) localVarPathParams.Add("list_id", this.Configuration.ApiClient.ParameterToString(listId)); // path parameter
            if (removeRequest != null && removeRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(removeRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = removeRequest; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ActionUnsubscribeContact", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RemoveResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RemoveResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RemoveResponse)));
        }

        /// <summary>
        /// Create new contact Create a new contact
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">ID of the list where the contact belongs</param>
        /// <param name="contactBaseExtra">Parameters for the Contact</param>
        /// <returns>CreateContactResponse</returns>
        public CreateContactResponse CreateContact (int? listId, ContactBaseExtra contactBaseExtra)
        {
             ApiResponse<CreateContactResponse> localVarResponse = CreateContactWithHttpInfo(listId, contactBaseExtra);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create new contact Create a new contact
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">ID of the list where the contact belongs</param>
        /// <param name="contactBaseExtra">Parameters for the Contact</param>
        /// <returns>ApiResponse of CreateContactResponse</returns>
        public ApiResponse< CreateContactResponse > CreateContactWithHttpInfo (int? listId, ContactBaseExtra contactBaseExtra)
        {
            // verify the required parameter 'listId' is set
            if (listId == null)
                throw new ApiException(400, "Missing required parameter 'listId' when calling ContactsApi->CreateContact");
            // verify the required parameter 'contactBaseExtra' is set
            if (contactBaseExtra == null)
                throw new ApiException(400, "Missing required parameter 'contactBaseExtra' when calling ContactsApi->CreateContact");

            var localVarPath = "/lists/{list_id}/contacts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (listId != null) localVarPathParams.Add("list_id", this.Configuration.ApiClient.ParameterToString(listId)); // path parameter
            if (contactBaseExtra != null && contactBaseExtra.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(contactBaseExtra); // http body (model) parameter
            }
            else
            {
                localVarPostBody = contactBaseExtra; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateContact", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreateContactResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CreateContactResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateContactResponse)));
        }

        /// <summary>
        /// Create new contact Create a new contact
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">ID of the list where the contact belongs</param>
        /// <param name="contactBaseExtra">Parameters for the Contact</param>
        /// <returns>Task of CreateContactResponse</returns>
        public async System.Threading.Tasks.Task<CreateContactResponse> CreateContactAsync (int? listId, ContactBaseExtra contactBaseExtra)
        {
             ApiResponse<CreateContactResponse> localVarResponse = await CreateContactAsyncWithHttpInfo(listId, contactBaseExtra);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create new contact Create a new contact
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">ID of the list where the contact belongs</param>
        /// <param name="contactBaseExtra">Parameters for the Contact</param>
        /// <returns>Task of ApiResponse (CreateContactResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CreateContactResponse>> CreateContactAsyncWithHttpInfo (int? listId, ContactBaseExtra contactBaseExtra)
        {
            // verify the required parameter 'listId' is set
            if (listId == null)
                throw new ApiException(400, "Missing required parameter 'listId' when calling ContactsApi->CreateContact");
            // verify the required parameter 'contactBaseExtra' is set
            if (contactBaseExtra == null)
                throw new ApiException(400, "Missing required parameter 'contactBaseExtra' when calling ContactsApi->CreateContact");

            var localVarPath = "/lists/{list_id}/contacts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (listId != null) localVarPathParams.Add("list_id", this.Configuration.ApiClient.ParameterToString(listId)); // path parameter
            if (contactBaseExtra != null && contactBaseExtra.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(contactBaseExtra); // http body (model) parameter
            }
            else
            {
                localVarPostBody = contactBaseExtra; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateContact", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreateContactResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CreateContactResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateContactResponse)));
        }

        /// <summary>
        /// Get all contact activities Returns all contact activities
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">ID of the Contact</param>
        /// <param name="listId">ID of the List</param>
        /// <param name="offset">Element offset (starting at zero for the first element) (optional)</param>
        /// <param name="limit">Number of items to return (optional, default to 10)</param>
        /// <param name="dateMin">Start date (optional)</param>
        /// <param name="dateMax">End date (optional)</param>
        /// <returns>ActivityCollection</returns>
        public ActivityCollection GetAllContactActivities (string contactId, int? listId, int? offset = null, int? limit = null, DateTime? dateMin = null, DateTime? dateMax = null)
        {
             ApiResponse<ActivityCollection> localVarResponse = GetAllContactActivitiesWithHttpInfo(contactId, listId, offset, limit, dateMin, dateMax);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all contact activities Returns all contact activities
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">ID of the Contact</param>
        /// <param name="listId">ID of the List</param>
        /// <param name="offset">Element offset (starting at zero for the first element) (optional)</param>
        /// <param name="limit">Number of items to return (optional, default to 10)</param>
        /// <param name="dateMin">Start date (optional)</param>
        /// <param name="dateMax">End date (optional)</param>
        /// <returns>ApiResponse of ActivityCollection</returns>
        public ApiResponse< ActivityCollection > GetAllContactActivitiesWithHttpInfo (string contactId, int? listId, int? offset = null, int? limit = null, DateTime? dateMin = null, DateTime? dateMax = null)
        {
            // verify the required parameter 'contactId' is set
            if (contactId == null)
                throw new ApiException(400, "Missing required parameter 'contactId' when calling ContactsApi->GetAllContactActivities");
            // verify the required parameter 'listId' is set
            if (listId == null)
                throw new ApiException(400, "Missing required parameter 'listId' when calling ContactsApi->GetAllContactActivities");

            var localVarPath = "/lists/{list_id}/contacts/{contact_id}/activities";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contactId != null) localVarPathParams.Add("contact_id", this.Configuration.ApiClient.ParameterToString(contactId)); // path parameter
            if (listId != null) localVarPathParams.Add("list_id", this.Configuration.ApiClient.ParameterToString(listId)); // path parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (dateMin != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "date_min", dateMin)); // query parameter
            if (dateMax != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "date_max", dateMax)); // query parameter

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllContactActivities", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ActivityCollection>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ActivityCollection) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ActivityCollection)));
        }

        /// <summary>
        /// Get all contact activities Returns all contact activities
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">ID of the Contact</param>
        /// <param name="listId">ID of the List</param>
        /// <param name="offset">Element offset (starting at zero for the first element) (optional)</param>
        /// <param name="limit">Number of items to return (optional, default to 10)</param>
        /// <param name="dateMin">Start date (optional)</param>
        /// <param name="dateMax">End date (optional)</param>
        /// <returns>Task of ActivityCollection</returns>
        public async System.Threading.Tasks.Task<ActivityCollection> GetAllContactActivitiesAsync (string contactId, int? listId, int? offset = null, int? limit = null, DateTime? dateMin = null, DateTime? dateMax = null)
        {
             ApiResponse<ActivityCollection> localVarResponse = await GetAllContactActivitiesAsyncWithHttpInfo(contactId, listId, offset, limit, dateMin, dateMax);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all contact activities Returns all contact activities
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">ID of the Contact</param>
        /// <param name="listId">ID of the List</param>
        /// <param name="offset">Element offset (starting at zero for the first element) (optional)</param>
        /// <param name="limit">Number of items to return (optional, default to 10)</param>
        /// <param name="dateMin">Start date (optional)</param>
        /// <param name="dateMax">End date (optional)</param>
        /// <returns>Task of ApiResponse (ActivityCollection)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ActivityCollection>> GetAllContactActivitiesAsyncWithHttpInfo (string contactId, int? listId, int? offset = null, int? limit = null, DateTime? dateMin = null, DateTime? dateMax = null)
        {
            // verify the required parameter 'contactId' is set
            if (contactId == null)
                throw new ApiException(400, "Missing required parameter 'contactId' when calling ContactsApi->GetAllContactActivities");
            // verify the required parameter 'listId' is set
            if (listId == null)
                throw new ApiException(400, "Missing required parameter 'listId' when calling ContactsApi->GetAllContactActivities");

            var localVarPath = "/lists/{list_id}/contacts/{contact_id}/activities";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contactId != null) localVarPathParams.Add("contact_id", this.Configuration.ApiClient.ParameterToString(contactId)); // path parameter
            if (listId != null) localVarPathParams.Add("list_id", this.Configuration.ApiClient.ParameterToString(listId)); // path parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (dateMin != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "date_min", dateMin)); // query parameter
            if (dateMax != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "date_max", dateMax)); // query parameter

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllContactActivities", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ActivityCollection>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ActivityCollection) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ActivityCollection)));
        }

        /// <summary>
        /// Get all contacts Returns all contacts
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">ID of the List</param>
        /// <param name="offset">Element offset (starting at zero for the first element) (optional)</param>
        /// <param name="limit">Number of items to return (optional, default to 10)</param>
        /// <param name="firstName">First name of the contacts to return (optional)</param>
        /// <param name="lastName">Last name of the contacts to return (optional)</param>
        /// <param name="email">Email of the contacts to return (optional)</param>
        /// <param name="emailStatus">EmailStatus of the contacts to return (optional)</param>
        /// <param name="cellphone">Cellphone of the contacts to return (optional)</param>
        /// <param name="cellphoneStatus">CellphoneStatus of the contacts to return (optional)</param>
        /// <param name="phone">Phone of the contacts to return (optional)</param>
        /// <param name="phoneStatus">PhoneStatus of the contacts to return (optional)</param>
        /// <param name="birthDate">Birth date of the contacts to return (optional)</param>
        /// <param name="language">Language date of the contacts to return (optional)</param>
        /// <param name="extraFieldId">Extra field of contacts, extra_field_id[field_id]&#x3D;value (optional)</param>
        /// <returns>ContactCollection</returns>
        public ContactCollection GetAllContacts (int? listId, int? offset = null, int? limit = null, string firstName = null, string lastName = null, string email = null, bool? emailStatus = null, string cellphone = null, bool? cellphoneStatus = null, string phone = null, bool? phoneStatus = null, DateTime? birthDate = null, string language = null, List<string> extraFieldId = null)
        {
             ApiResponse<ContactCollection> localVarResponse = GetAllContactsWithHttpInfo(listId, offset, limit, firstName, lastName, email, emailStatus, cellphone, cellphoneStatus, phone, phoneStatus, birthDate, language, extraFieldId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all contacts Returns all contacts
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">ID of the List</param>
        /// <param name="offset">Element offset (starting at zero for the first element) (optional)</param>
        /// <param name="limit">Number of items to return (optional, default to 10)</param>
        /// <param name="firstName">First name of the contacts to return (optional)</param>
        /// <param name="lastName">Last name of the contacts to return (optional)</param>
        /// <param name="email">Email of the contacts to return (optional)</param>
        /// <param name="emailStatus">EmailStatus of the contacts to return (optional)</param>
        /// <param name="cellphone">Cellphone of the contacts to return (optional)</param>
        /// <param name="cellphoneStatus">CellphoneStatus of the contacts to return (optional)</param>
        /// <param name="phone">Phone of the contacts to return (optional)</param>
        /// <param name="phoneStatus">PhoneStatus of the contacts to return (optional)</param>
        /// <param name="birthDate">Birth date of the contacts to return (optional)</param>
        /// <param name="language">Language date of the contacts to return (optional)</param>
        /// <param name="extraFieldId">Extra field of contacts, extra_field_id[field_id]&#x3D;value (optional)</param>
        /// <returns>ApiResponse of ContactCollection</returns>
        public ApiResponse< ContactCollection > GetAllContactsWithHttpInfo (int? listId, int? offset = null, int? limit = null, string firstName = null, string lastName = null, string email = null, bool? emailStatus = null, string cellphone = null, bool? cellphoneStatus = null, string phone = null, bool? phoneStatus = null, DateTime? birthDate = null, string language = null, List<string> extraFieldId = null)
        {
            // verify the required parameter 'listId' is set
            if (listId == null)
                throw new ApiException(400, "Missing required parameter 'listId' when calling ContactsApi->GetAllContacts");

            var localVarPath = "/lists/{list_id}/contacts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (listId != null) localVarPathParams.Add("list_id", this.Configuration.ApiClient.ParameterToString(listId)); // path parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (firstName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "first_name", firstName)); // query parameter
            if (lastName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "last_name", lastName)); // query parameter
            if (email != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "email", email)); // query parameter
            if (emailStatus != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "email_status", emailStatus)); // query parameter
            if (cellphone != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cellphone", cellphone)); // query parameter
            if (cellphoneStatus != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cellphone_status", cellphoneStatus)); // query parameter
            if (phone != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "phone", phone)); // query parameter
            if (phoneStatus != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "phone_status", phoneStatus)); // query parameter
            if (birthDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "birth_date", birthDate)); // query parameter
            if (language != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "language", language)); // query parameter
            if (extraFieldId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "extra_field_id", extraFieldId)); // query parameter

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllContacts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ContactCollection>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ContactCollection) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ContactCollection)));
        }

        /// <summary>
        /// Get all contacts Returns all contacts
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">ID of the List</param>
        /// <param name="offset">Element offset (starting at zero for the first element) (optional)</param>
        /// <param name="limit">Number of items to return (optional, default to 10)</param>
        /// <param name="firstName">First name of the contacts to return (optional)</param>
        /// <param name="lastName">Last name of the contacts to return (optional)</param>
        /// <param name="email">Email of the contacts to return (optional)</param>
        /// <param name="emailStatus">EmailStatus of the contacts to return (optional)</param>
        /// <param name="cellphone">Cellphone of the contacts to return (optional)</param>
        /// <param name="cellphoneStatus">CellphoneStatus of the contacts to return (optional)</param>
        /// <param name="phone">Phone of the contacts to return (optional)</param>
        /// <param name="phoneStatus">PhoneStatus of the contacts to return (optional)</param>
        /// <param name="birthDate">Birth date of the contacts to return (optional)</param>
        /// <param name="language">Language date of the contacts to return (optional)</param>
        /// <param name="extraFieldId">Extra field of contacts, extra_field_id[field_id]&#x3D;value (optional)</param>
        /// <returns>Task of ContactCollection</returns>
        public async System.Threading.Tasks.Task<ContactCollection> GetAllContactsAsync (int? listId, int? offset = null, int? limit = null, string firstName = null, string lastName = null, string email = null, bool? emailStatus = null, string cellphone = null, bool? cellphoneStatus = null, string phone = null, bool? phoneStatus = null, DateTime? birthDate = null, string language = null, List<string> extraFieldId = null)
        {
             ApiResponse<ContactCollection> localVarResponse = await GetAllContactsAsyncWithHttpInfo(listId, offset, limit, firstName, lastName, email, emailStatus, cellphone, cellphoneStatus, phone, phoneStatus, birthDate, language, extraFieldId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all contacts Returns all contacts
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">ID of the List</param>
        /// <param name="offset">Element offset (starting at zero for the first element) (optional)</param>
        /// <param name="limit">Number of items to return (optional, default to 10)</param>
        /// <param name="firstName">First name of the contacts to return (optional)</param>
        /// <param name="lastName">Last name of the contacts to return (optional)</param>
        /// <param name="email">Email of the contacts to return (optional)</param>
        /// <param name="emailStatus">EmailStatus of the contacts to return (optional)</param>
        /// <param name="cellphone">Cellphone of the contacts to return (optional)</param>
        /// <param name="cellphoneStatus">CellphoneStatus of the contacts to return (optional)</param>
        /// <param name="phone">Phone of the contacts to return (optional)</param>
        /// <param name="phoneStatus">PhoneStatus of the contacts to return (optional)</param>
        /// <param name="birthDate">Birth date of the contacts to return (optional)</param>
        /// <param name="language">Language date of the contacts to return (optional)</param>
        /// <param name="extraFieldId">Extra field of contacts, extra_field_id[field_id]&#x3D;value (optional)</param>
        /// <returns>Task of ApiResponse (ContactCollection)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ContactCollection>> GetAllContactsAsyncWithHttpInfo (int? listId, int? offset = null, int? limit = null, string firstName = null, string lastName = null, string email = null, bool? emailStatus = null, string cellphone = null, bool? cellphoneStatus = null, string phone = null, bool? phoneStatus = null, DateTime? birthDate = null, string language = null, List<string> extraFieldId = null)
        {
            // verify the required parameter 'listId' is set
            if (listId == null)
                throw new ApiException(400, "Missing required parameter 'listId' when calling ContactsApi->GetAllContacts");

            var localVarPath = "/lists/{list_id}/contacts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (listId != null) localVarPathParams.Add("list_id", this.Configuration.ApiClient.ParameterToString(listId)); // path parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (firstName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "first_name", firstName)); // query parameter
            if (lastName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "last_name", lastName)); // query parameter
            if (email != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "email", email)); // query parameter
            if (emailStatus != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "email_status", emailStatus)); // query parameter
            if (cellphone != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cellphone", cellphone)); // query parameter
            if (cellphoneStatus != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cellphone_status", cellphoneStatus)); // query parameter
            if (phone != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "phone", phone)); // query parameter
            if (phoneStatus != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "phone_status", phoneStatus)); // query parameter
            if (birthDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "birth_date", birthDate)); // query parameter
            if (language != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "language", language)); // query parameter
            if (extraFieldId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "extra_field_id", extraFieldId)); // query parameter

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllContacts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ContactCollection>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ContactCollection) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ContactCollection)));
        }

        /// <summary>
        /// Get all contacts by Segment Id Returns all contacts filtered by Segment Id
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">ID of the List</param>
        /// <param name="segmentId">ID of the Segment</param>
        /// <param name="offset">Element offset (starting at zero for the first element) (optional)</param>
        /// <param name="limit">Number of items to return (optional, default to 10)</param>
        /// <param name="showRemoved">Show removed contacts (optional)</param>
        /// <returns>ContactCollection</returns>
        public ContactCollection GetAllContactsBySegment (int? listId, string segmentId, int? offset = null, int? limit = null, bool? showRemoved = null)
        {
             ApiResponse<ContactCollection> localVarResponse = GetAllContactsBySegmentWithHttpInfo(listId, segmentId, offset, limit, showRemoved);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all contacts by Segment Id Returns all contacts filtered by Segment Id
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">ID of the List</param>
        /// <param name="segmentId">ID of the Segment</param>
        /// <param name="offset">Element offset (starting at zero for the first element) (optional)</param>
        /// <param name="limit">Number of items to return (optional, default to 10)</param>
        /// <param name="showRemoved">Show removed contacts (optional)</param>
        /// <returns>ApiResponse of ContactCollection</returns>
        public ApiResponse< ContactCollection > GetAllContactsBySegmentWithHttpInfo (int? listId, string segmentId, int? offset = null, int? limit = null, bool? showRemoved = null)
        {
            // verify the required parameter 'listId' is set
            if (listId == null)
                throw new ApiException(400, "Missing required parameter 'listId' when calling ContactsApi->GetAllContactsBySegment");
            // verify the required parameter 'segmentId' is set
            if (segmentId == null)
                throw new ApiException(400, "Missing required parameter 'segmentId' when calling ContactsApi->GetAllContactsBySegment");

            var localVarPath = "/lists/{list_id}/contacts/segment/{segment_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (listId != null) localVarPathParams.Add("list_id", this.Configuration.ApiClient.ParameterToString(listId)); // path parameter
            if (segmentId != null) localVarPathParams.Add("segment_id", this.Configuration.ApiClient.ParameterToString(segmentId)); // path parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (showRemoved != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "show_removed", showRemoved)); // query parameter

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllContactsBySegment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ContactCollection>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ContactCollection) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ContactCollection)));
        }

        /// <summary>
        /// Get all contacts by Segment Id Returns all contacts filtered by Segment Id
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">ID of the List</param>
        /// <param name="segmentId">ID of the Segment</param>
        /// <param name="offset">Element offset (starting at zero for the first element) (optional)</param>
        /// <param name="limit">Number of items to return (optional, default to 10)</param>
        /// <param name="showRemoved">Show removed contacts (optional)</param>
        /// <returns>Task of ContactCollection</returns>
        public async System.Threading.Tasks.Task<ContactCollection> GetAllContactsBySegmentAsync (int? listId, string segmentId, int? offset = null, int? limit = null, bool? showRemoved = null)
        {
             ApiResponse<ContactCollection> localVarResponse = await GetAllContactsBySegmentAsyncWithHttpInfo(listId, segmentId, offset, limit, showRemoved);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all contacts by Segment Id Returns all contacts filtered by Segment Id
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">ID of the List</param>
        /// <param name="segmentId">ID of the Segment</param>
        /// <param name="offset">Element offset (starting at zero for the first element) (optional)</param>
        /// <param name="limit">Number of items to return (optional, default to 10)</param>
        /// <param name="showRemoved">Show removed contacts (optional)</param>
        /// <returns>Task of ApiResponse (ContactCollection)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ContactCollection>> GetAllContactsBySegmentAsyncWithHttpInfo (int? listId, string segmentId, int? offset = null, int? limit = null, bool? showRemoved = null)
        {
            // verify the required parameter 'listId' is set
            if (listId == null)
                throw new ApiException(400, "Missing required parameter 'listId' when calling ContactsApi->GetAllContactsBySegment");
            // verify the required parameter 'segmentId' is set
            if (segmentId == null)
                throw new ApiException(400, "Missing required parameter 'segmentId' when calling ContactsApi->GetAllContactsBySegment");

            var localVarPath = "/lists/{list_id}/contacts/segment/{segment_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (listId != null) localVarPathParams.Add("list_id", this.Configuration.ApiClient.ParameterToString(listId)); // path parameter
            if (segmentId != null) localVarPathParams.Add("segment_id", this.Configuration.ApiClient.ParameterToString(segmentId)); // path parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (showRemoved != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "show_removed", showRemoved)); // query parameter

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllContactsBySegment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ContactCollection>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ContactCollection) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ContactCollection)));
        }

        /// <summary>
        /// Get contact Returns contact information given its ID
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">ID of the Contact</param>
        /// <param name="listId">ID of the List</param>
        /// <returns>ComplexContact</returns>
        public ComplexContact GetContact (string contactId, int? listId)
        {
             ApiResponse<ComplexContact> localVarResponse = GetContactWithHttpInfo(contactId, listId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get contact Returns contact information given its ID
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">ID of the Contact</param>
        /// <param name="listId">ID of the List</param>
        /// <returns>ApiResponse of ComplexContact</returns>
        public ApiResponse< ComplexContact > GetContactWithHttpInfo (string contactId, int? listId)
        {
            // verify the required parameter 'contactId' is set
            if (contactId == null)
                throw new ApiException(400, "Missing required parameter 'contactId' when calling ContactsApi->GetContact");
            // verify the required parameter 'listId' is set
            if (listId == null)
                throw new ApiException(400, "Missing required parameter 'listId' when calling ContactsApi->GetContact");

            var localVarPath = "/lists/{list_id}/contacts/{contact_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contactId != null) localVarPathParams.Add("contact_id", this.Configuration.ApiClient.ParameterToString(contactId)); // path parameter
            if (listId != null) localVarPathParams.Add("list_id", this.Configuration.ApiClient.ParameterToString(listId)); // path parameter

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetContact", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ComplexContact>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ComplexContact) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ComplexContact)));
        }

        /// <summary>
        /// Get contact Returns contact information given its ID
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">ID of the Contact</param>
        /// <param name="listId">ID of the List</param>
        /// <returns>Task of ComplexContact</returns>
        public async System.Threading.Tasks.Task<ComplexContact> GetContactAsync (string contactId, int? listId)
        {
             ApiResponse<ComplexContact> localVarResponse = await GetContactAsyncWithHttpInfo(contactId, listId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get contact Returns contact information given its ID
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">ID of the Contact</param>
        /// <param name="listId">ID of the List</param>
        /// <returns>Task of ApiResponse (ComplexContact)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ComplexContact>> GetContactAsyncWithHttpInfo (string contactId, int? listId)
        {
            // verify the required parameter 'contactId' is set
            if (contactId == null)
                throw new ApiException(400, "Missing required parameter 'contactId' when calling ContactsApi->GetContact");
            // verify the required parameter 'listId' is set
            if (listId == null)
                throw new ApiException(400, "Missing required parameter 'listId' when calling ContactsApi->GetContact");

            var localVarPath = "/lists/{list_id}/contacts/{contact_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contactId != null) localVarPathParams.Add("contact_id", this.Configuration.ApiClient.ParameterToString(contactId)); // path parameter
            if (listId != null) localVarPathParams.Add("list_id", this.Configuration.ApiClient.ParameterToString(listId)); // path parameter

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetContact", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ComplexContact>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ComplexContact) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ComplexContact)));
        }

        /// <summary>
        /// Update a specific contact Update contact
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">ID of the Contact</param>
        /// <param name="listId">ID of the List</param>
        /// <param name="contactBaseStatusExtra">Parameters for the contact</param>
        /// <returns>CreateContactResponse</returns>
        public CreateContactResponse PatchContact (string contactId, int? listId, ContactBaseStatusExtra contactBaseStatusExtra)
        {
             ApiResponse<CreateContactResponse> localVarResponse = PatchContactWithHttpInfo(contactId, listId, contactBaseStatusExtra);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a specific contact Update contact
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">ID of the Contact</param>
        /// <param name="listId">ID of the List</param>
        /// <param name="contactBaseStatusExtra">Parameters for the contact</param>
        /// <returns>ApiResponse of CreateContactResponse</returns>
        public ApiResponse< CreateContactResponse > PatchContactWithHttpInfo (string contactId, int? listId, ContactBaseStatusExtra contactBaseStatusExtra)
        {
            // verify the required parameter 'contactId' is set
            if (contactId == null)
                throw new ApiException(400, "Missing required parameter 'contactId' when calling ContactsApi->PatchContact");
            // verify the required parameter 'listId' is set
            if (listId == null)
                throw new ApiException(400, "Missing required parameter 'listId' when calling ContactsApi->PatchContact");
            // verify the required parameter 'contactBaseStatusExtra' is set
            if (contactBaseStatusExtra == null)
                throw new ApiException(400, "Missing required parameter 'contactBaseStatusExtra' when calling ContactsApi->PatchContact");

            var localVarPath = "/lists/{list_id}/contacts/{contact_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contactId != null) localVarPathParams.Add("contact_id", this.Configuration.ApiClient.ParameterToString(contactId)); // path parameter
            if (listId != null) localVarPathParams.Add("list_id", this.Configuration.ApiClient.ParameterToString(listId)); // path parameter
            if (contactBaseStatusExtra != null && contactBaseStatusExtra.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(contactBaseStatusExtra); // http body (model) parameter
            }
            else
            {
                localVarPostBody = contactBaseStatusExtra; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PatchContact", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreateContactResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CreateContactResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateContactResponse)));
        }

        /// <summary>
        /// Update a specific contact Update contact
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">ID of the Contact</param>
        /// <param name="listId">ID of the List</param>
        /// <param name="contactBaseStatusExtra">Parameters for the contact</param>
        /// <returns>Task of CreateContactResponse</returns>
        public async System.Threading.Tasks.Task<CreateContactResponse> PatchContactAsync (string contactId, int? listId, ContactBaseStatusExtra contactBaseStatusExtra)
        {
             ApiResponse<CreateContactResponse> localVarResponse = await PatchContactAsyncWithHttpInfo(contactId, listId, contactBaseStatusExtra);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a specific contact Update contact
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">ID of the Contact</param>
        /// <param name="listId">ID of the List</param>
        /// <param name="contactBaseStatusExtra">Parameters for the contact</param>
        /// <returns>Task of ApiResponse (CreateContactResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CreateContactResponse>> PatchContactAsyncWithHttpInfo (string contactId, int? listId, ContactBaseStatusExtra contactBaseStatusExtra)
        {
            // verify the required parameter 'contactId' is set
            if (contactId == null)
                throw new ApiException(400, "Missing required parameter 'contactId' when calling ContactsApi->PatchContact");
            // verify the required parameter 'listId' is set
            if (listId == null)
                throw new ApiException(400, "Missing required parameter 'listId' when calling ContactsApi->PatchContact");
            // verify the required parameter 'contactBaseStatusExtra' is set
            if (contactBaseStatusExtra == null)
                throw new ApiException(400, "Missing required parameter 'contactBaseStatusExtra' when calling ContactsApi->PatchContact");

            var localVarPath = "/lists/{list_id}/contacts/{contact_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contactId != null) localVarPathParams.Add("contact_id", this.Configuration.ApiClient.ParameterToString(contactId)); // path parameter
            if (listId != null) localVarPathParams.Add("list_id", this.Configuration.ApiClient.ParameterToString(listId)); // path parameter
            if (contactBaseStatusExtra != null && contactBaseStatusExtra.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(contactBaseStatusExtra); // http body (model) parameter
            }
            else
            {
                localVarPostBody = contactBaseStatusExtra; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PatchContact", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreateContactResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CreateContactResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateContactResponse)));
        }

        /// <summary>
        /// Search contact Searches a contact across all lists and returns a collection of contacts found
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contact">Contact to search</param>
        /// <param name="type">Type of contact to search (defaults to &#39;email&#39;) (optional, default to email)</param>
        /// <returns>InlineResponse200</returns>
        public InlineResponse200 SearchContacts (string contact, string type = null)
        {
             ApiResponse<InlineResponse200> localVarResponse = SearchContactsWithHttpInfo(contact, type);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search contact Searches a contact across all lists and returns a collection of contacts found
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contact">Contact to search</param>
        /// <param name="type">Type of contact to search (defaults to &#39;email&#39;) (optional, default to email)</param>
        /// <returns>ApiResponse of InlineResponse200</returns>
        public ApiResponse< InlineResponse200 > SearchContactsWithHttpInfo (string contact, string type = null)
        {
            // verify the required parameter 'contact' is set
            if (contact == null)
                throw new ApiException(400, "Missing required parameter 'contact' when calling ContactsApi->SearchContacts");

            var localVarPath = "/contacts/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter
            if (contact != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "contact", contact)); // query parameter

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchContacts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse200>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse200) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse200)));
        }

        /// <summary>
        /// Search contact Searches a contact across all lists and returns a collection of contacts found
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contact">Contact to search</param>
        /// <param name="type">Type of contact to search (defaults to &#39;email&#39;) (optional, default to email)</param>
        /// <returns>Task of InlineResponse200</returns>
        public async System.Threading.Tasks.Task<InlineResponse200> SearchContactsAsync (string contact, string type = null)
        {
             ApiResponse<InlineResponse200> localVarResponse = await SearchContactsAsyncWithHttpInfo(contact, type);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search contact Searches a contact across all lists and returns a collection of contacts found
        /// </summary>
        /// <exception cref="org.egoi.client.api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contact">Contact to search</param>
        /// <param name="type">Type of contact to search (defaults to &#39;email&#39;) (optional, default to email)</param>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse200>> SearchContactsAsyncWithHttpInfo (string contact, string type = null)
        {
            // verify the required parameter 'contact' is set
            if (contact == null)
                throw new ApiException(400, "Missing required parameter 'contact' when calling ContactsApi->SearchContacts");

            var localVarPath = "/contacts/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter
            if (contact != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "contact", contact)); // query parameter

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchContacts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse200>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse200) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse200)));
        }

    }
}
