/* 
 * APIv3 (Beta)
 *
 *  # Introduction Just a quick peek!!! This is our new version of API. Remember, it is not stable yet!!! But we invite you play with it and give us your feedback ;) # Getting Started  E-goi can be integrated with many environments and programming languages via our REST API. We've created a developer focused portal to give your organization a clear and quick overview of how to integrate with E-goi. The developer portal focuses on scenarios for integration and flow of events. We recommend familiarizing yourself with all of the content in the developer portal, before start using our rest API.   The E-goi  APIv3 is served over HTTPS. To ensure data privacy, unencrypted HTTP is not supported.  Request data is passed to the API by POSTing JSON objects to the API endpoints with the appropriate parameters.   BaseURL = api.egoiapp.com  # RESTful Services This API supports 5 HTTP methods:  * <b>GET</b>: The HTTP GET method is used to **read** (or retrieve) a representation of a resource. * <b>POST</b>: The POST verb is most-often utilized to **create** new resources. * <b>PATCH</b>: PATCH is used for **modify** capabilities. The PATCH request only needs to contain the changes to the resource, not the complete resource * <b>PUT</b>: PUT is most-often utilized for **update** capabilities, PUT-ing to a known resource URI with the request body containing the newly-updated representation of the original resource. * <b>DELETE</b>: DELETE is pretty easy to understand. It is used to **delete** a resource identified by a URI.  # Authentication   We use a custom authentication method, you will need a apikey that you can find in your account settings. Below you will see a curl example to get your account information:  #!/bin/bash  curl -X GET 'https://api.egoiapp.com/my-account' \\  -H 'accept: application/json' \\  -H 'Apikey: <YOUR_APY_KEY>'  Here you can see a curl Post example with authentication:  #!/bin/bash  curl -X POST 'http://api.egoiapp.com/tags' \\  -H 'accept: application/json' \\  -H 'Apikey: <YOUR_APY_KEY>' \\  -H 'Content-Type: application/json' \\  -d '{`name`:`Your custom tag`,`color`:`#FFFFFF`}'  # SDK Get started quickly with E-goi with our integration tools. Our SDK is a modern open source library that makes it easy to integrate your application with E-goi services. * <b><a href='https://github.com/E-goi/sdk-java'>Java</a></b> * <b><a href='https://github.com/E-goi/sdk-php'>PHP</a></b> * <b><a href='https://github.com/E-goi/sdk-python'>Python</a></b>  <security-definitions/>
 *
 * OpenAPI spec version: 3.0.0-beta
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = org.egoi.client.api.Client.OpenAPIDateConverter;

namespace org.egoi.client.api.Model
{
    /// <summary>
    /// Overall message information
    /// </summary>
    [DataContract]
    public partial class OverallOverall :  IEquatable<OverallOverall>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OverallOverall" /> class.
        /// </summary>
        /// <param name="destinations">Total number of destinations.</param>
        /// <param name="sends">Total number of sent messages.</param>
        /// <param name="delivered">Total number of delivered messages.</param>
        /// <param name="error">Total number of failed messages.</param>
        /// <param name="invalid">Total number of invalid messages.</param>
        /// <param name="pending">Total number of pending messages.</param>
        public OverallOverall(int? destinations = default(int?), int? sends = default(int?), int? delivered = default(int?), int? error = default(int?), int? invalid = default(int?), int? pending = default(int?))
        {
            this.Destinations = destinations;
            this.Sends = sends;
            this.Delivered = delivered;
            this.Error = error;
            this.Invalid = invalid;
            this.Pending = pending;
        }
        
        /// <summary>
        /// Total number of destinations
        /// </summary>
        /// <value>Total number of destinations</value>
        [DataMember(Name="destinations", EmitDefaultValue=false)]
        public int? Destinations { get; set; }

        /// <summary>
        /// Total number of sent messages
        /// </summary>
        /// <value>Total number of sent messages</value>
        [DataMember(Name="sends", EmitDefaultValue=false)]
        public int? Sends { get; set; }

        /// <summary>
        /// Total number of delivered messages
        /// </summary>
        /// <value>Total number of delivered messages</value>
        [DataMember(Name="delivered", EmitDefaultValue=false)]
        public int? Delivered { get; set; }

        /// <summary>
        /// Total number of failed messages
        /// </summary>
        /// <value>Total number of failed messages</value>
        [DataMember(Name="error", EmitDefaultValue=false)]
        public int? Error { get; set; }

        /// <summary>
        /// Total number of invalid messages
        /// </summary>
        /// <value>Total number of invalid messages</value>
        [DataMember(Name="invalid", EmitDefaultValue=false)]
        public int? Invalid { get; set; }

        /// <summary>
        /// Total number of pending messages
        /// </summary>
        /// <value>Total number of pending messages</value>
        [DataMember(Name="pending", EmitDefaultValue=false)]
        public int? Pending { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OverallOverall {\n");
            sb.Append("  Destinations: ").Append(Destinations).Append("\n");
            sb.Append("  Sends: ").Append(Sends).Append("\n");
            sb.Append("  Delivered: ").Append(Delivered).Append("\n");
            sb.Append("  Error: ").Append(Error).Append("\n");
            sb.Append("  Invalid: ").Append(Invalid).Append("\n");
            sb.Append("  Pending: ").Append(Pending).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OverallOverall);
        }

        /// <summary>
        /// Returns true if OverallOverall instances are equal
        /// </summary>
        /// <param name="input">Instance of OverallOverall to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OverallOverall input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Destinations == input.Destinations ||
                    (this.Destinations != null &&
                    this.Destinations.Equals(input.Destinations))
                ) && 
                (
                    this.Sends == input.Sends ||
                    (this.Sends != null &&
                    this.Sends.Equals(input.Sends))
                ) && 
                (
                    this.Delivered == input.Delivered ||
                    (this.Delivered != null &&
                    this.Delivered.Equals(input.Delivered))
                ) && 
                (
                    this.Error == input.Error ||
                    (this.Error != null &&
                    this.Error.Equals(input.Error))
                ) && 
                (
                    this.Invalid == input.Invalid ||
                    (this.Invalid != null &&
                    this.Invalid.Equals(input.Invalid))
                ) && 
                (
                    this.Pending == input.Pending ||
                    (this.Pending != null &&
                    this.Pending.Equals(input.Pending))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Destinations != null)
                    hashCode = hashCode * 59 + this.Destinations.GetHashCode();
                if (this.Sends != null)
                    hashCode = hashCode * 59 + this.Sends.GetHashCode();
                if (this.Delivered != null)
                    hashCode = hashCode * 59 + this.Delivered.GetHashCode();
                if (this.Error != null)
                    hashCode = hashCode * 59 + this.Error.GetHashCode();
                if (this.Invalid != null)
                    hashCode = hashCode * 59 + this.Invalid.GetHashCode();
                if (this.Pending != null)
                    hashCode = hashCode * 59 + this.Pending.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Destinations (int?) minimum
            if(this.Destinations < (int?)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Destinations, must be a value greater than or equal to 1.", new [] { "Destinations" });
            }

            // Sends (int?) minimum
            if(this.Sends < (int?)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Sends, must be a value greater than or equal to 1.", new [] { "Sends" });
            }

            // Delivered (int?) minimum
            if(this.Delivered < (int?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Delivered, must be a value greater than or equal to 0.", new [] { "Delivered" });
            }

            // Error (int?) minimum
            if(this.Error < (int?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Error, must be a value greater than or equal to 0.", new [] { "Error" });
            }

            // Invalid (int?) minimum
            if(this.Invalid < (int?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Invalid, must be a value greater than or equal to 0.", new [] { "Invalid" });
            }

            // Pending (int?) minimum
            if(this.Pending < (int?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Pending, must be a value greater than or equal to 0.", new [] { "Pending" });
            }

            yield break;
        }
    }

}
