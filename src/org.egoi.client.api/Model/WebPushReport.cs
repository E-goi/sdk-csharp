/* 
 * APIv3 (Beta)
 *
 *  # Introduction Just a quick peek!!! This is our new version of API. Remember, it is not stable yet!!! But we invite you play with it and give us your feedback ;) # Getting Started  E-goi can be integrated with many environments and programming languages via our REST API. We've created a developer focused portal to give your organization a clear and quick overview of how to integrate with E-goi. The developer portal focuses on scenarios for integration and flow of events. We recommend familiarizing yourself with all of the content in the developer portal, before start using our rest API.   The E-goi  APIv3 is served over HTTPS. To ensure data privacy, unencrypted HTTP is not supported.  Request data is passed to the API by POSTing JSON objects to the API endpoints with the appropriate parameters.   BaseURL = api.egoiapp.com  # RESTful Services This API supports 5 HTTP methods:  * <b>GET</b>: The HTTP GET method is used to **read** (or retrieve) a representation of a resource. * <b>POST</b>: The POST verb is most-often utilized to **create** new resources. * <b>PATCH</b>: PATCH is used for **modify** capabilities. The PATCH request only needs to contain the changes to the resource, not the complete resource * <b>PUT</b>: PUT is most-often utilized for **update** capabilities, PUT-ing to a known resource URI with the request body containing the newly-updated representation of the original resource. * <b>DELETE</b>: DELETE is pretty easy to understand. It is used to **delete** a resource identified by a URI.  # Authentication   We use a custom authentication method, you will need a apikey that you can find in your account settings. Below you will see a curl example to get your account information:  #!/bin/bash  curl -X GET 'https://api.egoiapp.com/my-account' \\  -H 'accept: application/json' \\  -H 'Apikey: <YOUR_APY_KEY>'  Here you can see a curl Post example with authentication:  #!/bin/bash  curl -X POST 'http://api.egoiapp.com/tags' \\  -H 'accept: application/json' \\  -H 'Apikey: <YOUR_APY_KEY>' \\  -H 'Content-Type: application/json' \\  -d '{`name`:`Your custom tag`,`color`:`#FFFFFF`}'  # SDK Get started quickly with E-goi with our integration tools. Our SDK is a modern open source library that makes it easy to integrate your application with E-goi services. * <b><a href='https://github.com/E-goi/sdk-java'>Java</a></b> * <b><a href='https://github.com/E-goi/sdk-php'>PHP</a></b> * <b><a href='https://github.com/E-goi/sdk-python'>Python</a></b>  <security-definitions/>
 *
 * OpenAPI spec version: 3.0.0-beta
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = org.egoi.client.api.Client.OpenAPIDateConverter;

namespace org.egoi.client.api.Model
{
    /// <summary>
    /// Webpush report schema
    /// </summary>
    [DataContract]
    public partial class WebPushReport :  IEquatable<WebPushReport>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WebPushReport" /> class.
        /// </summary>
        /// <param name="overall">overall.</param>
        /// <param name="devices">Stats of the campaign for each device.</param>
        /// <param name="operatingSystems">Stats of the campaign for each operating system.</param>
        /// <param name="browsers">Stats of the campaign for each browser.</param>
        /// <param name="url">Stats of the campaign for each url.</param>
        public WebPushReport(WebPushStats overall = default(WebPushStats), List<Object> devices = default(List<Object>), List<WebPushReportOperatingSystems> operatingSystems = default(List<WebPushReportOperatingSystems>), List<WebPushReportBrowsers> browsers = default(List<WebPushReportBrowsers>), List<Object> url = default(List<Object>))
        {
            this.Overall = overall;
            this.Devices = devices;
            this.OperatingSystems = operatingSystems;
            this.Browsers = browsers;
            this.Url = url;
        }
        
        /// <summary>
        /// Gets or Sets CampaignHash
        /// </summary>
        [DataMember(Name="campaign_hash", EmitDefaultValue=false)]
        public string CampaignHash { get; private set; }

        /// <summary>
        /// Gets or Sets Overall
        /// </summary>
        [DataMember(Name="overall", EmitDefaultValue=false)]
        public WebPushStats Overall { get; set; }

        /// <summary>
        /// Stats of the campaign for each device
        /// </summary>
        /// <value>Stats of the campaign for each device</value>
        [DataMember(Name="devices", EmitDefaultValue=false)]
        public List<Object> Devices { get; set; }

        /// <summary>
        /// Stats of the campaign for each operating system
        /// </summary>
        /// <value>Stats of the campaign for each operating system</value>
        [DataMember(Name="operating_systems", EmitDefaultValue=false)]
        public List<WebPushReportOperatingSystems> OperatingSystems { get; set; }

        /// <summary>
        /// Stats of the campaign for each browser
        /// </summary>
        /// <value>Stats of the campaign for each browser</value>
        [DataMember(Name="browsers", EmitDefaultValue=false)]
        public List<WebPushReportBrowsers> Browsers { get; set; }

        /// <summary>
        /// Stats of the campaign for each url
        /// </summary>
        /// <value>Stats of the campaign for each url</value>
        [DataMember(Name="url", EmitDefaultValue=false)]
        public List<Object> Url { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WebPushReport {\n");
            sb.Append("  CampaignHash: ").Append(CampaignHash).Append("\n");
            sb.Append("  Overall: ").Append(Overall).Append("\n");
            sb.Append("  Devices: ").Append(Devices).Append("\n");
            sb.Append("  OperatingSystems: ").Append(OperatingSystems).Append("\n");
            sb.Append("  Browsers: ").Append(Browsers).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WebPushReport);
        }

        /// <summary>
        /// Returns true if WebPushReport instances are equal
        /// </summary>
        /// <param name="input">Instance of WebPushReport to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WebPushReport input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CampaignHash == input.CampaignHash ||
                    (this.CampaignHash != null &&
                    this.CampaignHash.Equals(input.CampaignHash))
                ) && 
                (
                    this.Overall == input.Overall ||
                    (this.Overall != null &&
                    this.Overall.Equals(input.Overall))
                ) && 
                (
                    this.Devices == input.Devices ||
                    this.Devices != null &&
                    this.Devices.SequenceEqual(input.Devices)
                ) && 
                (
                    this.OperatingSystems == input.OperatingSystems ||
                    this.OperatingSystems != null &&
                    this.OperatingSystems.SequenceEqual(input.OperatingSystems)
                ) && 
                (
                    this.Browsers == input.Browsers ||
                    this.Browsers != null &&
                    this.Browsers.SequenceEqual(input.Browsers)
                ) && 
                (
                    this.Url == input.Url ||
                    this.Url != null &&
                    this.Url.SequenceEqual(input.Url)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CampaignHash != null)
                    hashCode = hashCode * 59 + this.CampaignHash.GetHashCode();
                if (this.Overall != null)
                    hashCode = hashCode * 59 + this.Overall.GetHashCode();
                if (this.Devices != null)
                    hashCode = hashCode * 59 + this.Devices.GetHashCode();
                if (this.OperatingSystems != null)
                    hashCode = hashCode * 59 + this.OperatingSystems.GetHashCode();
                if (this.Browsers != null)
                    hashCode = hashCode * 59 + this.Browsers.GetHashCode();
                if (this.Url != null)
                    hashCode = hashCode * 59 + this.Url.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // CampaignHash (string) pattern
            Regex regexCampaignHash = new Regex(@"[a-zA-Z0-9_-]*", RegexOptions.CultureInvariant);
            if (false == regexCampaignHash.Match(this.CampaignHash).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CampaignHash, must match a pattern of " + regexCampaignHash, new [] { "CampaignHash" });
            }

            yield break;
        }
    }

}
