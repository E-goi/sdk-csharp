/*
 * APIv3 (New)
 *
 *  # Introduction This is our new version of API. We invite you to start using it and give us your feedback # Getting Started  E-goi can be integrated with many environments and programming languages via our REST API. We've created a developer focused portal to give your organization a clear and quick overview of how to integrate with E-goi. The developer portal focuses on scenarios for integration and flow of events. We recommend familiarizing yourself with all of the content in the developer portal, before start using our rest API.  The E-goi  APIv3 is served over HTTPS. To ensure data privacy, unencrypted HTTP is not supported.  Request data is passed to the API by POSTing JSON objects to the API endpoints with the appropriate parameters.      BaseURL = api.egoiapp.com  # RESTful Services This API supports 5 HTTP methods:  * <b>GET</b>: The HTTP GET method is used to **read** (or retrieve) a representation of a resource. * <b>POST</b>: The POST verb is most-often utilized to **create** new resources. * <b>PATCH</b>: PATCH is used for **modify** capabilities. The PATCH request only needs to contain the changes to the resource, not the complete resource * <b>PUT</b>: PUT is most-often utilized for **update** capabilities, PUT-ing to a known resource URI with the request body containing the newly-updated representation of the original resource. * <b>DELETE</b>: DELETE is pretty easy to understand. It is used to **delete** a resource identified by a URI.  # Authentication  We use a custom authentication method, you will need a apikey that you can find in your account settings. Below you will see a curl example to get your account information:     #!/bin/bash     curl -X GET 'https://api.egoiapp.com/my-account' \\     -H 'accept: application/json' \\     -H 'Apikey: <YOUR_APY_KEY>'  Here you can see a curl Post example with authentication:     #!/bin/bash     curl -X POST 'http://api.egoiapp.com/tags' \\     -H 'accept: application/json' \\     -H 'Apikey: <YOUR_APY_KEY>' \\     -H 'Content-Type: application/json' \\     -d '{`name`:`Your custom tag`,`color`:`#FFFFFF`}'  # SDK Get started quickly with E-goi with our integration tools. Our SDK is a modern open source library that makes it easy to integrate your application with E-goi services.  * <a href='https://github.com/E-goi/sdk-java'>Java</a>  * <a href='https://github.com/E-goi/sdk-php'>PHP</a>  * <a href='https://github.com/E-goi/sdk-python'>Python</a>  * <a href='https://github.com/E-goi/sdk-ruby'>Ruby</a>  * <a href='https://github.com/E-goi/sdk-javascript'>Javascript</a>  * <a href='https://github.com/E-goi/sdk-csharp'>C#</a>  # Stream Limits Stream limits are security mesures we have to make sure our API have a fair use policy, for this reason, any request that creates or modifies data (**POST**, **PATCH** and **PUT**) is limited to a maximum of **20MB** of content length. If you arrive to this limit in one of your request, you'll receive a HTTP code **413 (Request Entity Too Large)** and the request will be ignored. To avoid this error in importation's requests, it's advised the request's division in batches that have each one less than 20MB.  # Timeouts Timeouts set a maximum waiting time on a request's response. Our API, sets a default timeout for each request and when breached, you'll receive an HTTP **408 (Request Timeout)** error code. You should take into consideration that response times can vary widely based on the complexity of the request, amount of data being analyzed, and the load on the system and workspace at the time of the query. When dealing with such errors, you should first attempt to reduce the complexity and amount of data under analysis, and only then, if problems are still occurring ask for support.  For all these reasons, the default timeout for each request is **10 Seconds** and any request that creates or modifies data (**POST**, **PATCH** and **PUT**) will have a timeout of **60 Seconds**. Specific timeouts may exist for specific requests, these can be found in the request's documentation.  <security-definitions/>
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using JsonSubTypes;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = org.egoi.client.api.Client.OpenAPIDateConverter;

namespace org.egoi.client.api.Model
{
    /// <summary>
    /// CampaignEmailContent
    /// </summary>
    [DataContract]
    [JsonConverter(typeof(JsonSubtypes), "type")]
    public partial class CampaignEmailContent :  IEquatable<CampaignEmailContent>, IValidatableObject
    {
        /// <summary>
        /// Defines Type
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum File for value: file
            /// </summary>
            [EnumMember(Value = "file")]
            File = 1

        }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=true)]
        public TypeEnum Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CampaignEmailContent" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CampaignEmailContent() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CampaignEmailContent" /> class.
        /// </summary>
        /// <param name="type">type (required).</param>
        /// <param name="body">HTML code of the campaign (required).</param>
        /// <param name="plainText">Plain text for the campaign.</param>
        /// <param name="snippet">Snippet text for the campaign.</param>
        /// <param name="templateId">ID of the template for this campaign (Email builder templates are not allowed) (required).</param>
        /// <param name="url">Campaign url (required).</param>
        /// <param name="usePageTitle">True to use page title as the campaign title (default to false).</param>
        /// <param name="file">Campaign file (required).</param>
        public CampaignEmailContent(TypeEnum type = default(TypeEnum), string body = default(string), string plainText = default(string), string snippet = default(string), int templateId = default(int), string url = default(string), bool usePageTitle = false, string file = default(string))
        {
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for CampaignEmailContent and cannot be null");
            }
            else
            {
                this.Type = type;
            }

            // to ensure "body" is required (not null)
            if (body == null)
            {
                throw new InvalidDataException("body is a required property for CampaignEmailContent and cannot be null");
            }
            else
            {
                this.Body = body;
            }

            // to ensure "templateId" is required (not null)
            if (templateId == null)
            {
                throw new InvalidDataException("templateId is a required property for CampaignEmailContent and cannot be null");
            }
            else
            {
                this.TemplateId = templateId;
            }

            // to ensure "url" is required (not null)
            if (url == null)
            {
                throw new InvalidDataException("url is a required property for CampaignEmailContent and cannot be null");
            }
            else
            {
                this.Url = url;
            }

            // to ensure "file" is required (not null)
            if (file == null)
            {
                throw new InvalidDataException("file is a required property for CampaignEmailContent and cannot be null");
            }
            else
            {
                this.File = file;
            }

            this.PlainText = plainText;
            this.Snippet = snippet;
            // use default value if no "usePageTitle" provided
            if (usePageTitle == null)
            {
                this.UsePageTitle = false;
            }
            else
            {
                this.UsePageTitle = usePageTitle;
            }
        }


        /// <summary>
        /// HTML code of the campaign
        /// </summary>
        /// <value>HTML code of the campaign</value>
        [DataMember(Name="body", EmitDefaultValue=true)]
        public string Body { get; set; }

        /// <summary>
        /// Plain text for the campaign
        /// </summary>
        /// <value>Plain text for the campaign</value>
        [DataMember(Name="plain_text", EmitDefaultValue=false)]
        public string PlainText { get; set; }

        /// <summary>
        /// Snippet text for the campaign
        /// </summary>
        /// <value>Snippet text for the campaign</value>
        [DataMember(Name="snippet", EmitDefaultValue=false)]
        public string Snippet { get; set; }

        /// <summary>
        /// ID of the template for this campaign (Email builder templates are not allowed)
        /// </summary>
        /// <value>ID of the template for this campaign (Email builder templates are not allowed)</value>
        [DataMember(Name="template_id", EmitDefaultValue=true)]
        public int TemplateId { get; set; }

        /// <summary>
        /// Campaign url
        /// </summary>
        /// <value>Campaign url</value>
        [DataMember(Name="url", EmitDefaultValue=true)]
        public string Url { get; set; }

        /// <summary>
        /// True to use page title as the campaign title
        /// </summary>
        /// <value>True to use page title as the campaign title</value>
        [DataMember(Name="use_page_title", EmitDefaultValue=false)]
        public bool UsePageTitle { get; set; }

        /// <summary>
        /// Campaign file
        /// </summary>
        /// <value>Campaign file</value>
        [DataMember(Name="file", EmitDefaultValue=true)]
        public string File { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CampaignEmailContent {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Body: ").Append(Body).Append("\n");
            sb.Append("  PlainText: ").Append(PlainText).Append("\n");
            sb.Append("  Snippet: ").Append(Snippet).Append("\n");
            sb.Append("  TemplateId: ").Append(TemplateId).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  UsePageTitle: ").Append(UsePageTitle).Append("\n");
            sb.Append("  File: ").Append(File).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CampaignEmailContent);
        }

        /// <summary>
        /// Returns true if CampaignEmailContent instances are equal
        /// </summary>
        /// <param name="input">Instance of CampaignEmailContent to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CampaignEmailContent input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Body == input.Body ||
                    (this.Body != null &&
                    this.Body.Equals(input.Body))
                ) && 
                (
                    this.PlainText == input.PlainText ||
                    (this.PlainText != null &&
                    this.PlainText.Equals(input.PlainText))
                ) && 
                (
                    this.Snippet == input.Snippet ||
                    (this.Snippet != null &&
                    this.Snippet.Equals(input.Snippet))
                ) && 
                (
                    this.TemplateId == input.TemplateId ||
                    (this.TemplateId != null &&
                    this.TemplateId.Equals(input.TemplateId))
                ) && 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                ) && 
                (
                    this.UsePageTitle == input.UsePageTitle ||
                    (this.UsePageTitle != null &&
                    this.UsePageTitle.Equals(input.UsePageTitle))
                ) && 
                (
                    this.File == input.File ||
                    (this.File != null &&
                    this.File.Equals(input.File))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Body != null)
                    hashCode = hashCode * 59 + this.Body.GetHashCode();
                if (this.PlainText != null)
                    hashCode = hashCode * 59 + this.PlainText.GetHashCode();
                if (this.Snippet != null)
                    hashCode = hashCode * 59 + this.Snippet.GetHashCode();
                if (this.TemplateId != null)
                    hashCode = hashCode * 59 + this.TemplateId.GetHashCode();
                if (this.Url != null)
                    hashCode = hashCode * 59 + this.Url.GetHashCode();
                if (this.UsePageTitle != null)
                    hashCode = hashCode * 59 + this.UsePageTitle.GetHashCode();
                if (this.File != null)
                    hashCode = hashCode * 59 + this.File.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
