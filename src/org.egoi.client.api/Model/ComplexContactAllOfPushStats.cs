/*
 * APIv3 (New)
 *
 *  # Introduction This is our new version of API. We invite you to start using it and give us your feedback # Getting Started  E-goi can be integrated with many environments and programming languages via our REST API. We've created a developer focused portal to give your organization a clear and quick overview of how to integrate with E-goi. The developer portal focuses on scenarios for integration and flow of events. We recommend familiarizing yourself with all of the content in the developer portal, before start using our rest API.  The E-goi  APIv3 is served over HTTPS. To ensure data privacy, unencrypted HTTP is not supported.  Request data is passed to the API by POSTing JSON objects to the API endpoints with the appropriate parameters.      BaseURL = api.egoiapp.com  # RESTful Services This API supports 5 HTTP methods:  * <b>GET</b>: The HTTP GET method is used to **read** (or retrieve) a representation of a resource. * <b>POST</b>: The POST verb is most-often utilized to **create** new resources. * <b>PATCH</b>: PATCH is used for **modify** capabilities. The PATCH request only needs to contain the changes to the resource, not the complete resource * <b>PUT</b>: PUT is most-often utilized for **update** capabilities, PUT-ing to a known resource URI with the request body containing the newly-updated representation of the original resource. * <b>DELETE</b>: DELETE is pretty easy to understand. It is used to **delete** a resource identified by a URI.  # Authentication  We use a custom authentication method, you will need a apikey that you can find in your account settings. Below you will see a curl example to get your account information:     #!/bin/bash     curl -X GET 'https://api.egoiapp.com/my-account' \\     -H 'accept: application/json' \\     -H 'Apikey: <YOUR_APY_KEY>'  Here you can see a curl Post example with authentication:     #!/bin/bash     curl -X POST 'http://api.egoiapp.com/tags' \\     -H 'accept: application/json' \\     -H 'Apikey: <YOUR_APY_KEY>' \\     -H 'Content-Type: application/json' \\     -d '{`name`:`Your custom tag`,`color`:`#FFFFFF`}'  # SDK Get started quickly with E-goi with our integration tools. Our SDK is a modern open source library that makes it easy to integrate your application with E-goi services.  * <a href='https://github.com/E-goi/sdk-java'>Java</a>  * <a href='https://github.com/E-goi/sdk-php'>PHP</a>  * <a href='https://github.com/E-goi/sdk-python'>Python</a>  * <a href='https://github.com/E-goi/sdk-ruby'>Ruby</a>  * <a href='https://github.com/E-goi/sdk-javascript'>Javascript</a>  * <a href='https://github.com/E-goi/sdk-csharp'>C#</a>  # Stream Limits Stream limits are security mesures we have to make sure our API have a fair use policy, for this reason, any request that creates or modifies data (**POST**, **PATCH** and **PUT**) is limited to a maximum of **20MB** of content length. If you arrive to this limit in one of your request, you'll receive a HTTP code **413 (Request Entity Too Large)** and the request will be ignored. To avoid this error in importation's requests, it's advised the request's division in batches that have each one less than 20MB.  # Timeouts Timeouts set a maximum waiting time on a request's response. Our API, sets a default timeout for each request and when breached, you'll receive an HTTP **408 (Request Timeout)** error code. You should take into consideration that response times can vary widely based on the complexity of the request, amount of data being analyzed, and the load on the system and workspace at the time of the query. When dealing with such errors, you should first attempt to reduce the complexity and amount of data under analysis, and only then, if problems are still occurring ask for support.  For all these reasons, the default timeout for each request is **10 Seconds** and any request that creates or modifies data (**POST**, **PATCH** and **PUT**) will have a timeout of **60 Seconds**. Specific timeouts may exist for specific requests, these can be found in the request's documentation.  <security-definitions/>
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = org.egoi.client.api.Client.OpenAPIDateConverter;

namespace org.egoi.client.api.Model
{
    /// <summary>
    /// Push stats of the contact
    /// </summary>
    [DataContract]
    public partial class ComplexContactAllOfPushStats :  IEquatable<ComplexContactAllOfPushStats>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ComplexContactAllOfPushStats" /> class.
        /// </summary>
        /// <param name="sent">Push messages sent to the contact.</param>
        /// <param name="delivered">Push messages delivered to the contact.</param>
        /// <param name="notDelivered">Push messages that were not delivered to the contact.</param>
        /// <param name="views">Push messages that were viewed by the contact.</param>
        /// <param name="clicks">Total number of clicks made by the contact.</param>
        /// <param name="lastViewDate">Date of the last push message view of the contact.</param>
        public ComplexContactAllOfPushStats(int sent = default(int), int delivered = default(int), int notDelivered = default(int), int views = default(int), int clicks = default(int), DateTime? lastViewDate = default(DateTime?))
        {
            this.LastViewDate = lastViewDate;
            this.Sent = sent;
            this.Delivered = delivered;
            this.NotDelivered = notDelivered;
            this.Views = views;
            this.Clicks = clicks;
            this.LastViewDate = lastViewDate;
        }

        /// <summary>
        /// Push messages sent to the contact
        /// </summary>
        /// <value>Push messages sent to the contact</value>
        [DataMember(Name="sent", EmitDefaultValue=false)]
        public int Sent { get; set; }

        /// <summary>
        /// Push messages delivered to the contact
        /// </summary>
        /// <value>Push messages delivered to the contact</value>
        [DataMember(Name="delivered", EmitDefaultValue=false)]
        public int Delivered { get; set; }

        /// <summary>
        /// Push messages that were not delivered to the contact
        /// </summary>
        /// <value>Push messages that were not delivered to the contact</value>
        [DataMember(Name="not_delivered", EmitDefaultValue=false)]
        public int NotDelivered { get; set; }

        /// <summary>
        /// Push messages that were viewed by the contact
        /// </summary>
        /// <value>Push messages that were viewed by the contact</value>
        [DataMember(Name="views", EmitDefaultValue=false)]
        public int Views { get; set; }

        /// <summary>
        /// Total number of clicks made by the contact
        /// </summary>
        /// <value>Total number of clicks made by the contact</value>
        [DataMember(Name="clicks", EmitDefaultValue=false)]
        public int Clicks { get; set; }

        /// <summary>
        /// Date of the last push message view of the contact
        /// </summary>
        /// <value>Date of the last push message view of the contact</value>
        [DataMember(Name="last_view_date", EmitDefaultValue=true)]
        public DateTime? LastViewDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ComplexContactAllOfPushStats {\n");
            sb.Append("  Sent: ").Append(Sent).Append("\n");
            sb.Append("  Delivered: ").Append(Delivered).Append("\n");
            sb.Append("  NotDelivered: ").Append(NotDelivered).Append("\n");
            sb.Append("  Views: ").Append(Views).Append("\n");
            sb.Append("  Clicks: ").Append(Clicks).Append("\n");
            sb.Append("  LastViewDate: ").Append(LastViewDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ComplexContactAllOfPushStats);
        }

        /// <summary>
        /// Returns true if ComplexContactAllOfPushStats instances are equal
        /// </summary>
        /// <param name="input">Instance of ComplexContactAllOfPushStats to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ComplexContactAllOfPushStats input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Sent == input.Sent ||
                    (this.Sent != null &&
                    this.Sent.Equals(input.Sent))
                ) && 
                (
                    this.Delivered == input.Delivered ||
                    (this.Delivered != null &&
                    this.Delivered.Equals(input.Delivered))
                ) && 
                (
                    this.NotDelivered == input.NotDelivered ||
                    (this.NotDelivered != null &&
                    this.NotDelivered.Equals(input.NotDelivered))
                ) && 
                (
                    this.Views == input.Views ||
                    (this.Views != null &&
                    this.Views.Equals(input.Views))
                ) && 
                (
                    this.Clicks == input.Clicks ||
                    (this.Clicks != null &&
                    this.Clicks.Equals(input.Clicks))
                ) && 
                (
                    this.LastViewDate == input.LastViewDate ||
                    (this.LastViewDate != null &&
                    this.LastViewDate.Equals(input.LastViewDate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Sent != null)
                    hashCode = hashCode * 59 + this.Sent.GetHashCode();
                if (this.Delivered != null)
                    hashCode = hashCode * 59 + this.Delivered.GetHashCode();
                if (this.NotDelivered != null)
                    hashCode = hashCode * 59 + this.NotDelivered.GetHashCode();
                if (this.Views != null)
                    hashCode = hashCode * 59 + this.Views.GetHashCode();
                if (this.Clicks != null)
                    hashCode = hashCode * 59 + this.Clicks.GetHashCode();
                if (this.LastViewDate != null)
                    hashCode = hashCode * 59 + this.LastViewDate.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
