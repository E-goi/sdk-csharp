/*
 * APIv3 (New)
 *
 *  # Introduction This is our new version of API. We invite you to start using it and give us your feedback # Getting Started  E-goi can be integrated with many environments and programming languages via our REST API. We've created a developer focused portal to give your organization a clear and quick overview of how to integrate with E-goi. The developer portal focuses on scenarios for integration and flow of events. We recommend familiarizing yourself with all of the content in the developer portal, before start using our rest API.  The E-goi  APIv3 is served over HTTPS. To ensure data privacy, unencrypted HTTP is not supported.  Request data is passed to the API by POSTing JSON objects to the API endpoints with the appropriate parameters.      BaseURL = api.egoiapp.com  # RESTful Services This API supports 5 HTTP methods:  * <b>GET</b>: The HTTP GET method is used to **read** (or retrieve) a representation of a resource. * <b>POST</b>: The POST verb is most-often utilized to **create** new resources. * <b>PATCH</b>: PATCH is used for **modify** capabilities. The PATCH request only needs to contain the changes to the resource, not the complete resource * <b>PUT</b>: PUT is most-often utilized for **update** capabilities, PUT-ing to a known resource URI with the request body containing the newly-updated representation of the original resource. * <b>DELETE</b>: DELETE is pretty easy to understand. It is used to **delete** a resource identified by a URI.  # Authentication  We use a custom authentication method, you will need a apikey that you can find in your account settings. Below you will see a curl example to get your account information:     #!/bin/bash     curl -X GET 'https://api.egoiapp.com/my-account' \\     -H 'accept: application/json' \\     -H 'Apikey: <YOUR_APY_KEY>'  Here you can see a curl Post example with authentication:     #!/bin/bash     curl -X POST 'http://api.egoiapp.com/tags' \\     -H 'accept: application/json' \\     -H 'Apikey: <YOUR_APY_KEY>' \\     -H 'Content-Type: application/json' \\     -d '{`name`:`Your custom tag`,`color`:`#FFFFFF`}'  # SDK Get started quickly with E-goi with our integration tools. Our SDK is a modern open source library that makes it easy to integrate your application with E-goi services.  * <a href='https://github.com/E-goi/sdk-java'>Java</a>  * <a href='https://github.com/E-goi/sdk-php'>PHP</a>  * <a href='https://github.com/E-goi/sdk-python'>Python</a>  * <a href='https://github.com/E-goi/sdk-ruby'>Ruby</a>  * <a href='https://github.com/E-goi/sdk-javascript'>Javascript</a>  * <a href='https://github.com/E-goi/sdk-csharp'>C#</a>  # Stream Limits Stream limits are security mesures we have to make sure our API have a fair use policy, for this reason, any request that creates or modifies data (**POST**, **PATCH** and **PUT**) is limited to a maximum of **20MB** of content length. If you arrive to this limit in one of your request, you'll receive a HTTP code **413 (Request Entity Too Large)** and the request will be ignored. To avoid this error in importation's requests, it's advised the request's division in batches that have each one less than 20MB.  # Timeouts Timeouts set a maximum waiting time on a request's response. Our API, sets a default timeout for each request and when breached, you'll receive an HTTP **408 (Request Timeout)** error code. You should take into consideration that response times can vary widely based on the complexity of the request, amount of data being analyzed, and the load on the system and workspace at the time of the query. When dealing with such errors, you should first attempt to reduce the complexity and amount of data under analysis, and only then, if problems are still occurring ask for support.  For all these reasons, the default timeout for each request is **10 Seconds** and any request that creates or modifies data (**POST**, **PATCH** and **PUT**) will have a timeout of **60 Seconds**. Specific timeouts may exist for specific requests, these can be found in the request's documentation.  <security-definitions/>
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using org.egoi.client.api.Client;
using org.egoi.client.api.Api;
using org.egoi.client.api.Model;

namespace org.egoi.client.api.Test
{
    /// <summary>
    ///  Class for testing ContactsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class ContactsApiTests
    {
        private ContactsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new ContactsApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of ContactsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOf' ContactsApi
            //Assert.IsInstanceOf(typeof(ContactsApi), instance);
        }

        
        /// <summary>
        /// Test ActionActivateContacts
        /// </summary>
        [Test]
        public void ActionActivateContactsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int listId = null;
            //ActivateContactsRequest activateContactsRequest = null;
            //var response = instance.ActionActivateContacts(listId, activateContactsRequest);
            //Assert.IsInstanceOf(typeof(AcceptedResponse), response, "response is AcceptedResponse");
        }
        
        /// <summary>
        /// Test ActionAttachTag
        /// </summary>
        [Test]
        public void ActionAttachTagTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int listId = null;
            //AttachTagRequest attachTagRequest = null;
            //var response = instance.ActionAttachTag(listId, attachTagRequest);
            //Assert.IsInstanceOf(typeof(AcceptedResponse), response, "response is AcceptedResponse");
        }
        
        /// <summary>
        /// Test ActionDeactivateContacts
        /// </summary>
        [Test]
        public void ActionDeactivateContactsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int listId = null;
            //DeactivateContactsRequest deactivateContactsRequest = null;
            //var response = instance.ActionDeactivateContacts(listId, deactivateContactsRequest);
            //Assert.IsInstanceOf(typeof(AcceptedResponse), response, "response is AcceptedResponse");
        }
        
        /// <summary>
        /// Test ActionDetachTag
        /// </summary>
        [Test]
        public void ActionDetachTagTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int listId = null;
            //DetachTagRequest detachTagRequest = null;
            //var response = instance.ActionDetachTag(listId, detachTagRequest);
            //Assert.IsInstanceOf(typeof(AcceptedResponse), response, "response is AcceptedResponse");
        }
        
        /// <summary>
        /// Test ActionExportContacts
        /// </summary>
        [Test]
        public void ActionExportContactsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int listId = null;
            //ContactExportRequest contactExportRequest = null;
            //var response = instance.ActionExportContacts(listId, contactExportRequest);
            //Assert.IsInstanceOf(typeof(AcceptedResponse), response, "response is AcceptedResponse");
        }
        
        /// <summary>
        /// Test ActionForgetContacts
        /// </summary>
        [Test]
        public void ActionForgetContactsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int listId = null;
            //ContactForgetRequest contactForgetRequest = null;
            //var response = instance.ActionForgetContacts(listId, contactForgetRequest);
            //Assert.IsInstanceOf(typeof(AcceptedResponse), response, "response is AcceptedResponse");
        }
        
        /// <summary>
        /// Test ActionImportBulk
        /// </summary>
        [Test]
        public void ActionImportBulkTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int listId = null;
            //ImportBulkRequest importBulkRequest = null;
            //var response = instance.ActionImportBulk(listId, importBulkRequest);
            //Assert.IsInstanceOf(typeof(AcceptedResponse), response, "response is AcceptedResponse");
        }
        
        /// <summary>
        /// Test ActionStartAutomation
        /// </summary>
        [Test]
        public void ActionStartAutomationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int listId = null;
            //StartAutomationRequest startAutomationRequest = null;
            //var response = instance.ActionStartAutomation(listId, startAutomationRequest);
            //Assert.IsInstanceOf(typeof(StartAutomationResponse), response, "response is StartAutomationResponse");
        }
        
        /// <summary>
        /// Test ActionUnsubscribeContact
        /// </summary>
        [Test]
        public void ActionUnsubscribeContactTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int listId = null;
            //RemoveRequest removeRequest = null;
            //var response = instance.ActionUnsubscribeContact(listId, removeRequest);
            //Assert.IsInstanceOf(typeof(RemoveResponse), response, "response is RemoveResponse");
        }
        
        /// <summary>
        /// Test ActionUpdateContacts
        /// </summary>
        [Test]
        public void ActionUpdateContactsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int listId = null;
            //UpdateContactsRequest updateContactsRequest = null;
            //var response = instance.ActionUpdateContacts(listId, updateContactsRequest);
            //Assert.IsInstanceOf(typeof(AcceptedResponse), response, "response is AcceptedResponse");
        }
        
        /// <summary>
        /// Test CreateContact
        /// </summary>
        [Test]
        public void CreateContactTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int listId = null;
            //ContactBaseExtraPost contactBaseExtraPost = null;
            //var response = instance.CreateContact(listId, contactBaseExtraPost);
            //Assert.IsInstanceOf(typeof(CreateContactResponse), response, "response is CreateContactResponse");
        }
        
        /// <summary>
        /// Test GetAllContactActivities
        /// </summary>
        [Test]
        public void GetAllContactActivitiesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string contactId = null;
            //int listId = null;
            //int? offset = null;
            //int? limit = null;
            //DateTime? dateMin = null;
            //DateTime? dateMax = null;
            //var response = instance.GetAllContactActivities(contactId, listId, offset, limit, dateMin, dateMax);
            //Assert.IsInstanceOf(typeof(ActivityCollection), response, "response is ActivityCollection");
        }
        
        /// <summary>
        /// Test GetAllContacts
        /// </summary>
        [Test]
        public void GetAllContactsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int listId = null;
            //int? offset = null;
            //int? limit = null;
            //string firstName = null;
            //string lastName = null;
            //string email = null;
            //bool? emailStatus = null;
            //string cellphone = null;
            //bool? cellphoneStatus = null;
            //string phone = null;
            //bool? phoneStatus = null;
            //DateTime? birthDate = null;
            //string language = null;
            //ExtraFieldId extraFieldId = null;
            //var response = instance.GetAllContacts(listId, offset, limit, firstName, lastName, email, emailStatus, cellphone, cellphoneStatus, phone, phoneStatus, birthDate, language, extraFieldId);
            //Assert.IsInstanceOf(typeof(ContactCollection), response, "response is ContactCollection");
        }
        
        /// <summary>
        /// Test GetAllContactsBySegment
        /// </summary>
        [Test]
        public void GetAllContactsBySegmentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int listId = null;
            //string segmentId = null;
            //int? offset = null;
            //int? limit = null;
            //bool? showRemoved = null;
            //var response = instance.GetAllContactsBySegment(listId, segmentId, offset, limit, showRemoved);
            //Assert.IsInstanceOf(typeof(ContactCollection), response, "response is ContactCollection");
        }
        
        /// <summary>
        /// Test GetContact
        /// </summary>
        [Test]
        public void GetContactTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string contactId = null;
            //int listId = null;
            //var response = instance.GetContact(contactId, listId);
            //Assert.IsInstanceOf(typeof(ComplexContact), response, "response is ComplexContact");
        }
        
        /// <summary>
        /// Test PatchContact
        /// </summary>
        [Test]
        public void PatchContactTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string contactId = null;
            //int listId = null;
            //ContactBaseStatusExtraNoRemoved contactBaseStatusExtraNoRemoved = null;
            //var response = instance.PatchContact(contactId, listId, contactBaseStatusExtraNoRemoved);
            //Assert.IsInstanceOf(typeof(CreateContactResponse), response, "response is CreateContactResponse");
        }
        
        /// <summary>
        /// Test SearchContacts
        /// </summary>
        [Test]
        public void SearchContactsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string contact = null;
            //string type = null;
            //var response = instance.SearchContacts(contact, type);
            //Assert.IsInstanceOf(typeof(InlineResponse2001), response, "response is InlineResponse2001");
        }
        
    }

}
