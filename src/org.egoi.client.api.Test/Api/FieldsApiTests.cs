/* 
 * APIv3 (Beta)
 *
 *  # Introduction Just a quick peek!!! This is our new version of API. Remember, it is not stable yet!!! But we invite you play with it and give us your feedback ;) # Getting Started  E-goi can be integrated with many environments and programming languages via our REST API. We've created a developer focused portal to give your organization a clear and quick overview of how to integrate with E-goi. The developer portal focuses on scenarios for integration and flow of events. We recommend familiarizing yourself with all of the content in the developer portal, before start using our rest API.   The E-goi  APIv3 is served over HTTPS. To ensure data privacy, unencrypted HTTP is not supported.  Request data is passed to the API by POSTing JSON objects to the API endpoints with the appropriate parameters.   BaseURL = api.egoiapp.com  # RESTful Services This API supports 5 HTTP methods:  * <b>GET</b>: The HTTP GET method is used to **read** (or retrieve) a representation of a resource. * <b>POST</b>: The POST verb is most-often utilized to **create** new resources. * <b>PATCH</b>: PATCH is used for **modify** capabilities. The PATCH request only needs to contain the changes to the resource, not the complete resource * <b>PUT</b>: PUT is most-often utilized for **update** capabilities, PUT-ing to a known resource URI with the request body containing the newly-updated representation of the original resource. * <b>DELETE</b>: DELETE is pretty easy to understand. It is used to **delete** a resource identified by a URI.  # Authentication   We use a custom authentication method, you will need a apikey that you can find in your account settings. Below you will see a curl example to get your account information:  #!/bin/bash  curl -X GET 'https://api.egoiapp.com/my-account' \\  -H 'accept: application/json' \\  -H 'Apikey: <YOUR_APY_KEY>'  Here you can see a curl Post example with authentication:  #!/bin/bash  curl -X POST 'http://api.egoiapp.com/tags' \\  -H 'accept: application/json' \\  -H 'Apikey: <YOUR_APY_KEY>' \\  -H 'Content-Type: application/json' \\  -d '{`name`:`Your custom tag`,`color`:`#FFFFFF`}'  # SDK Get started quickly with E-goi with our integration tools. Our SDK is a modern open source library that makes it easy to integrate your application with E-goi services. * <b><a href='https://github.com/E-goi/sdk-java'>Java</a></b> * <b><a href='https://github.com/E-goi/sdk-php'>PHP</a></b> * <b><a href='https://github.com/E-goi/sdk-python'>Python</a></b>  <security-definitions/>
 *
 * OpenAPI spec version: 3.0.0-beta
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using org.egoi.client.api.Client;
using org.egoi.client.api.Api;
using org.egoi.client.api.Model;

namespace org.egoi.client.api.Test
{
    /// <summary>
    ///  Class for testing FieldsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class FieldsApiTests
    {
        private FieldsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new FieldsApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of FieldsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' FieldsApi
            //Assert.IsInstanceOfType(typeof(FieldsApi), instance, "instance is a FieldsApi");
        }

        
        /// <summary>
        /// Test CreateExtraField
        /// </summary>
        [Test]
        public void CreateExtraFieldTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? listId = null;
            //Field field = null;
            //var response = instance.CreateExtraField(listId, field);
            //Assert.IsInstanceOf<Field> (response, "response is Field");
        }
        
        /// <summary>
        /// Test CreateFieldOption
        /// </summary>
        [Test]
        public void CreateFieldOptionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? listId = null;
            //int? fieldId = null;
            //FieldOption fieldOption = null;
            //var response = instance.CreateFieldOption(listId, fieldId, fieldOption);
            //Assert.IsInstanceOf<FieldOption> (response, "response is FieldOption");
        }
        
        /// <summary>
        /// Test DeleteExtraField
        /// </summary>
        [Test]
        public void DeleteExtraFieldTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? listId = null;
            //int? fieldId = null;
            //instance.DeleteExtraField(listId, fieldId);
            
        }
        
        /// <summary>
        /// Test DeleteFieldOption
        /// </summary>
        [Test]
        public void DeleteFieldOptionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? listId = null;
            //int? fieldId = null;
            //int? optionId = null;
            //instance.DeleteFieldOption(listId, fieldId, optionId);
            
        }
        
        /// <summary>
        /// Test GetAllFieldOptions
        /// </summary>
        [Test]
        public void GetAllFieldOptionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? listId = null;
            //int? fieldId = null;
            //var response = instance.GetAllFieldOptions(listId, fieldId);
            //Assert.IsInstanceOf<FieldOptionsCollection> (response, "response is FieldOptionsCollection");
        }
        
        /// <summary>
        /// Test GetAllFields
        /// </summary>
        [Test]
        public void GetAllFieldsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? listId = null;
            //int? offset = null;
            //int? limit = null;
            //var response = instance.GetAllFields(listId, offset, limit);
            //Assert.IsInstanceOf<FieldCollection> (response, "response is FieldCollection");
        }
        
        /// <summary>
        /// Test PatchBaseField
        /// </summary>
        [Test]
        public void PatchBaseFieldTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? listId = null;
            //string fieldId = null;
            //PatchRequestBaseField patchRequestBaseField = null;
            //var response = instance.PatchBaseField(listId, fieldId, patchRequestBaseField);
            //Assert.IsInstanceOf<Field> (response, "response is Field");
        }
        
        /// <summary>
        /// Test PatchExtraField
        /// </summary>
        [Test]
        public void PatchExtraFieldTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? listId = null;
            //int? fieldId = null;
            //PatchRequestField patchRequestField = null;
            //var response = instance.PatchExtraField(listId, fieldId, patchRequestField);
            //Assert.IsInstanceOf<Field> (response, "response is Field");
        }
        
        /// <summary>
        /// Test UpdateFieldOption
        /// </summary>
        [Test]
        public void UpdateFieldOptionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? listId = null;
            //int? fieldId = null;
            //int? optionId = null;
            //FieldOption fieldOption = null;
            //var response = instance.UpdateFieldOption(listId, fieldId, optionId, fieldOption);
            //Assert.IsInstanceOf<FieldOption> (response, "response is FieldOption");
        }
        
    }

}
